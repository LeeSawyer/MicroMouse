
chooseDirection.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  0000270e  000027a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000270e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b2  00800118  00800118  000027ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000027ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000027ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00002830  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003340  00000000  00000000  00002a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ca  00000000  00000000  00005dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000284e  00000000  00000000  00006792  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006ec  00000000  00000000  00008fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010d3  00000000  00000000  000096cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ab9  00000000  00000000  0000a79f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005c8  00000000  00000000  0000c258  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
       4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__vector_3>
      10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      14:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_5>
      18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
      68:	3f 13       	cpse	r19, r31

0000006a <__ctors_end>:
      6a:	11 24       	eor	r1, r1
      6c:	1f be       	out	0x3f, r1	; 63
      6e:	cf ef       	ldi	r28, 0xFF	; 255
      70:	d8 e0       	ldi	r29, 0x08	; 8
      72:	de bf       	out	0x3e, r29	; 62
      74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	ee e0       	ldi	r30, 0x0E	; 14
      7e:	f7 e2       	ldi	r31, 0x27	; 39
      80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
      82:	05 90       	lpm	r0, Z+
      84:	0d 92       	st	X+, r0
      86:	a8 31       	cpi	r26, 0x18	; 24
      88:	b1 07       	cpc	r27, r17
      8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
      8c:	21 e0       	ldi	r18, 0x01	; 1
      8e:	a8 e1       	ldi	r26, 0x18	; 24
      90:	b1 e0       	ldi	r27, 0x01	; 1
      92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
      94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
      96:	aa 3c       	cpi	r26, 0xCA	; 202
      98:	b2 07       	cpc	r27, r18
      9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
      9c:	10 e0       	ldi	r17, 0x00	; 0
      9e:	c5 e3       	ldi	r28, 0x35	; 53
      a0:	d0 e0       	ldi	r29, 0x00	; 0
      a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
      a4:	21 97       	sbiw	r28, 0x01	; 1
      a6:	fe 01       	movw	r30, r28
      a8:	0e 94 67 13 	call	0x26ce	; 0x26ce <__tablejump2__>
      ac:	c4 33       	cpi	r28, 0x34	; 52
      ae:	d1 07       	cpc	r29, r17
      b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
      b2:	0e 94 24 13 	call	0x2648	; 0x2648 <main>
      b6:	0c 94 85 13 	jmp	0x270a	; 0x270a <_exit>

000000ba <__bad_interrupt>:
      ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <_Z22RegisterInitializationv>:
	}
	if (IRSensorFrontRightLED() > 100)
	alignToFrontWall();
	leftMotorForward(0);
	rightMotorForward(0);
}
      be:	87 b1       	in	r24, 0x07	; 7
      c0:	88 61       	ori	r24, 0x18	; 24
      c2:	87 b9       	out	0x07, r24	; 7
      c4:	83 e6       	ldi	r24, 0x63	; 99
      c6:	8a b9       	out	0x0a, r24	; 10
      c8:	87 b1       	in	r24, 0x07	; 7
      ca:	87 7d       	andi	r24, 0xD7	; 215
      cc:	87 b9       	out	0x07, r24	; 7
      ce:	84 b1       	in	r24, 0x04	; 4
      d0:	86 60       	ori	r24, 0x06	; 6
      d2:	84 b9       	out	0x04, r24	; 4
      d4:	21 e0       	ldi	r18, 0x01	; 1
      d6:	25 b9       	out	0x05, r18	; 5
      d8:	30 e8       	ldi	r19, 0x80	; 128
      da:	3b b9       	out	0x0b, r19	; 11
      dc:	83 ea       	ldi	r24, 0xA3	; 163
      de:	84 bd       	out	0x24, r24	; 36
      e0:	95 e0       	ldi	r25, 0x05	; 5
      e2:	95 bd       	out	0x25, r25	; 37
      e4:	81 ea       	ldi	r24, 0xA1	; 161
      e6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
      ea:	8d e0       	ldi	r24, 0x0D	; 13
      ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
      f0:	e1 eb       	ldi	r30, 0xB1	; 177
      f2:	f0 e0       	ldi	r31, 0x00	; 0
      f4:	80 81       	ld	r24, Z
      f6:	87 60       	ori	r24, 0x07	; 7
      f8:	80 83       	st	Z, r24
      fa:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
      fe:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     102:	87 e6       	ldi	r24, 0x67	; 103
     104:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     108:	86 e0       	ldi	r24, 0x06	; 6
     10a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     10e:	84 e8       	ldi	r24, 0x84	; 132
     110:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     114:	87 e0       	ldi	r24, 0x07	; 7
     116:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
     11a:	30 93 6d 00 	sts	0x006D, r19	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
     11e:	20 93 6b 00 	sts	0x006B, r18	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
     122:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     126:	78 94       	sei
     128:	08 95       	ret

0000012a <__vector_3>:
     12a:	1f 92       	push	r1
     12c:	0f 92       	push	r0
     12e:	0f b6       	in	r0, 0x3f	; 63
     130:	0f 92       	push	r0
     132:	11 24       	eor	r1, r1
     134:	8f 93       	push	r24
     136:	9f 93       	push	r25
     138:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <rightEncoderAPos>
     13c:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <rightEncoderAPos+0x1>
     140:	01 96       	adiw	r24, 0x01	; 1
     142:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <rightEncoderAPos+0x1>
     146:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <rightEncoderAPos>
     14a:	9f 91       	pop	r25
     14c:	8f 91       	pop	r24
     14e:	0f 90       	pop	r0
     150:	0f be       	out	0x3f, r0	; 63
     152:	0f 90       	pop	r0
     154:	1f 90       	pop	r1
     156:	18 95       	reti

00000158 <__vector_5>:
     158:	1f 92       	push	r1
     15a:	0f 92       	push	r0
     15c:	0f b6       	in	r0, 0x3f	; 63
     15e:	0f 92       	push	r0
     160:	11 24       	eor	r1, r1
     162:	8f 93       	push	r24
     164:	9f 93       	push	r25
     166:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <rightEncoderAPos>
     16a:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <rightEncoderAPos+0x1>
     16e:	01 96       	adiw	r24, 0x01	; 1
     170:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <rightEncoderAPos+0x1>
     174:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <rightEncoderAPos>
     178:	9f 91       	pop	r25
     17a:	8f 91       	pop	r24
     17c:	0f 90       	pop	r0
     17e:	0f be       	out	0x3f, r0	; 63
     180:	0f 90       	pop	r0
     182:	1f 90       	pop	r1
     184:	18 95       	reti

00000186 <_Z19timerInMillisecondsj>:
     186:	0f 93       	push	r16
     188:	1f 93       	push	r17
     18a:	8c 01       	movw	r16, r24
     18c:	00 0f       	add	r16, r16
     18e:	11 1f       	adc	r17, r17
     190:	88 0f       	add	r24, r24
     192:	99 1f       	adc	r25, r25
     194:	88 0f       	add	r24, r24
     196:	99 1f       	adc	r25, r25
     198:	88 0f       	add	r24, r24
     19a:	99 1f       	adc	r25, r25
     19c:	08 0f       	add	r16, r24
     19e:	19 1f       	adc	r17, r25
     1a0:	20 e0       	ldi	r18, 0x00	; 0
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	40 e0       	ldi	r20, 0x00	; 0
     1a6:	50 e0       	ldi	r21, 0x00	; 0
     1a8:	ba 01       	movw	r22, r20
     1aa:	e2 eb       	ldi	r30, 0xB2	; 178
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	80 81       	ld	r24, Z
     1b0:	81 3a       	cpi	r24, 0xA1	; 161
     1b2:	30 f4       	brcc	.+12     	; 0x1c0 <_Z19timerInMillisecondsj+0x3a>
     1b4:	80 81       	ld	r24, Z
     1b6:	8f 5f       	subi	r24, 0xFF	; 255
     1b8:	80 83       	st	Z, r24
     1ba:	80 81       	ld	r24, Z
     1bc:	81 3a       	cpi	r24, 0xA1	; 161
     1be:	d0 f3       	brcs	.-12     	; 0x1b4 <_Z19timerInMillisecondsj+0x2e>
     1c0:	10 82       	st	Z, r1
     1c2:	4f 5f       	subi	r20, 0xFF	; 255
     1c4:	5f 4f       	sbci	r21, 0xFF	; 255
     1c6:	6f 4f       	sbci	r22, 0xFF	; 255
     1c8:	7f 4f       	sbci	r23, 0xFF	; 255
     1ca:	04 17       	cp	r16, r20
     1cc:	15 07       	cpc	r17, r21
     1ce:	26 07       	cpc	r18, r22
     1d0:	37 07       	cpc	r19, r23
     1d2:	68 f7       	brcc	.-38     	; 0x1ae <_Z19timerInMillisecondsj+0x28>
     1d4:	80 e0       	ldi	r24, 0x00	; 0
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	1f 91       	pop	r17
     1da:	0f 91       	pop	r16
     1dc:	08 95       	ret

000001de <_Z13diagonalLEDOnv>:
     1de:	44 9a       	sbi	0x08, 4	; 8
     1e0:	08 95       	ret

000001e2 <_Z14diagonalLEDOffv>:
     1e2:	44 98       	cbi	0x08, 4	; 8
     1e4:	08 95       	ret

000001e6 <_Z10frontLEDOnv>:
     1e6:	43 9a       	sbi	0x08, 3	; 8
     1e8:	08 95       	ret

000001ea <_Z11frontLEDOffv>:
     1ea:	43 98       	cbi	0x08, 3	; 8
     1ec:	08 95       	ret

000001ee <_Z17IRSensorFrontLeftv>:
     1ee:	cf 93       	push	r28
     1f0:	df 93       	push	r29
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     1fa:	82 e4       	ldi	r24, 0x42	; 66
     1fc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     200:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_Z11frontLEDOffv>
     204:	ea e7       	ldi	r30, 0x7A	; 122
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	80 81       	ld	r24, Z
     20a:	80 64       	ori	r24, 0x40	; 64
     20c:	80 83       	st	Z, r24
     20e:	80 81       	ld	r24, Z
     210:	86 fd       	sbrc	r24, 6
     212:	fd cf       	rjmp	.-6      	; 0x20e <_Z17IRSensorFrontLeftv+0x20>
     214:	81 e0       	ldi	r24, 0x01	; 1
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     21c:	ea e7       	ldi	r30, 0x7A	; 122
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	80 64       	ori	r24, 0x40	; 64
     224:	80 83       	st	Z, r24
     226:	80 81       	ld	r24, Z
     228:	86 fd       	sbrc	r24, 6
     22a:	fd cf       	rjmp	.-6      	; 0x226 <_Z17IRSensorFrontLeftv+0x38>
     22c:	c0 91 78 00 	lds	r28, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     230:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     234:	d0 e0       	ldi	r29, 0x00	; 0
     236:	d8 2b       	or	r29, r24
     238:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_Z10frontLEDOnv>
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     244:	ea e7       	ldi	r30, 0x7A	; 122
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	80 81       	ld	r24, Z
     24a:	80 64       	ori	r24, 0x40	; 64
     24c:	80 83       	st	Z, r24
     24e:	80 81       	ld	r24, Z
     250:	86 fd       	sbrc	r24, 6
     252:	fd cf       	rjmp	.-6      	; 0x24e <_Z17IRSensorFrontLeftv+0x60>
     254:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_Z11frontLEDOffv>
     258:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     25c:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	92 2b       	or	r25, r18
     264:	8c 1b       	sub	r24, r28
     266:	9d 0b       	sbc	r25, r29
     268:	df 91       	pop	r29
     26a:	cf 91       	pop	r28
     26c:	08 95       	ret

0000026e <_Z18IRSensorFrontRightv>:
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     27a:	86 e4       	ldi	r24, 0x46	; 70
     27c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     280:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_Z11frontLEDOffv>
     284:	ea e7       	ldi	r30, 0x7A	; 122
     286:	f0 e0       	ldi	r31, 0x00	; 0
     288:	80 81       	ld	r24, Z
     28a:	80 64       	ori	r24, 0x40	; 64
     28c:	80 83       	st	Z, r24
     28e:	80 81       	ld	r24, Z
     290:	86 fd       	sbrc	r24, 6
     292:	fd cf       	rjmp	.-6      	; 0x28e <_Z18IRSensorFrontRightv+0x20>
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     29c:	ea e7       	ldi	r30, 0x7A	; 122
     29e:	f0 e0       	ldi	r31, 0x00	; 0
     2a0:	80 81       	ld	r24, Z
     2a2:	80 64       	ori	r24, 0x40	; 64
     2a4:	80 83       	st	Z, r24
     2a6:	80 81       	ld	r24, Z
     2a8:	86 fd       	sbrc	r24, 6
     2aa:	fd cf       	rjmp	.-6      	; 0x2a6 <_Z18IRSensorFrontRightv+0x38>
     2ac:	c0 91 78 00 	lds	r28, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     2b0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     2b4:	d0 e0       	ldi	r29, 0x00	; 0
     2b6:	d8 2b       	or	r29, r24
     2b8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_Z10frontLEDOnv>
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     2c4:	ea e7       	ldi	r30, 0x7A	; 122
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	80 81       	ld	r24, Z
     2ca:	80 64       	ori	r24, 0x40	; 64
     2cc:	80 83       	st	Z, r24
     2ce:	80 81       	ld	r24, Z
     2d0:	86 fd       	sbrc	r24, 6
     2d2:	fd cf       	rjmp	.-6      	; 0x2ce <_Z18IRSensorFrontRightv+0x60>
     2d4:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_Z11frontLEDOffv>
     2d8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     2dc:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	92 2b       	or	r25, r18
     2e4:	8c 1b       	sub	r24, r28
     2e6:	9d 0b       	sbc	r25, r29
     2e8:	df 91       	pop	r29
     2ea:	cf 91       	pop	r28
     2ec:	08 95       	ret

000002ee <_Z17IRSensorAngleLeftv>:
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     2fa:	81 e4       	ldi	r24, 0x41	; 65
     2fc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     300:	ea e7       	ldi	r30, 0x7A	; 122
     302:	f0 e0       	ldi	r31, 0x00	; 0
     304:	80 81       	ld	r24, Z
     306:	80 64       	ori	r24, 0x40	; 64
     308:	80 83       	st	Z, r24
     30a:	80 81       	ld	r24, Z
     30c:	86 fd       	sbrc	r24, 6
     30e:	fd cf       	rjmp	.-6      	; 0x30a <_Z17IRSensorAngleLeftv+0x1c>
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     318:	ea e7       	ldi	r30, 0x7A	; 122
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	80 81       	ld	r24, Z
     31e:	80 64       	ori	r24, 0x40	; 64
     320:	80 83       	st	Z, r24
     322:	80 81       	ld	r24, Z
     324:	86 fd       	sbrc	r24, 6
     326:	fd cf       	rjmp	.-6      	; 0x322 <_Z17IRSensorAngleLeftv+0x34>
     328:	c0 91 78 00 	lds	r28, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     32c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     330:	d0 e0       	ldi	r29, 0x00	; 0
     332:	d8 2b       	or	r29, r24
     334:	0e 94 ef 00 	call	0x1de	; 0x1de <_Z13diagonalLEDOnv>
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     340:	ea e7       	ldi	r30, 0x7A	; 122
     342:	f0 e0       	ldi	r31, 0x00	; 0
     344:	80 81       	ld	r24, Z
     346:	80 64       	ori	r24, 0x40	; 64
     348:	80 83       	st	Z, r24
     34a:	80 81       	ld	r24, Z
     34c:	86 fd       	sbrc	r24, 6
     34e:	fd cf       	rjmp	.-6      	; 0x34a <_Z17IRSensorAngleLeftv+0x5c>
     350:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z14diagonalLEDOffv>
     354:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     358:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	92 2b       	or	r25, r18
     360:	8c 1b       	sub	r24, r28
     362:	9d 0b       	sbc	r25, r29
     364:	df 91       	pop	r29
     366:	cf 91       	pop	r28
     368:	08 95       	ret

0000036a <_Z18IRSensorAngleRightv>:
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     376:	87 e4       	ldi	r24, 0x47	; 71
     378:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     37c:	ea e7       	ldi	r30, 0x7A	; 122
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	80 81       	ld	r24, Z
     382:	80 64       	ori	r24, 0x40	; 64
     384:	80 83       	st	Z, r24
     386:	80 81       	ld	r24, Z
     388:	86 fd       	sbrc	r24, 6
     38a:	fd cf       	rjmp	.-6      	; 0x386 <_Z18IRSensorAngleRightv+0x1c>
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     394:	ea e7       	ldi	r30, 0x7A	; 122
     396:	f0 e0       	ldi	r31, 0x00	; 0
     398:	80 81       	ld	r24, Z
     39a:	80 64       	ori	r24, 0x40	; 64
     39c:	80 83       	st	Z, r24
     39e:	80 81       	ld	r24, Z
     3a0:	86 fd       	sbrc	r24, 6
     3a2:	fd cf       	rjmp	.-6      	; 0x39e <_Z18IRSensorAngleRightv+0x34>
     3a4:	c0 91 78 00 	lds	r28, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     3a8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     3ac:	d0 e0       	ldi	r29, 0x00	; 0
     3ae:	d8 2b       	or	r29, r24
     3b0:	0e 94 ef 00 	call	0x1de	; 0x1de <_Z13diagonalLEDOnv>
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     3bc:	ea e7       	ldi	r30, 0x7A	; 122
     3be:	f0 e0       	ldi	r31, 0x00	; 0
     3c0:	80 81       	ld	r24, Z
     3c2:	80 64       	ori	r24, 0x40	; 64
     3c4:	80 83       	st	Z, r24
     3c6:	80 81       	ld	r24, Z
     3c8:	86 fd       	sbrc	r24, 6
     3ca:	fd cf       	rjmp	.-6      	; 0x3c6 <_Z18IRSensorAngleRightv+0x5c>
     3cc:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z14diagonalLEDOffv>
     3d0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     3d4:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	92 2b       	or	r25, r18
     3dc:	8c 1b       	sub	r24, r28
     3de:	9d 0b       	sbc	r25, r29
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	08 95       	ret

000003e6 <_Z21IRSensorFrontRightLEDv>:
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     3ee:	86 e4       	ldi	r24, 0x46	; 70
     3f0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     3f4:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_Z11frontLEDOffv>
     3f8:	ea e7       	ldi	r30, 0x7A	; 122
     3fa:	f0 e0       	ldi	r31, 0x00	; 0
     3fc:	80 81       	ld	r24, Z
     3fe:	80 64       	ori	r24, 0x40	; 64
     400:	80 83       	st	Z, r24
     402:	80 81       	ld	r24, Z
     404:	86 fd       	sbrc	r24, 6
     406:	fd cf       	rjmp	.-6      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     410:	ea e7       	ldi	r30, 0x7A	; 122
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	80 81       	ld	r24, Z
     416:	80 64       	ori	r24, 0x40	; 64
     418:	80 83       	st	Z, r24
     41a:	80 81       	ld	r24, Z
     41c:	86 fd       	sbrc	r24, 6
     41e:	fd cf       	rjmp	.-6      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     420:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_Z10frontLEDOnv>
     424:	81 e0       	ldi	r24, 0x01	; 1
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     42c:	ea e7       	ldi	r30, 0x7A	; 122
     42e:	f0 e0       	ldi	r31, 0x00	; 0
     430:	80 81       	ld	r24, Z
     432:	80 64       	ori	r24, 0x40	; 64
     434:	80 83       	st	Z, r24
     436:	80 81       	ld	r24, Z
     438:	86 fd       	sbrc	r24, 6
     43a:	fd cf       	rjmp	.-6      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     43c:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_Z11frontLEDOffv>
     440:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     444:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	92 2b       	or	r25, r18
     44c:	08 95       	ret

0000044e <_Z20IRSensorAngleLeftLEDv>:
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     456:	81 e4       	ldi	r24, 0x41	; 65
     458:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     45c:	ea e7       	ldi	r30, 0x7A	; 122
     45e:	f0 e0       	ldi	r31, 0x00	; 0
     460:	80 81       	ld	r24, Z
     462:	80 64       	ori	r24, 0x40	; 64
     464:	80 83       	st	Z, r24
     466:	80 81       	ld	r24, Z
     468:	86 fd       	sbrc	r24, 6
     46a:	fd cf       	rjmp	.-6      	; 0x466 <_Z20IRSensorAngleLeftLEDv+0x18>
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     474:	ea e7       	ldi	r30, 0x7A	; 122
     476:	f0 e0       	ldi	r31, 0x00	; 0
     478:	80 81       	ld	r24, Z
     47a:	80 64       	ori	r24, 0x40	; 64
     47c:	80 83       	st	Z, r24
     47e:	80 81       	ld	r24, Z
     480:	86 fd       	sbrc	r24, 6
     482:	fd cf       	rjmp	.-6      	; 0x47e <_Z20IRSensorAngleLeftLEDv+0x30>
     484:	0e 94 ef 00 	call	0x1de	; 0x1de <_Z13diagonalLEDOnv>
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     490:	ea e7       	ldi	r30, 0x7A	; 122
     492:	f0 e0       	ldi	r31, 0x00	; 0
     494:	80 81       	ld	r24, Z
     496:	80 64       	ori	r24, 0x40	; 64
     498:	80 83       	st	Z, r24
     49a:	80 81       	ld	r24, Z
     49c:	86 fd       	sbrc	r24, 6
     49e:	fd cf       	rjmp	.-6      	; 0x49a <_Z20IRSensorAngleLeftLEDv+0x4c>
     4a0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z14diagonalLEDOffv>
     4a4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     4a8:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	92 2b       	or	r25, r18
     4b0:	08 95       	ret

000004b2 <_Z21IRSensorAngleRightLEDv>:
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     4ba:	87 e4       	ldi	r24, 0x47	; 71
     4bc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     4c0:	ea e7       	ldi	r30, 0x7A	; 122
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	80 81       	ld	r24, Z
     4c6:	80 64       	ori	r24, 0x40	; 64
     4c8:	80 83       	st	Z, r24
     4ca:	80 81       	ld	r24, Z
     4cc:	86 fd       	sbrc	r24, 6
     4ce:	fd cf       	rjmp	.-6      	; 0x4ca <_Z21IRSensorAngleRightLEDv+0x18>
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     4d8:	ea e7       	ldi	r30, 0x7A	; 122
     4da:	f0 e0       	ldi	r31, 0x00	; 0
     4dc:	80 81       	ld	r24, Z
     4de:	80 64       	ori	r24, 0x40	; 64
     4e0:	80 83       	st	Z, r24
     4e2:	80 81       	ld	r24, Z
     4e4:	86 fd       	sbrc	r24, 6
     4e6:	fd cf       	rjmp	.-6      	; 0x4e2 <_Z21IRSensorAngleRightLEDv+0x30>
     4e8:	0e 94 ef 00 	call	0x1de	; 0x1de <_Z13diagonalLEDOnv>
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     4f4:	ea e7       	ldi	r30, 0x7A	; 122
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	80 81       	ld	r24, Z
     4fa:	80 64       	ori	r24, 0x40	; 64
     4fc:	80 83       	st	Z, r24
     4fe:	80 81       	ld	r24, Z
     500:	86 fd       	sbrc	r24, 6
     502:	fd cf       	rjmp	.-6      	; 0x4fe <_Z21IRSensorAngleRightLEDv+0x4c>
     504:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z14diagonalLEDOffv>
     508:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     50c:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	92 2b       	or	r25, r18
     514:	08 95       	ret

00000516 <_Z10checkWallsv>:
     516:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <cellWalls>
     51a:	0e 94 77 01 	call	0x2ee	; 0x2ee <_Z17IRSensorAngleLeftv>
     51e:	80 3b       	cpi	r24, 0xB0	; 176
     520:	91 05       	cpc	r25, r1
     522:	28 f0       	brcs	.+10     	; 0x52e <_Z10checkWallsv+0x18>
     524:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <cellWalls>
     528:	81 60       	ori	r24, 0x01	; 1
     52a:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <cellWalls>
     52e:	0e 94 37 01 	call	0x26e	; 0x26e <_Z18IRSensorFrontRightv>
     532:	4f 97       	sbiw	r24, 0x1f	; 31
     534:	28 f0       	brcs	.+10     	; 0x540 <_Z10checkWallsv+0x2a>
     536:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <cellWalls>
     53a:	82 60       	ori	r24, 0x02	; 2
     53c:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <cellWalls>
     540:	0e 94 b5 01 	call	0x36a	; 0x36a <_Z18IRSensorAngleRightv>
     544:	80 3b       	cpi	r24, 0xB0	; 176
     546:	91 05       	cpc	r25, r1
     548:	28 f0       	brcs	.+10     	; 0x554 <_Z10checkWallsv+0x3e>
     54a:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <cellWalls>
     54e:	84 60       	ori	r24, 0x04	; 4
     550:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <cellWalls>
     554:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <cellWalls>
     558:	08 95       	ret

0000055a <_Z15leftEncoderTurnv>:
     55a:	ef 92       	push	r14
     55c:	ff 92       	push	r15
     55e:	0f 93       	push	r16
     560:	1f 93       	push	r17
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	ca e0       	ldi	r28, 0x0A	; 10
     568:	d0 e0       	ldi	r29, 0x00	; 0
     56a:	0f 2e       	mov	r0, r31
     56c:	f8 e8       	ldi	r31, 0x88	; 136
     56e:	ef 2e       	mov	r14, r31
     570:	f1 2c       	mov	r15, r1
     572:	f0 2d       	mov	r31, r0
     574:	0a e8       	ldi	r16, 0x8A	; 138
     576:	10 e0       	ldi	r17, 0x00	; 0
     578:	f7 01       	movw	r30, r14
     57a:	d1 83       	std	Z+1, r29	; 0x01
     57c:	c0 83       	st	Z, r28
     57e:	17 bc       	out	0x27, r1	; 39
     580:	f8 01       	movw	r30, r16
     582:	11 82       	std	Z+1, r1	; 0x01
     584:	10 82       	st	Z, r1
     586:	c8 bd       	out	0x28, r28	; 40
     588:	84 e1       	ldi	r24, 0x14	; 20
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     590:	2a 96       	adiw	r28, 0x0a	; 10
     592:	c2 33       	cpi	r28, 0x32	; 50
     594:	d1 05       	cpc	r29, r1
     596:	81 f7       	brne	.-32     	; 0x578 <_Z15leftEncoderTurnv+0x1e>
     598:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <rightEncoderAPos+0x1>
     59c:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <rightEncoderAPos>
     5a0:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <rightEncoderAPos>
     5a4:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <rightEncoderAPos+0x1>
     5a8:	89 36       	cpi	r24, 0x69	; 105
     5aa:	91 05       	cpc	r25, r1
     5ac:	78 f5       	brcc	.+94     	; 0x60c <_Z15leftEncoderTurnv+0xb2>
     5ae:	a8 e8       	ldi	r26, 0x88	; 136
     5b0:	b0 e0       	ldi	r27, 0x00	; 0
     5b2:	42 e3       	ldi	r20, 0x32	; 50
     5b4:	50 e0       	ldi	r21, 0x00	; 0
     5b6:	ea e8       	ldi	r30, 0x8A	; 138
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	22 e3       	ldi	r18, 0x32	; 50
     5bc:	11 96       	adiw	r26, 0x01	; 1
     5be:	5c 93       	st	X, r21
     5c0:	4e 93       	st	-X, r20
     5c2:	17 bc       	out	0x27, r1	; 39
     5c4:	11 82       	std	Z+1, r1	; 0x01
     5c6:	10 82       	st	Z, r1
     5c8:	28 bd       	out	0x28, r18	; 40
     5ca:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <rightEncoderAPos>
     5ce:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <rightEncoderAPos+0x1>
     5d2:	89 36       	cpi	r24, 0x69	; 105
     5d4:	91 05       	cpc	r25, r1
     5d6:	90 f3       	brcs	.-28     	; 0x5bc <_Z15leftEncoderTurnv+0x62>
     5d8:	19 c0       	rjmp	.+50     	; 0x60c <_Z15leftEncoderTurnv+0xb2>
     5da:	f7 01       	movw	r30, r14
     5dc:	d1 83       	std	Z+1, r29	; 0x01
     5de:	c0 83       	st	Z, r28
     5e0:	17 bc       	out	0x27, r1	; 39
     5e2:	f8 01       	movw	r30, r16
     5e4:	11 82       	std	Z+1, r1	; 0x01
     5e6:	10 82       	st	Z, r1
     5e8:	c8 bd       	out	0x28, r28	; 40
     5ea:	84 e1       	ldi	r24, 0x14	; 20
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     5f2:	2a 97       	sbiw	r28, 0x0a	; 10
     5f4:	91 f7       	brne	.-28     	; 0x5da <_Z15leftEncoderTurnv+0x80>
     5f6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     5fa:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     5fe:	17 bc       	out	0x27, r1	; 39
     600:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     604:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     608:	18 bc       	out	0x28, r1	; 40
     60a:	08 c0       	rjmp	.+16     	; 0x61c <_Z15leftEncoderTurnv+0xc2>
     60c:	0f 2e       	mov	r0, r31
     60e:	f8 e8       	ldi	r31, 0x88	; 136
     610:	ef 2e       	mov	r14, r31
     612:	f1 2c       	mov	r15, r1
     614:	f0 2d       	mov	r31, r0
     616:	0a e8       	ldi	r16, 0x8A	; 138
     618:	10 e0       	ldi	r17, 0x00	; 0
     61a:	df cf       	rjmp	.-66     	; 0x5da <_Z15leftEncoderTurnv+0x80>
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	1f 91       	pop	r17
     622:	0f 91       	pop	r16
     624:	ff 90       	pop	r15
     626:	ef 90       	pop	r14
     628:	08 95       	ret

0000062a <_Z16rightEncoderTurnv>:
     62a:	ef 92       	push	r14
     62c:	ff 92       	push	r15
     62e:	0f 93       	push	r16
     630:	1f 93       	push	r17
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	ca e0       	ldi	r28, 0x0A	; 10
     638:	d0 e0       	ldi	r29, 0x00	; 0
     63a:	0f 2e       	mov	r0, r31
     63c:	f8 e8       	ldi	r31, 0x88	; 136
     63e:	ef 2e       	mov	r14, r31
     640:	f1 2c       	mov	r15, r1
     642:	f0 2d       	mov	r31, r0
     644:	0a e8       	ldi	r16, 0x8A	; 138
     646:	10 e0       	ldi	r17, 0x00	; 0
     648:	f7 01       	movw	r30, r14
     64a:	11 82       	std	Z+1, r1	; 0x01
     64c:	10 82       	st	Z, r1
     64e:	c7 bd       	out	0x27, r28	; 39
     650:	f8 01       	movw	r30, r16
     652:	d1 83       	std	Z+1, r29	; 0x01
     654:	c0 83       	st	Z, r28
     656:	18 bc       	out	0x28, r1	; 40
     658:	84 e1       	ldi	r24, 0x14	; 20
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     660:	2a 96       	adiw	r28, 0x0a	; 10
     662:	c2 33       	cpi	r28, 0x32	; 50
     664:	d1 05       	cpc	r29, r1
     666:	81 f7       	brne	.-32     	; 0x648 <_Z16rightEncoderTurnv+0x1e>
     668:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <rightEncoderAPos+0x1>
     66c:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <rightEncoderAPos>
     670:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <rightEncoderAPos>
     674:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <rightEncoderAPos+0x1>
     678:	4e 97       	sbiw	r24, 0x1e	; 30
     67a:	70 f5       	brcc	.+92     	; 0x6d8 <_Z16rightEncoderTurnv+0xae>
     67c:	a8 e8       	ldi	r26, 0x88	; 136
     67e:	b0 e0       	ldi	r27, 0x00	; 0
     680:	42 e3       	ldi	r20, 0x32	; 50
     682:	ea e8       	ldi	r30, 0x8A	; 138
     684:	f0 e0       	ldi	r31, 0x00	; 0
     686:	22 e3       	ldi	r18, 0x32	; 50
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	11 96       	adiw	r26, 0x01	; 1
     68c:	1c 92       	st	X, r1
     68e:	1e 92       	st	-X, r1
     690:	47 bd       	out	0x27, r20	; 39
     692:	31 83       	std	Z+1, r19	; 0x01
     694:	20 83       	st	Z, r18
     696:	18 bc       	out	0x28, r1	; 40
     698:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <rightEncoderAPos>
     69c:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <rightEncoderAPos+0x1>
     6a0:	4e 97       	sbiw	r24, 0x1e	; 30
     6a2:	98 f3       	brcs	.-26     	; 0x68a <_Z16rightEncoderTurnv+0x60>
     6a4:	19 c0       	rjmp	.+50     	; 0x6d8 <_Z16rightEncoderTurnv+0xae>
     6a6:	f7 01       	movw	r30, r14
     6a8:	11 82       	std	Z+1, r1	; 0x01
     6aa:	10 82       	st	Z, r1
     6ac:	c7 bd       	out	0x27, r28	; 39
     6ae:	f8 01       	movw	r30, r16
     6b0:	d1 83       	std	Z+1, r29	; 0x01
     6b2:	c0 83       	st	Z, r28
     6b4:	18 bc       	out	0x28, r1	; 40
     6b6:	84 e1       	ldi	r24, 0x14	; 20
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     6be:	2a 97       	sbiw	r28, 0x0a	; 10
     6c0:	91 f7       	brne	.-28     	; 0x6a6 <_Z16rightEncoderTurnv+0x7c>
     6c2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     6c6:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     6ca:	17 bc       	out	0x27, r1	; 39
     6cc:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     6d0:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     6d4:	18 bc       	out	0x28, r1	; 40
     6d6:	08 c0       	rjmp	.+16     	; 0x6e8 <_Z16rightEncoderTurnv+0xbe>
     6d8:	0f 2e       	mov	r0, r31
     6da:	f8 e8       	ldi	r31, 0x88	; 136
     6dc:	ef 2e       	mov	r14, r31
     6de:	f1 2c       	mov	r15, r1
     6e0:	f0 2d       	mov	r31, r0
     6e2:	0a e8       	ldi	r16, 0x8A	; 138
     6e4:	10 e0       	ldi	r17, 0x00	; 0
     6e6:	df cf       	rjmp	.-66     	; 0x6a6 <_Z16rightEncoderTurnv+0x7c>
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	1f 91       	pop	r17
     6ee:	0f 91       	pop	r16
     6f0:	ff 90       	pop	r15
     6f2:	ef 90       	pop	r14
     6f4:	08 95       	ret

000006f6 <_Z15rightEncoder180v>:
     6f6:	ef 92       	push	r14
     6f8:	ff 92       	push	r15
     6fa:	0f 93       	push	r16
     6fc:	1f 93       	push	r17
     6fe:	cf 93       	push	r28
     700:	df 93       	push	r29
     702:	ca e0       	ldi	r28, 0x0A	; 10
     704:	d0 e0       	ldi	r29, 0x00	; 0
     706:	0f 2e       	mov	r0, r31
     708:	f8 e8       	ldi	r31, 0x88	; 136
     70a:	ef 2e       	mov	r14, r31
     70c:	f1 2c       	mov	r15, r1
     70e:	f0 2d       	mov	r31, r0
     710:	0a e8       	ldi	r16, 0x8A	; 138
     712:	10 e0       	ldi	r17, 0x00	; 0
     714:	f7 01       	movw	r30, r14
     716:	11 82       	std	Z+1, r1	; 0x01
     718:	10 82       	st	Z, r1
     71a:	c7 bd       	out	0x27, r28	; 39
     71c:	f8 01       	movw	r30, r16
     71e:	d1 83       	std	Z+1, r29	; 0x01
     720:	c0 83       	st	Z, r28
     722:	18 bc       	out	0x28, r1	; 40
     724:	84 e1       	ldi	r24, 0x14	; 20
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     72c:	2a 96       	adiw	r28, 0x0a	; 10
     72e:	c2 33       	cpi	r28, 0x32	; 50
     730:	d1 05       	cpc	r29, r1
     732:	81 f7       	brne	.-32     	; 0x714 <_Z15rightEncoder180v+0x1e>
     734:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <rightEncoderAPos+0x1>
     738:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <rightEncoderAPos>
     73c:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <rightEncoderAPos>
     740:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <rightEncoderAPos+0x1>
     744:	82 31       	cpi	r24, 0x12	; 18
     746:	92 40       	sbci	r25, 0x02	; 2
     748:	78 f5       	brcc	.+94     	; 0x7a8 <_Z15rightEncoder180v+0xb2>
     74a:	a8 e8       	ldi	r26, 0x88	; 136
     74c:	b0 e0       	ldi	r27, 0x00	; 0
     74e:	42 e3       	ldi	r20, 0x32	; 50
     750:	ea e8       	ldi	r30, 0x8A	; 138
     752:	f0 e0       	ldi	r31, 0x00	; 0
     754:	22 e3       	ldi	r18, 0x32	; 50
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	11 96       	adiw	r26, 0x01	; 1
     75a:	1c 92       	st	X, r1
     75c:	1e 92       	st	-X, r1
     75e:	47 bd       	out	0x27, r20	; 39
     760:	31 83       	std	Z+1, r19	; 0x01
     762:	20 83       	st	Z, r18
     764:	18 bc       	out	0x28, r1	; 40
     766:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <rightEncoderAPos>
     76a:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <rightEncoderAPos+0x1>
     76e:	82 31       	cpi	r24, 0x12	; 18
     770:	92 40       	sbci	r25, 0x02	; 2
     772:	90 f3       	brcs	.-28     	; 0x758 <_Z15rightEncoder180v+0x62>
     774:	19 c0       	rjmp	.+50     	; 0x7a8 <_Z15rightEncoder180v+0xb2>
     776:	f7 01       	movw	r30, r14
     778:	11 82       	std	Z+1, r1	; 0x01
     77a:	10 82       	st	Z, r1
     77c:	c7 bd       	out	0x27, r28	; 39
     77e:	f8 01       	movw	r30, r16
     780:	d1 83       	std	Z+1, r29	; 0x01
     782:	c0 83       	st	Z, r28
     784:	18 bc       	out	0x28, r1	; 40
     786:	84 e1       	ldi	r24, 0x14	; 20
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     78e:	2a 97       	sbiw	r28, 0x0a	; 10
     790:	91 f7       	brne	.-28     	; 0x776 <_Z15rightEncoder180v+0x80>
     792:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     796:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     79a:	17 bc       	out	0x27, r1	; 39
     79c:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     7a0:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     7a4:	18 bc       	out	0x28, r1	; 40
     7a6:	08 c0       	rjmp	.+16     	; 0x7b8 <_Z15rightEncoder180v+0xc2>
     7a8:	0f 2e       	mov	r0, r31
     7aa:	f8 e8       	ldi	r31, 0x88	; 136
     7ac:	ef 2e       	mov	r14, r31
     7ae:	f1 2c       	mov	r15, r1
     7b0:	f0 2d       	mov	r31, r0
     7b2:	0a e8       	ldi	r16, 0x8A	; 138
     7b4:	10 e0       	ldi	r17, 0x00	; 0
     7b6:	df cf       	rjmp	.-66     	; 0x776 <_Z15rightEncoder180v+0x80>
     7b8:	df 91       	pop	r29
     7ba:	cf 91       	pop	r28
     7bc:	1f 91       	pop	r17
     7be:	0f 91       	pop	r16
     7c0:	ff 90       	pop	r15
     7c2:	ef 90       	pop	r14
     7c4:	08 95       	ret

000007c6 <_Z16alignToFrontWallv>:
     7c6:	cf 92       	push	r12
     7c8:	df 92       	push	r13
     7ca:	ef 92       	push	r14
     7cc:	ff 92       	push	r15
     7ce:	0f 93       	push	r16
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	0f 2e       	mov	r0, r31
     7d8:	fe ea       	ldi	r31, 0xAE	; 174
     7da:	cf 2e       	mov	r12, r31
     7dc:	f3 e0       	ldi	r31, 0x03	; 3
     7de:	df 2e       	mov	r13, r31
     7e0:	f0 2d       	mov	r31, r0
     7e2:	0f 2e       	mov	r0, r31
     7e4:	f8 e8       	ldi	r31, 0x88	; 136
     7e6:	ef 2e       	mov	r14, r31
     7e8:	f1 2c       	mov	r15, r1
     7ea:	f0 2d       	mov	r31, r0
     7ec:	02 e3       	ldi	r16, 0x32	; 50
     7ee:	10 e0       	ldi	r17, 0x00	; 0
     7f0:	ca e8       	ldi	r28, 0x8A	; 138
     7f2:	d0 e0       	ldi	r29, 0x00	; 0
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     7fc:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_Z17IRSensorFrontLeftv>
     800:	8e 3a       	cpi	r24, 0xAE	; 174
     802:	23 e0       	ldi	r18, 0x03	; 3
     804:	92 07       	cpc	r25, r18
     806:	08 f4       	brcc	.+2      	; 0x80a <_Z16alignToFrontWallv+0x44>
     808:	51 c0       	rjmp	.+162    	; 0x8ac <_Z16alignToFrontWallv+0xe6>
     80a:	8e 5a       	subi	r24, 0xAE	; 174
     80c:	93 40       	sbci	r25, 0x03	; 3
     80e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <leftIRDiff+0x1>
     812:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <leftIRDiff>
     816:	84 31       	cpi	r24, 0x14	; 20
     818:	91 05       	cpc	r25, r1
     81a:	90 f4       	brcc	.+36     	; 0x840 <_Z16alignToFrontWallv+0x7a>
     81c:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <leftIRDiff+0x1>
     820:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <leftIRDiff>
     824:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <oldLeftIRDiff+0x1>
     828:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <oldLeftIRDiff>
     82c:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <breakWhileLoopCounter>
     830:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <breakWhileLoopCounter+0x1>
     834:	01 96       	adiw	r24, 0x01	; 1
     836:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <breakWhileLoopCounter+0x1>
     83a:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <breakWhileLoopCounter>
     83e:	06 c0       	rjmp	.+12     	; 0x84c <_Z16alignToFrontWallv+0x86>
     840:	c3 97       	sbiw	r24, 0x33	; 51
     842:	20 f0       	brcs	.+8      	; 0x84c <_Z16alignToFrontWallv+0x86>
     844:	10 93 15 01 	sts	0x0115, r17	; 0x800115 <leftIRDiff+0x1>
     848:	00 93 14 01 	sts	0x0114, r16	; 0x800114 <leftIRDiff>
     84c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <leftIRDiff>
     850:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <leftIRDiff+0x1>
     854:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <oldLeftIRDiff>
     858:	30 91 32 01 	lds	r19, 0x0132	; 0x800132 <oldLeftIRDiff+0x1>
     85c:	ac 01       	movw	r20, r24
     85e:	42 1b       	sub	r20, r18
     860:	53 0b       	sbc	r21, r19
     862:	9a 01       	movw	r18, r20
     864:	50 93 2e 01 	sts	0x012E, r21	; 0x80012e <errorLeftIRDiff+0x1>
     868:	40 93 2d 01 	sts	0x012D, r20	; 0x80012d <errorLeftIRDiff>
     86c:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <PFrontwallAlign>
     870:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <PFrontwallAlign+0x1>
     874:	0e 94 53 13 	call	0x26a6	; 0x26a6 <__udivmodhi4>
     878:	fb 01       	movw	r30, r22
     87a:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <DFrontwallAlign>
     87e:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <DFrontwallAlign+0x1>
     882:	c9 01       	movw	r24, r18
     884:	0e 94 53 13 	call	0x26a6	; 0x26a6 <__udivmodhi4>
     888:	6e 0f       	add	r22, r30
     88a:	7f 1f       	adc	r23, r31
     88c:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <leftIRDiff+0x1>
     890:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <leftIRDiff>
     894:	70 93 32 01 	sts	0x0132, r23	; 0x800132 <oldLeftIRDiff+0x1>
     898:	60 93 31 01 	sts	0x0131, r22	; 0x800131 <oldLeftIRDiff>
     89c:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <leftMotorSpeed>
     8a0:	77 27       	eor	r23, r23
     8a2:	f7 01       	movw	r30, r14
     8a4:	71 83       	std	Z+1, r23	; 0x01
     8a6:	60 83       	st	Z, r22
     8a8:	17 bc       	out	0x27, r1	; 39
     8aa:	51 c0       	rjmp	.+162    	; 0x94e <__stack+0x4f>
     8ac:	96 01       	movw	r18, r12
     8ae:	28 1b       	sub	r18, r24
     8b0:	39 0b       	sbc	r19, r25
     8b2:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <leftIRDiff+0x1>
     8b6:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <leftIRDiff>
     8ba:	24 31       	cpi	r18, 0x14	; 20
     8bc:	31 05       	cpc	r19, r1
     8be:	90 f4       	brcc	.+36     	; 0x8e4 <_Z16alignToFrontWallv+0x11e>
     8c0:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <leftIRDiff+0x1>
     8c4:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <leftIRDiff>
     8c8:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <oldLeftIRDiff+0x1>
     8cc:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <oldLeftIRDiff>
     8d0:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <breakWhileLoopCounter>
     8d4:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <breakWhileLoopCounter+0x1>
     8d8:	01 96       	adiw	r24, 0x01	; 1
     8da:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <breakWhileLoopCounter+0x1>
     8de:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <breakWhileLoopCounter>
     8e2:	07 c0       	rjmp	.+14     	; 0x8f2 <_Z16alignToFrontWallv+0x12c>
     8e4:	23 33       	cpi	r18, 0x33	; 51
     8e6:	31 05       	cpc	r19, r1
     8e8:	20 f0       	brcs	.+8      	; 0x8f2 <_Z16alignToFrontWallv+0x12c>
     8ea:	10 93 15 01 	sts	0x0115, r17	; 0x800115 <leftIRDiff+0x1>
     8ee:	00 93 14 01 	sts	0x0114, r16	; 0x800114 <leftIRDiff>
     8f2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <leftIRDiff>
     8f6:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <leftIRDiff+0x1>
     8fa:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <oldLeftIRDiff>
     8fe:	30 91 32 01 	lds	r19, 0x0132	; 0x800132 <oldLeftIRDiff+0x1>
     902:	ac 01       	movw	r20, r24
     904:	42 1b       	sub	r20, r18
     906:	53 0b       	sbc	r21, r19
     908:	9a 01       	movw	r18, r20
     90a:	50 93 2e 01 	sts	0x012E, r21	; 0x80012e <errorLeftIRDiff+0x1>
     90e:	40 93 2d 01 	sts	0x012D, r20	; 0x80012d <errorLeftIRDiff>
     912:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <PFrontwallAlign>
     916:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <PFrontwallAlign+0x1>
     91a:	0e 94 53 13 	call	0x26a6	; 0x26a6 <__udivmodhi4>
     91e:	fb 01       	movw	r30, r22
     920:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <DFrontwallAlign>
     924:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <DFrontwallAlign+0x1>
     928:	c9 01       	movw	r24, r18
     92a:	0e 94 53 13 	call	0x26a6	; 0x26a6 <__udivmodhi4>
     92e:	6e 0f       	add	r22, r30
     930:	7f 1f       	adc	r23, r31
     932:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <leftIRDiff+0x1>
     936:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <leftIRDiff>
     93a:	70 93 32 01 	sts	0x0132, r23	; 0x800132 <oldLeftIRDiff+0x1>
     93e:	60 93 31 01 	sts	0x0131, r22	; 0x800131 <oldLeftIRDiff>
     942:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <leftMotorSpeed>
     946:	f7 01       	movw	r30, r14
     948:	11 82       	std	Z+1, r1	; 0x01
     94a:	10 82       	st	Z, r1
     94c:	67 bd       	out	0x27, r22	; 39
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     956:	0e 94 37 01 	call	0x26e	; 0x26e <_Z18IRSensorFrontRightv>
     95a:	8e 3a       	cpi	r24, 0xAE	; 174
     95c:	f3 e0       	ldi	r31, 0x03	; 3
     95e:	9f 07       	cpc	r25, r31
     960:	08 f4       	brcc	.+2      	; 0x964 <__stack+0x65>
     962:	50 c0       	rjmp	.+160    	; 0xa04 <__stack+0x105>
     964:	8e 5a       	subi	r24, 0xAE	; 174
     966:	93 40       	sbci	r25, 0x03	; 3
     968:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <rightIRDiff+0x1>
     96c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <rightIRDiff>
     970:	84 31       	cpi	r24, 0x14	; 20
     972:	91 05       	cpc	r25, r1
     974:	90 f4       	brcc	.+36     	; 0x99a <__stack+0x9b>
     976:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <rightIRDiff+0x1>
     97a:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <rightIRDiff>
     97e:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <oldRightIRDiff+0x1>
     982:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <oldRightIRDiff>
     986:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <breakWhileLoopCounter>
     98a:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <breakWhileLoopCounter+0x1>
     98e:	01 96       	adiw	r24, 0x01	; 1
     990:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <breakWhileLoopCounter+0x1>
     994:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <breakWhileLoopCounter>
     998:	06 c0       	rjmp	.+12     	; 0x9a6 <__stack+0xa7>
     99a:	c3 97       	sbiw	r24, 0x33	; 51
     99c:	20 f0       	brcs	.+8      	; 0x9a6 <__stack+0xa7>
     99e:	10 93 13 01 	sts	0x0113, r17	; 0x800113 <rightIRDiff+0x1>
     9a2:	00 93 12 01 	sts	0x0112, r16	; 0x800112 <rightIRDiff>
     9a6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rightIRDiff>
     9aa:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <rightIRDiff+0x1>
     9ae:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <oldRightIRDiff>
     9b2:	30 91 30 01 	lds	r19, 0x0130	; 0x800130 <oldRightIRDiff+0x1>
     9b6:	ac 01       	movw	r20, r24
     9b8:	42 1b       	sub	r20, r18
     9ba:	53 0b       	sbc	r21, r19
     9bc:	9a 01       	movw	r18, r20
     9be:	50 93 2c 01 	sts	0x012C, r21	; 0x80012c <errorRightIRDiff+0x1>
     9c2:	40 93 2b 01 	sts	0x012B, r20	; 0x80012b <errorRightIRDiff>
     9c6:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <PFrontwallAlign>
     9ca:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <PFrontwallAlign+0x1>
     9ce:	0e 94 53 13 	call	0x26a6	; 0x26a6 <__udivmodhi4>
     9d2:	fb 01       	movw	r30, r22
     9d4:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <DFrontwallAlign>
     9d8:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <DFrontwallAlign+0x1>
     9dc:	c9 01       	movw	r24, r18
     9de:	0e 94 53 13 	call	0x26a6	; 0x26a6 <__udivmodhi4>
     9e2:	6e 0f       	add	r22, r30
     9e4:	7f 1f       	adc	r23, r31
     9e6:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <rightIRDiff+0x1>
     9ea:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <rightIRDiff>
     9ee:	70 93 30 01 	sts	0x0130, r23	; 0x800130 <oldRightIRDiff+0x1>
     9f2:	60 93 2f 01 	sts	0x012F, r22	; 0x80012f <oldRightIRDiff>
     9f6:	60 93 33 01 	sts	0x0133, r22	; 0x800133 <rightMotorSpeed>
     9fa:	77 27       	eor	r23, r23
     9fc:	79 83       	std	Y+1, r23	; 0x01
     9fe:	68 83       	st	Y, r22
     a00:	18 bc       	out	0x28, r1	; 40
     a02:	4f c0       	rjmp	.+158    	; 0xaa2 <__stack+0x1a3>
     a04:	f6 01       	movw	r30, r12
     a06:	e8 1b       	sub	r30, r24
     a08:	f9 0b       	sbc	r31, r25
     a0a:	f0 93 13 01 	sts	0x0113, r31	; 0x800113 <rightIRDiff+0x1>
     a0e:	e0 93 12 01 	sts	0x0112, r30	; 0x800112 <rightIRDiff>
     a12:	e4 31       	cpi	r30, 0x14	; 20
     a14:	f1 05       	cpc	r31, r1
     a16:	90 f4       	brcc	.+36     	; 0xa3c <__stack+0x13d>
     a18:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <rightIRDiff+0x1>
     a1c:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <rightIRDiff>
     a20:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <oldRightIRDiff+0x1>
     a24:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <oldRightIRDiff>
     a28:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <breakWhileLoopCounter>
     a2c:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <breakWhileLoopCounter+0x1>
     a30:	01 96       	adiw	r24, 0x01	; 1
     a32:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <breakWhileLoopCounter+0x1>
     a36:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <breakWhileLoopCounter>
     a3a:	06 c0       	rjmp	.+12     	; 0xa48 <__stack+0x149>
     a3c:	f3 97       	sbiw	r30, 0x33	; 51
     a3e:	20 f0       	brcs	.+8      	; 0xa48 <__stack+0x149>
     a40:	10 93 13 01 	sts	0x0113, r17	; 0x800113 <rightIRDiff+0x1>
     a44:	00 93 12 01 	sts	0x0112, r16	; 0x800112 <rightIRDiff>
     a48:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rightIRDiff>
     a4c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <rightIRDiff+0x1>
     a50:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <oldRightIRDiff>
     a54:	30 91 30 01 	lds	r19, 0x0130	; 0x800130 <oldRightIRDiff+0x1>
     a58:	ac 01       	movw	r20, r24
     a5a:	42 1b       	sub	r20, r18
     a5c:	53 0b       	sbc	r21, r19
     a5e:	9a 01       	movw	r18, r20
     a60:	50 93 2c 01 	sts	0x012C, r21	; 0x80012c <errorRightIRDiff+0x1>
     a64:	40 93 2b 01 	sts	0x012B, r20	; 0x80012b <errorRightIRDiff>
     a68:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <PFrontwallAlign>
     a6c:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <PFrontwallAlign+0x1>
     a70:	0e 94 53 13 	call	0x26a6	; 0x26a6 <__udivmodhi4>
     a74:	fb 01       	movw	r30, r22
     a76:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <DFrontwallAlign>
     a7a:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <DFrontwallAlign+0x1>
     a7e:	c9 01       	movw	r24, r18
     a80:	0e 94 53 13 	call	0x26a6	; 0x26a6 <__udivmodhi4>
     a84:	6e 0f       	add	r22, r30
     a86:	7f 1f       	adc	r23, r31
     a88:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <rightIRDiff+0x1>
     a8c:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <rightIRDiff>
     a90:	70 93 30 01 	sts	0x0130, r23	; 0x800130 <oldRightIRDiff+0x1>
     a94:	60 93 2f 01 	sts	0x012F, r22	; 0x80012f <oldRightIRDiff>
     a98:	60 93 33 01 	sts	0x0133, r22	; 0x800133 <rightMotorSpeed>
     a9c:	19 82       	std	Y+1, r1	; 0x01
     a9e:	18 82       	st	Y, r1
     aa0:	68 bd       	out	0x28, r22	; 40
     aa2:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <breakWhileLoopCounter>
     aa6:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <breakWhileLoopCounter+0x1>
     aaa:	c3 97       	sbiw	r24, 0x33	; 51
     aac:	08 f4       	brcc	.+2      	; 0xab0 <__stack+0x1b1>
     aae:	a2 ce       	rjmp	.-700    	; 0x7f4 <_Z16alignToFrontWallv+0x2e>
     ab0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     ab4:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     ab8:	17 bc       	out	0x27, r1	; 39
     aba:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     abe:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     ac2:	18 bc       	out	0x28, r1	; 40
     ac4:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <breakWhileLoopCounter+0x1>
     ac8:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <breakWhileLoopCounter>
     acc:	df 91       	pop	r29
     ace:	cf 91       	pop	r28
     ad0:	1f 91       	pop	r17
     ad2:	0f 91       	pop	r16
     ad4:	ff 90       	pop	r15
     ad6:	ef 90       	pop	r14
     ad8:	df 90       	pop	r13
     ada:	cf 90       	pop	r12
     adc:	08 95       	ret

00000ade <_Z10moveWithPDv>:
     ade:	cf 93       	push	r28
     ae0:	df 93       	push	r29
     ae2:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <leftWallSensorValue>
     ae6:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <leftWallSensorValue+0x1>
     aea:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <hasLeftWall>
     aee:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <hasLeftWall+0x1>
     af2:	28 17       	cp	r18, r24
     af4:	39 07       	cpc	r19, r25
     af6:	08 f0       	brcs	.+2      	; 0xafa <_Z10moveWithPDv+0x1c>
     af8:	60 c1       	rjmp	.+704    	; 0xdba <_Z10moveWithPDv+0x2dc>
     afa:	40 91 25 01 	lds	r20, 0x0125	; 0x800125 <rightWallSensorValue>
     afe:	50 91 26 01 	lds	r21, 0x0126	; 0x800126 <rightWallSensorValue+0x1>
     b02:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <hasRightWall>
     b06:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <hasRightWall+0x1>
     b0a:	24 17       	cp	r18, r20
     b0c:	35 07       	cpc	r19, r21
     b0e:	08 f0       	brcs	.+2      	; 0xb12 <_Z10moveWithPDv+0x34>
     b10:	aa c0       	rjmp	.+340    	; 0xc66 <_Z10moveWithPDv+0x188>
     b12:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <leftMiddleValue>
     b16:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <leftMiddleValue+0x1>
     b1a:	28 17       	cp	r18, r24
     b1c:	39 07       	cpc	r19, r25
     b1e:	08 f0       	brcs	.+2      	; 0xb22 <_Z10moveWithPDv+0x44>
     b20:	51 c0       	rjmp	.+162    	; 0xbc4 <_Z10moveWithPDv+0xe6>
     b22:	82 1b       	sub	r24, r18
     b24:	93 0b       	sbc	r25, r19
     b26:	88 0f       	add	r24, r24
     b28:	99 1f       	adc	r25, r25
     b2a:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <errorP+0x1>
     b2e:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <errorP>
     b32:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <errorMax>
     b36:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <errorMax+0x1>
     b3a:	28 17       	cp	r18, r24
     b3c:	39 07       	cpc	r19, r25
     b3e:	20 f4       	brcc	.+8      	; 0xb48 <_Z10moveWithPDv+0x6a>
     b40:	30 93 24 01 	sts	0x0124, r19	; 0x800124 <errorP+0x1>
     b44:	20 93 23 01 	sts	0x0123, r18	; 0x800123 <errorP>
     b48:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <errorP>
     b4c:	30 91 24 01 	lds	r19, 0x0124	; 0x800124 <errorP+0x1>
     b50:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <oldErrorP>
     b54:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <oldErrorP+0x1>
     b58:	f9 01       	movw	r30, r18
     b5a:	e8 1b       	sub	r30, r24
     b5c:	f9 0b       	sbc	r31, r25
     b5e:	f0 93 22 01 	sts	0x0122, r31	; 0x800122 <errorD+0x1>
     b62:	e0 93 21 01 	sts	0x0121, r30	; 0x800121 <errorD>
     b66:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <Paway>
     b6a:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <Paway+0x1>
     b6e:	c9 01       	movw	r24, r18
     b70:	0e 94 53 13 	call	0x26a6	; 0x26a6 <__udivmodhi4>
     b74:	eb 01       	movw	r28, r22
     b76:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <D>
     b7a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <D+0x1>
     b7e:	cf 01       	movw	r24, r30
     b80:	0e 94 53 13 	call	0x26a6	; 0x26a6 <__udivmodhi4>
     b84:	6c 0f       	add	r22, r28
     b86:	7d 1f       	adc	r23, r29
     b88:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <totalError16+0x1>
     b8c:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <totalError16>
     b90:	30 93 20 01 	sts	0x0120, r19	; 0x800120 <oldErrorP+0x1>
     b94:	20 93 1f 01 	sts	0x011F, r18	; 0x80011f <oldErrorP>
     b98:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <totalError8>
     b9c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <leftBaseSpeed>
     ba0:	68 0f       	add	r22, r24
     ba2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     ba6:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     baa:	67 bd       	out	0x27, r22	; 39
     bac:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <rightBaseSpeed>
     bb0:	8c 5f       	subi	r24, 0xFC	; 252
     bb2:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <totalError8>
     bb6:	89 1b       	sub	r24, r25
     bb8:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     bbc:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     bc0:	88 bd       	out	0x28, r24	; 40
     bc2:	db c1       	rjmp	.+950    	; 0xf7a <_Z10moveWithPDv+0x49c>
     bc4:	28 1b       	sub	r18, r24
     bc6:	39 0b       	sbc	r19, r25
     bc8:	22 0f       	add	r18, r18
     bca:	33 1f       	adc	r19, r19
     bcc:	30 93 24 01 	sts	0x0124, r19	; 0x800124 <errorP+0x1>
     bd0:	20 93 23 01 	sts	0x0123, r18	; 0x800123 <errorP>
     bd4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <errorMax>
     bd8:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <errorMax+0x1>
     bdc:	82 17       	cp	r24, r18
     bde:	93 07       	cpc	r25, r19
     be0:	20 f4       	brcc	.+8      	; 0xbea <_Z10moveWithPDv+0x10c>
     be2:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <errorP+0x1>
     be6:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <errorP>
     bea:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <errorP>
     bee:	30 91 24 01 	lds	r19, 0x0124	; 0x800124 <errorP+0x1>
     bf2:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <oldErrorP>
     bf6:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <oldErrorP+0x1>
     bfa:	f9 01       	movw	r30, r18
     bfc:	e8 1b       	sub	r30, r24
     bfe:	f9 0b       	sbc	r31, r25
     c00:	f0 93 22 01 	sts	0x0122, r31	; 0x800122 <errorD+0x1>
     c04:	e0 93 21 01 	sts	0x0121, r30	; 0x800121 <errorD>
     c08:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <Paway>
     c0c:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <Paway+0x1>
     c10:	c9 01       	movw	r24, r18
     c12:	0e 94 53 13 	call	0x26a6	; 0x26a6 <__udivmodhi4>
     c16:	eb 01       	movw	r28, r22
     c18:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <D>
     c1c:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <D+0x1>
     c20:	cf 01       	movw	r24, r30
     c22:	0e 94 53 13 	call	0x26a6	; 0x26a6 <__udivmodhi4>
     c26:	6c 0f       	add	r22, r28
     c28:	7d 1f       	adc	r23, r29
     c2a:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <totalError16+0x1>
     c2e:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <totalError16>
     c32:	30 93 20 01 	sts	0x0120, r19	; 0x800120 <oldErrorP+0x1>
     c36:	20 93 1f 01 	sts	0x011F, r18	; 0x80011f <oldErrorP>
     c3a:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <totalError8>
     c3e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <leftBaseSpeed>
     c42:	86 1b       	sub	r24, r22
     c44:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     c48:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     c4c:	87 bd       	out	0x27, r24	; 39
     c4e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <rightBaseSpeed>
     c52:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <totalError8>
     c56:	89 0f       	add	r24, r25
     c58:	8c 5f       	subi	r24, 0xFC	; 252
     c5a:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     c5e:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     c62:	88 bd       	out	0x28, r24	; 40
     c64:	8a c1       	rjmp	.+788    	; 0xf7a <_Z10moveWithPDv+0x49c>
     c66:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <leftMiddleValue>
     c6a:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <leftMiddleValue+0x1>
     c6e:	28 17       	cp	r18, r24
     c70:	39 07       	cpc	r19, r25
     c72:	08 f0       	brcs	.+2      	; 0xc76 <_Z10moveWithPDv+0x198>
     c74:	51 c0       	rjmp	.+162    	; 0xd18 <_Z10moveWithPDv+0x23a>
     c76:	82 1b       	sub	r24, r18
     c78:	93 0b       	sbc	r25, r19
     c7a:	88 0f       	add	r24, r24
     c7c:	99 1f       	adc	r25, r25
     c7e:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <errorP+0x1>
     c82:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <errorP>
     c86:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <errorMax>
     c8a:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <errorMax+0x1>
     c8e:	28 17       	cp	r18, r24
     c90:	39 07       	cpc	r19, r25
     c92:	20 f4       	brcc	.+8      	; 0xc9c <_Z10moveWithPDv+0x1be>
     c94:	30 93 24 01 	sts	0x0124, r19	; 0x800124 <errorP+0x1>
     c98:	20 93 23 01 	sts	0x0123, r18	; 0x800123 <errorP>
     c9c:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <errorP>
     ca0:	30 91 24 01 	lds	r19, 0x0124	; 0x800124 <errorP+0x1>
     ca4:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <oldErrorP>
     ca8:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <oldErrorP+0x1>
     cac:	f9 01       	movw	r30, r18
     cae:	e8 1b       	sub	r30, r24
     cb0:	f9 0b       	sbc	r31, r25
     cb2:	f0 93 22 01 	sts	0x0122, r31	; 0x800122 <errorD+0x1>
     cb6:	e0 93 21 01 	sts	0x0121, r30	; 0x800121 <errorD>
     cba:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <Paway>
     cbe:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <Paway+0x1>
     cc2:	c9 01       	movw	r24, r18
     cc4:	0e 94 53 13 	call	0x26a6	; 0x26a6 <__udivmodhi4>
     cc8:	eb 01       	movw	r28, r22
     cca:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <D>
     cce:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <D+0x1>
     cd2:	cf 01       	movw	r24, r30
     cd4:	0e 94 53 13 	call	0x26a6	; 0x26a6 <__udivmodhi4>
     cd8:	6c 0f       	add	r22, r28
     cda:	7d 1f       	adc	r23, r29
     cdc:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <totalError16+0x1>
     ce0:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <totalError16>
     ce4:	30 93 20 01 	sts	0x0120, r19	; 0x800120 <oldErrorP+0x1>
     ce8:	20 93 1f 01 	sts	0x011F, r18	; 0x80011f <oldErrorP>
     cec:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <totalError8>
     cf0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <leftBaseSpeed>
     cf4:	68 0f       	add	r22, r24
     cf6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     cfa:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     cfe:	67 bd       	out	0x27, r22	; 39
     d00:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <rightBaseSpeed>
     d04:	8c 5f       	subi	r24, 0xFC	; 252
     d06:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <totalError8>
     d0a:	89 1b       	sub	r24, r25
     d0c:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     d10:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     d14:	88 bd       	out	0x28, r24	; 40
     d16:	31 c1       	rjmp	.+610    	; 0xf7a <_Z10moveWithPDv+0x49c>
     d18:	28 1b       	sub	r18, r24
     d1a:	39 0b       	sbc	r19, r25
     d1c:	22 0f       	add	r18, r18
     d1e:	33 1f       	adc	r19, r19
     d20:	30 93 24 01 	sts	0x0124, r19	; 0x800124 <errorP+0x1>
     d24:	20 93 23 01 	sts	0x0123, r18	; 0x800123 <errorP>
     d28:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <errorMax>
     d2c:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <errorMax+0x1>
     d30:	82 17       	cp	r24, r18
     d32:	93 07       	cpc	r25, r19
     d34:	20 f4       	brcc	.+8      	; 0xd3e <_Z10moveWithPDv+0x260>
     d36:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <errorP+0x1>
     d3a:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <errorP>
     d3e:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <errorP>
     d42:	30 91 24 01 	lds	r19, 0x0124	; 0x800124 <errorP+0x1>
     d46:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <oldErrorP>
     d4a:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <oldErrorP+0x1>
     d4e:	f9 01       	movw	r30, r18
     d50:	e8 1b       	sub	r30, r24
     d52:	f9 0b       	sbc	r31, r25
     d54:	f0 93 22 01 	sts	0x0122, r31	; 0x800122 <errorD+0x1>
     d58:	e0 93 21 01 	sts	0x0121, r30	; 0x800121 <errorD>
     d5c:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <Paway>
     d60:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <Paway+0x1>
     d64:	c9 01       	movw	r24, r18
     d66:	0e 94 53 13 	call	0x26a6	; 0x26a6 <__udivmodhi4>
     d6a:	eb 01       	movw	r28, r22
     d6c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <D>
     d70:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <D+0x1>
     d74:	cf 01       	movw	r24, r30
     d76:	0e 94 53 13 	call	0x26a6	; 0x26a6 <__udivmodhi4>
     d7a:	6c 0f       	add	r22, r28
     d7c:	7d 1f       	adc	r23, r29
     d7e:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <totalError16+0x1>
     d82:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <totalError16>
     d86:	30 93 20 01 	sts	0x0120, r19	; 0x800120 <oldErrorP+0x1>
     d8a:	20 93 1f 01 	sts	0x011F, r18	; 0x80011f <oldErrorP>
     d8e:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <totalError8>
     d92:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <leftBaseSpeed>
     d96:	86 1b       	sub	r24, r22
     d98:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     d9c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     da0:	87 bd       	out	0x27, r24	; 39
     da2:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <rightBaseSpeed>
     da6:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <totalError8>
     daa:	89 0f       	add	r24, r25
     dac:	8c 5f       	subi	r24, 0xFC	; 252
     dae:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     db2:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     db6:	88 bd       	out	0x28, r24	; 40
     db8:	e0 c0       	rjmp	.+448    	; 0xf7a <_Z10moveWithPDv+0x49c>
     dba:	40 91 25 01 	lds	r20, 0x0125	; 0x800125 <rightWallSensorValue>
     dbe:	50 91 26 01 	lds	r21, 0x0126	; 0x800126 <rightWallSensorValue+0x1>
     dc2:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <hasRightWall>
     dc6:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <hasRightWall+0x1>
     dca:	64 17       	cp	r22, r20
     dcc:	75 07       	cpc	r23, r21
     dce:	08 f0       	brcs	.+2      	; 0xdd2 <_Z10moveWithPDv+0x2f4>
     dd0:	aa c0       	rjmp	.+340    	; 0xf26 <_Z10moveWithPDv+0x448>
     dd2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <rightMiddleValue>
     dd6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <rightMiddleValue+0x1>
     dda:	84 17       	cp	r24, r20
     ddc:	95 07       	cpc	r25, r21
     dde:	08 f0       	brcs	.+2      	; 0xde2 <_Z10moveWithPDv+0x304>
     de0:	51 c0       	rjmp	.+162    	; 0xe84 <_Z10moveWithPDv+0x3a6>
     de2:	48 1b       	sub	r20, r24
     de4:	59 0b       	sbc	r21, r25
     de6:	44 0f       	add	r20, r20
     de8:	55 1f       	adc	r21, r21
     dea:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <errorP+0x1>
     dee:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <errorP>
     df2:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <errorMax>
     df6:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <errorMax+0x1>
     dfa:	84 17       	cp	r24, r20
     dfc:	95 07       	cpc	r25, r21
     dfe:	20 f4       	brcc	.+8      	; 0xe08 <_Z10moveWithPDv+0x32a>
     e00:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <errorP+0x1>
     e04:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <errorP>
     e08:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <errorP>
     e0c:	30 91 24 01 	lds	r19, 0x0124	; 0x800124 <errorP+0x1>
     e10:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <oldErrorP>
     e14:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <oldErrorP+0x1>
     e18:	f9 01       	movw	r30, r18
     e1a:	e8 1b       	sub	r30, r24
     e1c:	f9 0b       	sbc	r31, r25
     e1e:	f0 93 22 01 	sts	0x0122, r31	; 0x800122 <errorD+0x1>
     e22:	e0 93 21 01 	sts	0x0121, r30	; 0x800121 <errorD>
     e26:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <Paway>
     e2a:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <Paway+0x1>
     e2e:	c9 01       	movw	r24, r18
     e30:	0e 94 53 13 	call	0x26a6	; 0x26a6 <__udivmodhi4>
     e34:	eb 01       	movw	r28, r22
     e36:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <D>
     e3a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <D+0x1>
     e3e:	cf 01       	movw	r24, r30
     e40:	0e 94 53 13 	call	0x26a6	; 0x26a6 <__udivmodhi4>
     e44:	6c 0f       	add	r22, r28
     e46:	7d 1f       	adc	r23, r29
     e48:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <totalError16+0x1>
     e4c:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <totalError16>
     e50:	30 93 20 01 	sts	0x0120, r19	; 0x800120 <oldErrorP+0x1>
     e54:	20 93 1f 01 	sts	0x011F, r18	; 0x80011f <oldErrorP>
     e58:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <totalError8>
     e5c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <leftBaseSpeed>
     e60:	86 1b       	sub	r24, r22
     e62:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     e66:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     e6a:	87 bd       	out	0x27, r24	; 39
     e6c:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <rightBaseSpeed>
     e70:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <totalError8>
     e74:	89 0f       	add	r24, r25
     e76:	8c 5f       	subi	r24, 0xFC	; 252
     e78:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     e7c:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     e80:	88 bd       	out	0x28, r24	; 40
     e82:	7b c0       	rjmp	.+246    	; 0xf7a <_Z10moveWithPDv+0x49c>
     e84:	84 1b       	sub	r24, r20
     e86:	95 0b       	sbc	r25, r21
     e88:	88 0f       	add	r24, r24
     e8a:	99 1f       	adc	r25, r25
     e8c:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <errorP+0x1>
     e90:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <errorP>
     e94:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <errorMax>
     e98:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <errorMax+0x1>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	20 f4       	brcc	.+8      	; 0xeaa <_Z10moveWithPDv+0x3cc>
     ea2:	30 93 24 01 	sts	0x0124, r19	; 0x800124 <errorP+0x1>
     ea6:	20 93 23 01 	sts	0x0123, r18	; 0x800123 <errorP>
     eaa:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <errorP>
     eae:	30 91 24 01 	lds	r19, 0x0124	; 0x800124 <errorP+0x1>
     eb2:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <oldErrorP>
     eb6:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <oldErrorP+0x1>
     eba:	f9 01       	movw	r30, r18
     ebc:	e8 1b       	sub	r30, r24
     ebe:	f9 0b       	sbc	r31, r25
     ec0:	f0 93 22 01 	sts	0x0122, r31	; 0x800122 <errorD+0x1>
     ec4:	e0 93 21 01 	sts	0x0121, r30	; 0x800121 <errorD>
     ec8:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <Paway>
     ecc:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <Paway+0x1>
     ed0:	c9 01       	movw	r24, r18
     ed2:	0e 94 53 13 	call	0x26a6	; 0x26a6 <__udivmodhi4>
     ed6:	eb 01       	movw	r28, r22
     ed8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <D>
     edc:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <D+0x1>
     ee0:	cf 01       	movw	r24, r30
     ee2:	0e 94 53 13 	call	0x26a6	; 0x26a6 <__udivmodhi4>
     ee6:	6c 0f       	add	r22, r28
     ee8:	7d 1f       	adc	r23, r29
     eea:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <totalError16+0x1>
     eee:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <totalError16>
     ef2:	30 93 20 01 	sts	0x0120, r19	; 0x800120 <oldErrorP+0x1>
     ef6:	20 93 1f 01 	sts	0x011F, r18	; 0x80011f <oldErrorP>
     efa:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <totalError8>
     efe:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <leftBaseSpeed>
     f02:	68 0f       	add	r22, r24
     f04:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     f08:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     f0c:	67 bd       	out	0x27, r22	; 39
     f0e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <rightBaseSpeed>
     f12:	8c 5f       	subi	r24, 0xFC	; 252
     f14:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <totalError8>
     f18:	89 1b       	sub	r24, r25
     f1a:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     f1e:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     f22:	88 bd       	out	0x28, r24	; 40
     f24:	2a c0       	rjmp	.+84     	; 0xf7a <_Z10moveWithPDv+0x49c>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	38 f5       	brcc	.+78     	; 0xf7a <_Z10moveWithPDv+0x49c>
     f2c:	46 17       	cp	r20, r22
     f2e:	57 07       	cpc	r21, r23
     f30:	20 f5       	brcc	.+72     	; 0xf7a <_Z10moveWithPDv+0x49c>
     f32:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <errorP+0x1>
     f36:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <errorP>
     f3a:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <errorD+0x1>
     f3e:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <errorD>
     f42:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <totalError16+0x1>
     f46:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <totalError16>
     f4a:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <oldErrorP+0x1>
     f4e:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <oldErrorP>
     f52:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <totalError8>
     f56:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <leftBaseSpeed>
     f5a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     f5e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     f62:	87 bd       	out	0x27, r24	; 39
     f64:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <rightBaseSpeed>
     f68:	8c 5f       	subi	r24, 0xFC	; 252
     f6a:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <totalError8>
     f6e:	89 1b       	sub	r24, r25
     f70:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     f74:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     f78:	88 bd       	out	0x28, r24	; 40
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	08 95       	ret

00000f80 <_Z12moveOneBlockv>:
     f80:	ef 92       	push	r14
     f82:	ff 92       	push	r15
     f84:	0f 93       	push	r16
     f86:	1f 93       	push	r17
     f88:	cf 93       	push	r28
     f8a:	ca e0       	ldi	r28, 0x0A	; 10
     f8c:	0f 2e       	mov	r0, r31
     f8e:	f8 e8       	ldi	r31, 0x88	; 136
     f90:	ef 2e       	mov	r14, r31
     f92:	f1 2c       	mov	r15, r1
     f94:	f0 2d       	mov	r31, r0
     f96:	0a e8       	ldi	r16, 0x8A	; 138
     f98:	10 e0       	ldi	r17, 0x00	; 0
     f9a:	f7 01       	movw	r30, r14
     f9c:	11 82       	std	Z+1, r1	; 0x01
     f9e:	10 82       	st	Z, r1
     fa0:	c7 bd       	out	0x27, r28	; 39
     fa2:	f8 01       	movw	r30, r16
     fa4:	11 82       	std	Z+1, r1	; 0x01
     fa6:	10 82       	st	Z, r1
     fa8:	c8 bd       	out	0x28, r28	; 40
     faa:	84 e1       	ldi	r24, 0x14	; 20
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     fb2:	c6 5f       	subi	r28, 0xF6	; 246
     fb4:	c2 33       	cpi	r28, 0x32	; 50
     fb6:	89 f7       	brne	.-30     	; 0xf9a <_Z12moveOneBlockv+0x1a>
     fb8:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <rightEncoderAPos+0x1>
     fbc:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <rightEncoderAPos>
     fc0:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <rightEncoderAPos>
     fc4:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <rightEncoderAPos+0x1>
     fc8:	88 35       	cpi	r24, 0x58	; 88
     fca:	92 40       	sbci	r25, 0x02	; 2
     fcc:	b8 f5       	brcc	.+110    	; 0x103c <_Z12moveOneBlockv+0xbc>
     fce:	0e 94 27 02 	call	0x44e	; 0x44e <_Z20IRSensorAngleLeftLEDv>
     fd2:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <leftWallSensorValue+0x1>
     fd6:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <leftWallSensorValue>
     fda:	0e 94 59 02 	call	0x4b2	; 0x4b2 <_Z21IRSensorAngleRightLEDv>
     fde:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <rightWallSensorValue+0x1>
     fe2:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <rightWallSensorValue>
     fe6:	60 91 27 01 	lds	r22, 0x0127	; 0x800127 <leftWallSensorValue>
     fea:	70 91 28 01 	lds	r23, 0x0128	; 0x800128 <leftWallSensorValue+0x1>
     fee:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
     ff2:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
     ff6:	0e 94 6d 13 	call	0x26da	; 0x26da <eeprom_update_word>
     ffa:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
     ffe:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
    1002:	02 96       	adiw	r24, 0x02	; 2
    1004:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
    1008:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
    100c:	60 91 25 01 	lds	r22, 0x0125	; 0x800125 <rightWallSensorValue>
    1010:	70 91 26 01 	lds	r23, 0x0126	; 0x800126 <rightWallSensorValue+0x1>
    1014:	0e 94 6d 13 	call	0x26da	; 0x26da <eeprom_update_word>
    1018:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
    101c:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
    1020:	02 96       	adiw	r24, 0x02	; 2
    1022:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
    1026:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
    102a:	0e 94 6f 05 	call	0xade	; 0xade <_Z10moveWithPDv>
    102e:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <rightEncoderAPos>
    1032:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <rightEncoderAPos+0x1>
    1036:	88 35       	cpi	r24, 0x58	; 88
    1038:	92 40       	sbci	r25, 0x02	; 2
    103a:	48 f2       	brcs	.-110    	; 0xfce <_Z12moveOneBlockv+0x4e>
    103c:	0e 94 8b 02 	call	0x516	; 0x516 <_Z10checkWallsv>
    1040:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <rightEncoderAPos>
    1044:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <rightEncoderAPos+0x1>
    1048:	8c 34       	cpi	r24, 0x4C	; 76
    104a:	94 40       	sbci	r25, 0x04	; 4
    104c:	c0 f5       	brcc	.+112    	; 0x10be <_Z12moveOneBlockv+0x13e>
    104e:	0e 94 27 02 	call	0x44e	; 0x44e <_Z20IRSensorAngleLeftLEDv>
    1052:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <leftWallSensorValue+0x1>
    1056:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <leftWallSensorValue>
    105a:	0e 94 59 02 	call	0x4b2	; 0x4b2 <_Z21IRSensorAngleRightLEDv>
    105e:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <rightWallSensorValue+0x1>
    1062:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <rightWallSensorValue>
    1066:	0e 94 6f 05 	call	0xade	; 0xade <_Z10moveWithPDv>
    106a:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <rightEncoderAPos>
    106e:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <rightEncoderAPos+0x1>
    1072:	8c 34       	cpi	r24, 0x4C	; 76
    1074:	94 40       	sbci	r25, 0x04	; 4
    1076:	58 f3       	brcs	.-42     	; 0x104e <_Z12moveOneBlockv+0xce>
    1078:	22 c0       	rjmp	.+68     	; 0x10be <_Z12moveOneBlockv+0x13e>
    107a:	83 e1       	ldi	r24, 0x13	; 19
    107c:	8c 0f       	add	r24, r28
    107e:	f7 01       	movw	r30, r14
    1080:	11 82       	std	Z+1, r1	; 0x01
    1082:	10 82       	st	Z, r1
    1084:	87 bd       	out	0x27, r24	; 39
    1086:	f8 01       	movw	r30, r16
    1088:	11 82       	std	Z+1, r1	; 0x01
    108a:	10 82       	st	Z, r1
    108c:	c8 bd       	out	0x28, r28	; 40
    108e:	84 e1       	ldi	r24, 0x14	; 20
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
    1096:	ca 50       	subi	r28, 0x0A	; 10
    1098:	81 f7       	brne	.-32     	; 0x107a <_Z12moveOneBlockv+0xfa>
    109a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <_Z21IRSensorFrontRightLEDv>
    109e:	85 36       	cpi	r24, 0x65	; 101
    10a0:	91 05       	cpc	r25, r1
    10a2:	10 f0       	brcs	.+4      	; 0x10a8 <_Z12moveOneBlockv+0x128>
    10a4:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_Z16alignToFrontWallv>
    10a8:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    10ac:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    10b0:	17 bc       	out	0x27, r1	; 39
    10b2:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    10b6:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    10ba:	18 bc       	out	0x28, r1	; 40
    10bc:	09 c0       	rjmp	.+18     	; 0x10d0 <_Z12moveOneBlockv+0x150>
    10be:	c8 e2       	ldi	r28, 0x28	; 40
    10c0:	0f 2e       	mov	r0, r31
    10c2:	f8 e8       	ldi	r31, 0x88	; 136
    10c4:	ef 2e       	mov	r14, r31
    10c6:	f1 2c       	mov	r15, r1
    10c8:	f0 2d       	mov	r31, r0
    10ca:	0a e8       	ldi	r16, 0x8A	; 138
    10cc:	10 e0       	ldi	r17, 0x00	; 0
    10ce:	d5 cf       	rjmp	.-86     	; 0x107a <_Z12moveOneBlockv+0xfa>
    10d0:	cf 91       	pop	r28
    10d2:	1f 91       	pop	r17
    10d4:	0f 91       	pop	r16
    10d6:	ff 90       	pop	r15
    10d8:	ef 90       	pop	r14
    10da:	08 95       	ret

000010dc <_Z18mazeCellInitializev>:
//const int8_t east = 0x20;
//const int8_t west = 0x10;
//int8_t currentDirection = north;//the direction the mouse icon is facing,can be north, south, east, west */

void mazeCellInitialize()
{
    10dc:	cf 93       	push	r28
    10de:	df 93       	push	r29
    10e0:	a7 e3       	ldi	r26, 0x37	; 55
    10e2:	b1 e0       	ldi	r27, 0x01	; 1
    10e4:	ad 01       	movw	r20, r26
    10e6:	2a e0       	ldi	r18, 0x0A	; 10
    10e8:	9a ef       	ldi	r25, 0xFA	; 250
    10ea:	92 0f       	add	r25, r18
    10ec:	fa 01       	movw	r30, r20
    10ee:	82 2f       	mov	r24, r18
	///////////initializes the weight to the center,//used to draw mouse to the center
	for (uint8_t i = 0; i < 6; i++)//columns 6x6, weighted to corner
	{
		for (uint8_t j = 0; j < 6; j++)//rows
		{
			mazeArray[i][j].weightToCenter = (10 - (i + j));
    10f0:	83 83       	std	Z+3, r24	; 0x03
    10f2:	81 50       	subi	r24, 0x01	; 1
    10f4:	34 96       	adiw	r30, 0x04	; 4
{
	///////////initializes maze,
	///////////initializes the weight to the center,//used to draw mouse to the center
	for (uint8_t i = 0; i < 6; i++)//columns 6x6, weighted to corner
	{
		for (uint8_t j = 0; j < 6; j++)//rows
    10f6:	89 13       	cpse	r24, r25
    10f8:	fb cf       	rjmp	.-10     	; 0x10f0 <_Z18mazeCellInitializev+0x14>
    10fa:	21 50       	subi	r18, 0x01	; 1
    10fc:	48 5e       	subi	r20, 0xE8	; 232
    10fe:	5f 4f       	sbci	r21, 0xFF	; 255

void mazeCellInitialize()
{
	///////////initializes maze,
	///////////initializes the weight to the center,//used to draw mouse to the center
	for (uint8_t i = 0; i < 6; i++)//columns 6x6, weighted to corner
    1100:	24 30       	cpi	r18, 0x04	; 4
    1102:	91 f7       	brne	.-28     	; 0x10e8 <_Z18mazeCellInitializev+0xc>
    1104:	cf ea       	ldi	r28, 0xAF	; 175
    1106:	d1 e0       	ldi	r29, 0x01	; 1
    1108:	27 ec       	ldi	r18, 0xC7	; 199
    110a:	31 e0       	ldi	r19, 0x01	; 1
    110c:	e7 e3       	ldi	r30, 0x37	; 55
    110e:	f1 e0       	ldi	r31, 0x01	; 1
		//}
	
	///////////////////////initializes cell parameters for boarder wall
	for (uint8_t i = 0; i < (widthLengthSize ); i++)
	{
		mazeArray[i][ 0].cellParameters |= 0x40;//south
    1110:	8c 91       	ld	r24, X
    1112:	80 64       	ori	r24, 0x40	; 64
    1114:	8c 93       	st	X, r24
		mazeArray[i][ (widthLengthSize - 1)].cellParameters |= 0x80;//north
    1116:	54 96       	adiw	r26, 0x14	; 20
    1118:	8c 91       	ld	r24, X
    111a:	54 97       	sbiw	r26, 0x14	; 20
    111c:	80 68       	ori	r24, 0x80	; 128
    111e:	54 96       	adiw	r26, 0x14	; 20
    1120:	8c 93       	st	X, r24
    1122:	54 97       	sbiw	r26, 0x14	; 20
		mazeArray[(widthLengthSize - 1)][ i].cellParameters |= 0x20;//east
    1124:	88 81       	ld	r24, Y
    1126:	80 62       	ori	r24, 0x20	; 32
    1128:	88 83       	st	Y, r24
		mazeArray[0][i].cellParameters |= 0x10;//west
    112a:	80 81       	ld	r24, Z
    112c:	80 61       	ori	r24, 0x10	; 16
    112e:	80 83       	st	Z, r24
    1130:	58 96       	adiw	r26, 0x18	; 24
    1132:	24 96       	adiw	r28, 0x04	; 4
    1134:	34 96       	adiw	r30, 0x04	; 4
				//mazeArray[i, j].weightToCenter = ((i + j) - 16);
			//}
		//}
	
	///////////////////////initializes cell parameters for boarder wall
	for (uint8_t i = 0; i < (widthLengthSize ); i++)
    1136:	a2 17       	cp	r26, r18
    1138:	b3 07       	cpc	r27, r19
    113a:	51 f7       	brne	.-44     	; 0x1110 <_Z18mazeCellInitializev+0x34>
		mazeArray[(widthLengthSize - 1)][ i].cellParameters |= 0x20;//east
		mazeArray[0][i].cellParameters |= 0x10;//west
	}

	/////////////////initialize first cell
	mazeArray[0][0].cellParameters |= 0x2C;//east wall, visited, and dead-end
    113c:	e7 e3       	ldi	r30, 0x37	; 55
    113e:	f1 e0       	ldi	r31, 0x01	; 1
    1140:	80 81       	ld	r24, Z
    1142:	8c 62       	ori	r24, 0x2C	; 44
    1144:	80 83       	st	Z, r24


}
    1146:	df 91       	pop	r29
    1148:	cf 91       	pop	r28
    114a:	08 95       	ret

0000114c <_Z9markWallsv>:

void markWalls()// usually done by IR sensor dropping to lower resistance
{

	switch (currentDirection)
    114c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <currentDirection>
    1150:	80 32       	cpi	r24, 0x20	; 32
    1152:	09 f4       	brne	.+2      	; 0x1156 <_Z9markWallsv+0xa>
    1154:	b8 c0       	rjmp	.+368    	; 0x12c6 <_Z9markWallsv+0x17a>
    1156:	20 f4       	brcc	.+8      	; 0x1160 <_Z9markWallsv+0x14>
    1158:	80 31       	cpi	r24, 0x10	; 16
    115a:	09 f4       	brne	.+2      	; 0x115e <_Z9markWallsv+0x12>
    115c:	0b c1       	rjmp	.+534    	; 0x1374 <_Z9markWallsv+0x228>
    115e:	08 95       	ret
    1160:	80 34       	cpi	r24, 0x40	; 64
    1162:	09 f4       	brne	.+2      	; 0x1166 <_Z9markWallsv+0x1a>
    1164:	59 c0       	rjmp	.+178    	; 0x1218 <_Z9markWallsv+0xcc>
    1166:	80 38       	cpi	r24, 0x80	; 128
    1168:	09 f0       	breq	.+2      	; 0x116c <_Z9markWallsv+0x20>
    116a:	5a c1       	rjmp	.+692    	; 0x1420 <_Z9markWallsv+0x2d4>
	{


		case north:
			if (cellWalls & 0x04){
    116c:	40 91 c9 01 	lds	r20, 0x01C9	; 0x8001c9 <cellWalls>
    1170:	42 ff       	sbrs	r20, 2
    1172:	19 c0       	rjmp	.+50     	; 0x11a6 <_Z9markWallsv+0x5a>
			//buttonArray[((current_i_xEastWestLeftRight * 2)+1)+1, ((current_j_yNorthSouthUpDown * 2)+1)].BackColor == Color.Red)//right/East wall
			mazeArray[current_i_xEastWestLeftRight][ current_j_yNorthSouthUpDown].cellParameters |= 0x20;}
    1174:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <current_i_xEastWestLeftRight>
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <current_j_yNorthSouthUpDown>
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	b9 01       	movw	r22, r18
    1182:	66 0f       	add	r22, r22
    1184:	77 1f       	adc	r23, r23
    1186:	fb 01       	movw	r30, r22
    1188:	e2 0f       	add	r30, r18
    118a:	f3 1f       	adc	r31, r19
    118c:	ee 0f       	add	r30, r30
    118e:	ff 1f       	adc	r31, r31
    1190:	e8 0f       	add	r30, r24
    1192:	f9 1f       	adc	r31, r25
    1194:	ee 0f       	add	r30, r30
    1196:	ff 1f       	adc	r31, r31
    1198:	ee 0f       	add	r30, r30
    119a:	ff 1f       	adc	r31, r31
    119c:	e9 5c       	subi	r30, 0xC9	; 201
    119e:	fe 4f       	sbci	r31, 0xFE	; 254
    11a0:	80 81       	ld	r24, Z
    11a2:	80 62       	ori	r24, 0x20	; 32
    11a4:	80 83       	st	Z, r24
			if (cellWalls & 0x02){
    11a6:	41 ff       	sbrs	r20, 1
    11a8:	1a c0       	rjmp	.+52     	; 0x11de <_Z9markWallsv+0x92>
			//buttonArray[((current_i_xEastWestLeftRight * 2)+1), ((current_j_yNorthSouthUpDown * 2)+1)-1].BackColor == Color.Red)//front/North wall
			mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown].cellParameters |= 0x80;}
    11aa:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <current_i_xEastWestLeftRight>
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <current_j_yNorthSouthUpDown>
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	b9 01       	movw	r22, r18
    11b8:	66 0f       	add	r22, r22
    11ba:	77 1f       	adc	r23, r23
    11bc:	db 01       	movw	r26, r22
    11be:	a2 0f       	add	r26, r18
    11c0:	b3 1f       	adc	r27, r19
    11c2:	aa 0f       	add	r26, r26
    11c4:	bb 1f       	adc	r27, r27
    11c6:	a8 0f       	add	r26, r24
    11c8:	b9 1f       	adc	r27, r25
    11ca:	aa 0f       	add	r26, r26
    11cc:	bb 1f       	adc	r27, r27
    11ce:	aa 0f       	add	r26, r26
    11d0:	bb 1f       	adc	r27, r27
    11d2:	a9 5c       	subi	r26, 0xC9	; 201
    11d4:	be 4f       	sbci	r27, 0xFE	; 254
    11d6:	fd 01       	movw	r30, r26
    11d8:	80 81       	ld	r24, Z
    11da:	80 68       	ori	r24, 0x80	; 128
    11dc:	8c 93       	st	X, r24
			if (cellWalls & 0x01){
    11de:	40 ff       	sbrs	r20, 0
    11e0:	1f c1       	rjmp	.+574    	; 0x1420 <_Z9markWallsv+0x2d4>
			//buttonArray[((current_i_xEastWestLeftRight * 2)+1)-1, ((current_j_yNorthSouthUpDown * 2)+1)].BackColor == Color.Red)//left/West wall
			mazeArray[current_i_xEastWestLeftRight][ current_j_yNorthSouthUpDown].cellParameters |= 0x10;}
    11e2:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <current_i_xEastWestLeftRight>
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <current_j_yNorthSouthUpDown>
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	f9 01       	movw	r30, r18
    11f0:	ee 0f       	add	r30, r30
    11f2:	ff 1f       	adc	r31, r31
    11f4:	df 01       	movw	r26, r30
    11f6:	a2 0f       	add	r26, r18
    11f8:	b3 1f       	adc	r27, r19
    11fa:	aa 0f       	add	r26, r26
    11fc:	bb 1f       	adc	r27, r27
    11fe:	a8 0f       	add	r26, r24
    1200:	b9 1f       	adc	r27, r25
    1202:	aa 0f       	add	r26, r26
    1204:	bb 1f       	adc	r27, r27
    1206:	aa 0f       	add	r26, r26
    1208:	bb 1f       	adc	r27, r27
    120a:	a9 5c       	subi	r26, 0xC9	; 201
    120c:	be 4f       	sbci	r27, 0xFE	; 254
    120e:	fd 01       	movw	r30, r26
    1210:	80 81       	ld	r24, Z
    1212:	80 61       	ori	r24, 0x10	; 16
    1214:	8c 93       	st	X, r24
    1216:	08 95       	ret
		break;
		case south:
			if (cellWalls & 0x01){
    1218:	40 91 c9 01 	lds	r20, 0x01C9	; 0x8001c9 <cellWalls>
    121c:	40 ff       	sbrs	r20, 0
    121e:	1a c0       	rjmp	.+52     	; 0x1254 <_Z9markWallsv+0x108>
			//buttonArray[((current_i_xEastWestLeftRight * 2)+1)+1, ((current_j_yNorthSouthUpDown * 2)+1)].BackColor == Color.Red)//left/East wall
			mazeArray[current_i_xEastWestLeftRight][ current_j_yNorthSouthUpDown].cellParameters |= 0x20;}
    1220:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <current_i_xEastWestLeftRight>
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <current_j_yNorthSouthUpDown>
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	b9 01       	movw	r22, r18
    122e:	66 0f       	add	r22, r22
    1230:	77 1f       	adc	r23, r23
    1232:	db 01       	movw	r26, r22
    1234:	a2 0f       	add	r26, r18
    1236:	b3 1f       	adc	r27, r19
    1238:	aa 0f       	add	r26, r26
    123a:	bb 1f       	adc	r27, r27
    123c:	a8 0f       	add	r26, r24
    123e:	b9 1f       	adc	r27, r25
    1240:	aa 0f       	add	r26, r26
    1242:	bb 1f       	adc	r27, r27
    1244:	aa 0f       	add	r26, r26
    1246:	bb 1f       	adc	r27, r27
    1248:	a9 5c       	subi	r26, 0xC9	; 201
    124a:	be 4f       	sbci	r27, 0xFE	; 254
    124c:	fd 01       	movw	r30, r26
    124e:	80 81       	ld	r24, Z
    1250:	80 62       	ori	r24, 0x20	; 32
    1252:	8c 93       	st	X, r24
			if (cellWalls & 0x02){
    1254:	41 ff       	sbrs	r20, 1
    1256:	1a c0       	rjmp	.+52     	; 0x128c <_Z9markWallsv+0x140>
			//buttonArray[((current_i_xEastWestLeftRight * 2)+1), ((current_j_yNorthSouthUpDown * 2)+1)+1].BackColor == Color.Red)//front/South wall
			mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown].cellParameters |= 0x40;}
    1258:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <current_i_xEastWestLeftRight>
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <current_j_yNorthSouthUpDown>
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	b9 01       	movw	r22, r18
    1266:	66 0f       	add	r22, r22
    1268:	77 1f       	adc	r23, r23
    126a:	db 01       	movw	r26, r22
    126c:	a2 0f       	add	r26, r18
    126e:	b3 1f       	adc	r27, r19
    1270:	aa 0f       	add	r26, r26
    1272:	bb 1f       	adc	r27, r27
    1274:	a8 0f       	add	r26, r24
    1276:	b9 1f       	adc	r27, r25
    1278:	aa 0f       	add	r26, r26
    127a:	bb 1f       	adc	r27, r27
    127c:	aa 0f       	add	r26, r26
    127e:	bb 1f       	adc	r27, r27
    1280:	a9 5c       	subi	r26, 0xC9	; 201
    1282:	be 4f       	sbci	r27, 0xFE	; 254
    1284:	fd 01       	movw	r30, r26
    1286:	80 81       	ld	r24, Z
    1288:	80 64       	ori	r24, 0x40	; 64
    128a:	8c 93       	st	X, r24
			if (cellWalls & 0x04){
    128c:	42 ff       	sbrs	r20, 2
    128e:	c8 c0       	rjmp	.+400    	; 0x1420 <_Z9markWallsv+0x2d4>
			//buttonArray[((current_i_xEastWestLeftRight * 2)+1)-1, ((current_j_yNorthSouthUpDown * 2)+1)].BackColor == Color.Red)//right/West wall
			mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown].cellParameters |= 0x10;}
    1290:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <current_i_xEastWestLeftRight>
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <current_j_yNorthSouthUpDown>
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	f9 01       	movw	r30, r18
    129e:	ee 0f       	add	r30, r30
    12a0:	ff 1f       	adc	r31, r31
    12a2:	df 01       	movw	r26, r30
    12a4:	a2 0f       	add	r26, r18
    12a6:	b3 1f       	adc	r27, r19
    12a8:	aa 0f       	add	r26, r26
    12aa:	bb 1f       	adc	r27, r27
    12ac:	a8 0f       	add	r26, r24
    12ae:	b9 1f       	adc	r27, r25
    12b0:	aa 0f       	add	r26, r26
    12b2:	bb 1f       	adc	r27, r27
    12b4:	aa 0f       	add	r26, r26
    12b6:	bb 1f       	adc	r27, r27
    12b8:	a9 5c       	subi	r26, 0xC9	; 201
    12ba:	be 4f       	sbci	r27, 0xFE	; 254
    12bc:	fd 01       	movw	r30, r26
    12be:	80 81       	ld	r24, Z
    12c0:	80 61       	ori	r24, 0x10	; 16
    12c2:	8c 93       	st	X, r24
    12c4:	08 95       	ret
		break;
		case east:
			if (cellWalls & 0x01){
    12c6:	40 91 c9 01 	lds	r20, 0x01C9	; 0x8001c9 <cellWalls>
    12ca:	40 ff       	sbrs	r20, 0
    12cc:	1a c0       	rjmp	.+52     	; 0x1302 <_Z9markWallsv+0x1b6>
			//buttonArray[((current_i_xEastWestLeftRight * 2)+1), ((current_j_yNorthSouthUpDown * 2)+1)-1].BackColor == Color.Red)//left/North wall
			mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown].cellParameters |= 0x80;}
    12ce:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <current_i_xEastWestLeftRight>
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <current_j_yNorthSouthUpDown>
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	b9 01       	movw	r22, r18
    12dc:	66 0f       	add	r22, r22
    12de:	77 1f       	adc	r23, r23
    12e0:	db 01       	movw	r26, r22
    12e2:	a2 0f       	add	r26, r18
    12e4:	b3 1f       	adc	r27, r19
    12e6:	aa 0f       	add	r26, r26
    12e8:	bb 1f       	adc	r27, r27
    12ea:	a8 0f       	add	r26, r24
    12ec:	b9 1f       	adc	r27, r25
    12ee:	aa 0f       	add	r26, r26
    12f0:	bb 1f       	adc	r27, r27
    12f2:	aa 0f       	add	r26, r26
    12f4:	bb 1f       	adc	r27, r27
    12f6:	a9 5c       	subi	r26, 0xC9	; 201
    12f8:	be 4f       	sbci	r27, 0xFE	; 254
    12fa:	fd 01       	movw	r30, r26
    12fc:	80 81       	ld	r24, Z
    12fe:	80 68       	ori	r24, 0x80	; 128
    1300:	8c 93       	st	X, r24
			if (cellWalls & 0x02){
    1302:	41 ff       	sbrs	r20, 1
    1304:	1a c0       	rjmp	.+52     	; 0x133a <_Z9markWallsv+0x1ee>
			//buttonArray[((current_i_xEastWestLeftRight * 2)+1)+1, ((current_j_yNorthSouthUpDown * 2)+1)].BackColor == Color.Red)//front/East wall
			mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown].cellParameters |= 0x20;}
    1306:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <current_i_xEastWestLeftRight>
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <current_j_yNorthSouthUpDown>
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	b9 01       	movw	r22, r18
    1314:	66 0f       	add	r22, r22
    1316:	77 1f       	adc	r23, r23
    1318:	db 01       	movw	r26, r22
    131a:	a2 0f       	add	r26, r18
    131c:	b3 1f       	adc	r27, r19
    131e:	aa 0f       	add	r26, r26
    1320:	bb 1f       	adc	r27, r27
    1322:	a8 0f       	add	r26, r24
    1324:	b9 1f       	adc	r27, r25
    1326:	aa 0f       	add	r26, r26
    1328:	bb 1f       	adc	r27, r27
    132a:	aa 0f       	add	r26, r26
    132c:	bb 1f       	adc	r27, r27
    132e:	a9 5c       	subi	r26, 0xC9	; 201
    1330:	be 4f       	sbci	r27, 0xFE	; 254
    1332:	fd 01       	movw	r30, r26
    1334:	80 81       	ld	r24, Z
    1336:	80 62       	ori	r24, 0x20	; 32
    1338:	8c 93       	st	X, r24
			if (cellWalls & 0x04){
    133a:	42 ff       	sbrs	r20, 2
    133c:	71 c0       	rjmp	.+226    	; 0x1420 <_Z9markWallsv+0x2d4>
			//buttonArray[((current_i_xEastWestLeftRight * 2)+1), ((current_j_yNorthSouthUpDown * 2)+1)+1].BackColor == Color.Red)//right/South wall
			mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown].cellParameters |= 0x40;}
    133e:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <current_i_xEastWestLeftRight>
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <current_j_yNorthSouthUpDown>
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	f9 01       	movw	r30, r18
    134c:	ee 0f       	add	r30, r30
    134e:	ff 1f       	adc	r31, r31
    1350:	df 01       	movw	r26, r30
    1352:	a2 0f       	add	r26, r18
    1354:	b3 1f       	adc	r27, r19
    1356:	aa 0f       	add	r26, r26
    1358:	bb 1f       	adc	r27, r27
    135a:	a8 0f       	add	r26, r24
    135c:	b9 1f       	adc	r27, r25
    135e:	aa 0f       	add	r26, r26
    1360:	bb 1f       	adc	r27, r27
    1362:	aa 0f       	add	r26, r26
    1364:	bb 1f       	adc	r27, r27
    1366:	a9 5c       	subi	r26, 0xC9	; 201
    1368:	be 4f       	sbci	r27, 0xFE	; 254
    136a:	fd 01       	movw	r30, r26
    136c:	80 81       	ld	r24, Z
    136e:	80 64       	ori	r24, 0x40	; 64
    1370:	8c 93       	st	X, r24
    1372:	08 95       	ret
		break;
		case west:
			if (cellWalls & 0x04){
    1374:	40 91 c9 01 	lds	r20, 0x01C9	; 0x8001c9 <cellWalls>
    1378:	42 ff       	sbrs	r20, 2
    137a:	1a c0       	rjmp	.+52     	; 0x13b0 <_Z9markWallsv+0x264>
			//buttonArray[((current_i_xEastWestLeftRight * 2)+1), ((current_j_yNorthSouthUpDown * 2)+1)-1].BackColor == Color.Red)//right/North wall
			mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown].cellParameters |= 0x80;}
    137c:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <current_i_xEastWestLeftRight>
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <current_j_yNorthSouthUpDown>
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	b9 01       	movw	r22, r18
    138a:	66 0f       	add	r22, r22
    138c:	77 1f       	adc	r23, r23
    138e:	db 01       	movw	r26, r22
    1390:	a2 0f       	add	r26, r18
    1392:	b3 1f       	adc	r27, r19
    1394:	aa 0f       	add	r26, r26
    1396:	bb 1f       	adc	r27, r27
    1398:	a8 0f       	add	r26, r24
    139a:	b9 1f       	adc	r27, r25
    139c:	aa 0f       	add	r26, r26
    139e:	bb 1f       	adc	r27, r27
    13a0:	aa 0f       	add	r26, r26
    13a2:	bb 1f       	adc	r27, r27
    13a4:	a9 5c       	subi	r26, 0xC9	; 201
    13a6:	be 4f       	sbci	r27, 0xFE	; 254
    13a8:	fd 01       	movw	r30, r26
    13aa:	80 81       	ld	r24, Z
    13ac:	80 68       	ori	r24, 0x80	; 128
    13ae:	8c 93       	st	X, r24
			if (cellWalls & 0x02){
    13b0:	41 ff       	sbrs	r20, 1
    13b2:	1a c0       	rjmp	.+52     	; 0x13e8 <_Z9markWallsv+0x29c>
			//buttonArray[((current_i_xEastWestLeftRight * 2)+1)-1] [((current_j_yNorthSouthUpDown * 2)+1)].BackColor == Color.Red)//front/West wall
			mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown].cellParameters |= 0x10;}
    13b4:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <current_i_xEastWestLeftRight>
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <current_j_yNorthSouthUpDown>
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	b9 01       	movw	r22, r18
    13c2:	66 0f       	add	r22, r22
    13c4:	77 1f       	adc	r23, r23
    13c6:	db 01       	movw	r26, r22
    13c8:	a2 0f       	add	r26, r18
    13ca:	b3 1f       	adc	r27, r19
    13cc:	aa 0f       	add	r26, r26
    13ce:	bb 1f       	adc	r27, r27
    13d0:	a8 0f       	add	r26, r24
    13d2:	b9 1f       	adc	r27, r25
    13d4:	aa 0f       	add	r26, r26
    13d6:	bb 1f       	adc	r27, r27
    13d8:	aa 0f       	add	r26, r26
    13da:	bb 1f       	adc	r27, r27
    13dc:	a9 5c       	subi	r26, 0xC9	; 201
    13de:	be 4f       	sbci	r27, 0xFE	; 254
    13e0:	fd 01       	movw	r30, r26
    13e2:	80 81       	ld	r24, Z
    13e4:	80 61       	ori	r24, 0x10	; 16
    13e6:	8c 93       	st	X, r24
			if (cellWalls & 0x01){
    13e8:	40 ff       	sbrs	r20, 0
    13ea:	1a c0       	rjmp	.+52     	; 0x1420 <_Z9markWallsv+0x2d4>
			//buttonArray[((current_i_xEastWestLeftRight * 2)+1)] [((current_j_yNorthSouthUpDown * 2)+1)+1].BackColor == Color.Red)//left/South wall
			mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown].cellParameters |= 0x40;}
    13ec:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <current_i_xEastWestLeftRight>
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <current_j_yNorthSouthUpDown>
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	f9 01       	movw	r30, r18
    13fa:	ee 0f       	add	r30, r30
    13fc:	ff 1f       	adc	r31, r31
    13fe:	df 01       	movw	r26, r30
    1400:	a2 0f       	add	r26, r18
    1402:	b3 1f       	adc	r27, r19
    1404:	aa 0f       	add	r26, r26
    1406:	bb 1f       	adc	r27, r27
    1408:	a8 0f       	add	r26, r24
    140a:	b9 1f       	adc	r27, r25
    140c:	aa 0f       	add	r26, r26
    140e:	bb 1f       	adc	r27, r27
    1410:	aa 0f       	add	r26, r26
    1412:	bb 1f       	adc	r27, r27
    1414:	a9 5c       	subi	r26, 0xC9	; 201
    1416:	be 4f       	sbci	r27, 0xFE	; 254
    1418:	fd 01       	movw	r30, r26
    141a:	80 81       	ld	r24, Z
    141c:	80 64       	ori	r24, 0x40	; 64
    141e:	8c 93       	st	X, r24
    1420:	08 95       	ret

00001422 <_Z15chooseDirectionv>:


void chooseDirection()
{

	switch (currentDirection)
    1422:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <currentDirection>
    1426:	80 32       	cpi	r24, 0x20	; 32
    1428:	09 f4       	brne	.+2      	; 0x142c <_Z15chooseDirectionv+0xa>
    142a:	22 c4       	rjmp	.+2116   	; 0x1c70 <_Z15chooseDirectionv+0x84e>
    142c:	20 f4       	brcc	.+8      	; 0x1436 <_Z15chooseDirectionv+0x14>
    142e:	80 31       	cpi	r24, 0x10	; 16
    1430:	09 f4       	brne	.+2      	; 0x1434 <_Z15chooseDirectionv+0x12>
    1432:	28 c6       	rjmp	.+3152   	; 0x2084 <_Z15chooseDirectionv+0xc62>
    1434:	08 95       	ret
    1436:	80 34       	cpi	r24, 0x40	; 64
    1438:	09 f4       	brne	.+2      	; 0x143c <_Z15chooseDirectionv+0x1a>
    143a:	11 c2       	rjmp	.+1058   	; 0x185e <_Z15chooseDirectionv+0x43c>
    143c:	80 38       	cpi	r24, 0x80	; 128
    143e:	11 f0       	breq	.+4      	; 0x1444 <_Z15chooseDirectionv+0x22>
    1440:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <_Z15chooseDirectionv+0x1074>
            * , then for 2 walls
            * , then for 1 wall
            * , then no walls
            */

            if (((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0xb0) == 0xb0))//North(top) ,east(right), and west(left) walls detected
    1444:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <current_i_xEastWestLeftRight>
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	20 91 35 01 	lds	r18, 0x0135	; 0x800135 <current_j_yNorthSouthUpDown>
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	fc 01       	movw	r30, r24
    1452:	ee 0f       	add	r30, r30
    1454:	ff 1f       	adc	r31, r31
    1456:	e8 0f       	add	r30, r24
    1458:	f9 1f       	adc	r31, r25
    145a:	ee 0f       	add	r30, r30
    145c:	ff 1f       	adc	r31, r31
    145e:	e2 0f       	add	r30, r18
    1460:	f3 1f       	adc	r31, r19
    1462:	ee 0f       	add	r30, r30
    1464:	ff 1f       	adc	r31, r31
    1466:	ee 0f       	add	r30, r30
    1468:	ff 1f       	adc	r31, r31
    146a:	e9 5c       	subi	r30, 0xC9	; 201
    146c:	fe 4f       	sbci	r31, 0xFE	; 254
    146e:	40 81       	ld	r20, Z
    1470:	54 2f       	mov	r21, r20
    1472:	50 7b       	andi	r21, 0xB0	; 176
    1474:	50 3b       	cpi	r21, 0xB0	; 176
    1476:	a9 f4       	brne	.+42     	; 0x14a2 <_Z15chooseDirectionv+0x80>
            {
                turnDirection = south; //North(top) ,east(right), and west(left) walls detected... dead-end, turn around (possibility #1)   
    1478:	50 e4       	ldi	r21, 0x40	; 64
    147a:	50 93 16 01 	sts	0x0116, r21	; 0x800116 <turnDirection>
                mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters |= 0x04;
    147e:	fc 01       	movw	r30, r24
    1480:	ee 0f       	add	r30, r30
    1482:	ff 1f       	adc	r31, r31
    1484:	e8 0f       	add	r30, r24
    1486:	f9 1f       	adc	r31, r25
    1488:	ee 0f       	add	r30, r30
    148a:	ff 1f       	adc	r31, r31
    148c:	e2 0f       	add	r30, r18
    148e:	f3 1f       	adc	r31, r19
    1490:	ee 0f       	add	r30, r30
    1492:	ff 1f       	adc	r31, r31
    1494:	ee 0f       	add	r30, r30
    1496:	ff 1f       	adc	r31, r31
    1498:	e9 5c       	subi	r30, 0xC9	; 201
    149a:	fe 4f       	sbci	r31, 0xFE	; 254
    149c:	44 60       	ori	r20, 0x04	; 4
    149e:	40 83       	st	Z, r20
                break;
    14a0:	08 95       	ret
            }
            else if (((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x90) == 0x90) //there are North(top) and west(left) walls 
    14a2:	54 2f       	mov	r21, r20
    14a4:	50 79       	andi	r21, 0x90	; 144
    14a6:	50 39       	cpi	r21, 0x90	; 144
    14a8:	c9 f4       	brne	.+50     	; 0x14dc <_Z15chooseDirectionv+0xba>
                && ((mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].cellParameters & 0x08) != 0x08)) //and next cell "not visited"
    14aa:	bc 01       	movw	r22, r24
    14ac:	6f 5f       	subi	r22, 0xFF	; 255
    14ae:	7f 4f       	sbci	r23, 0xFF	; 255
    14b0:	fb 01       	movw	r30, r22
    14b2:	ee 0f       	add	r30, r30
    14b4:	ff 1f       	adc	r31, r31
    14b6:	e6 0f       	add	r30, r22
    14b8:	f7 1f       	adc	r31, r23
    14ba:	ee 0f       	add	r30, r30
    14bc:	ff 1f       	adc	r31, r31
    14be:	e2 0f       	add	r30, r18
    14c0:	f3 1f       	adc	r31, r19
    14c2:	ee 0f       	add	r30, r30
    14c4:	ff 1f       	adc	r31, r31
    14c6:	ee 0f       	add	r30, r30
    14c8:	ff 1f       	adc	r31, r31
    14ca:	e9 5c       	subi	r30, 0xC9	; 201
    14cc:	fe 4f       	sbci	r31, 0xFE	; 254
    14ce:	50 81       	ld	r21, Z
    14d0:	53 fd       	sbrc	r21, 3
    14d2:	04 c0       	rjmp	.+8      	; 0x14dc <_Z15chooseDirectionv+0xba>
            {
                turnDirection = east; //North(top) and west(left) walls detected... go right turn (possibility #2)   
    14d4:	80 e2       	ldi	r24, 0x20	; 32
    14d6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                break;
    14da:	08 95       	ret
            }
            else if (((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0xa0) == 0xa0) //there are North(top) and East(right) walls 
    14dc:	54 2f       	mov	r21, r20
    14de:	50 7a       	andi	r21, 0xA0	; 160
    14e0:	50 3a       	cpi	r21, 0xA0	; 160
    14e2:	c9 f4       	brne	.+50     	; 0x1516 <_Z15chooseDirectionv+0xf4>
                && ((mazeArray[current_i_xEastWestLeftRight - 1] [current_j_yNorthSouthUpDown].cellParameters & 0x08) != 0x08)) //and next cell "not visited"
    14e4:	bc 01       	movw	r22, r24
    14e6:	61 50       	subi	r22, 0x01	; 1
    14e8:	71 09       	sbc	r23, r1
    14ea:	fb 01       	movw	r30, r22
    14ec:	ee 0f       	add	r30, r30
    14ee:	ff 1f       	adc	r31, r31
    14f0:	e6 0f       	add	r30, r22
    14f2:	f7 1f       	adc	r31, r23
    14f4:	ee 0f       	add	r30, r30
    14f6:	ff 1f       	adc	r31, r31
    14f8:	e2 0f       	add	r30, r18
    14fa:	f3 1f       	adc	r31, r19
    14fc:	ee 0f       	add	r30, r30
    14fe:	ff 1f       	adc	r31, r31
    1500:	ee 0f       	add	r30, r30
    1502:	ff 1f       	adc	r31, r31
    1504:	e9 5c       	subi	r30, 0xC9	; 201
    1506:	fe 4f       	sbci	r31, 0xFE	; 254
    1508:	50 81       	ld	r21, Z
    150a:	53 fd       	sbrc	r21, 3
    150c:	04 c0       	rjmp	.+8      	; 0x1516 <_Z15chooseDirectionv+0xf4>
            {
                turnDirection = west; //North(top) and East(right) walls detected... go left turn (possibility #3)  
    150e:	80 e1       	ldi	r24, 0x10	; 16
    1510:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                break;
    1514:	08 95       	ret
    1516:	54 2f       	mov	r21, r20
    1518:	50 73       	andi	r21, 0x30	; 48
            }
            else if (((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x30) == 0x30) //there are East(right) and west(left) walls 
    151a:	50 33       	cpi	r21, 0x30	; 48
    151c:	c9 f4       	brne	.+50     	; 0x1550 <_Z15chooseDirectionv+0x12e>
                && ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown + 1].cellParameters & 0x08) != 0x08)) //and next cell "not visited"
    151e:	fc 01       	movw	r30, r24
    1520:	ee 0f       	add	r30, r30
    1522:	ff 1f       	adc	r31, r31
    1524:	e8 0f       	add	r30, r24
    1526:	f9 1f       	adc	r31, r25
    1528:	ee 0f       	add	r30, r30
    152a:	ff 1f       	adc	r31, r31
    152c:	b9 01       	movw	r22, r18
    152e:	6f 5f       	subi	r22, 0xFF	; 255
    1530:	7f 4f       	sbci	r23, 0xFF	; 255
    1532:	e6 0f       	add	r30, r22
    1534:	f7 1f       	adc	r31, r23
    1536:	ee 0f       	add	r30, r30
    1538:	ff 1f       	adc	r31, r31
    153a:	ee 0f       	add	r30, r30
    153c:	ff 1f       	adc	r31, r31
    153e:	e9 5c       	subi	r30, 0xC9	; 201
    1540:	fe 4f       	sbci	r31, 0xFE	; 254
    1542:	60 81       	ld	r22, Z
    1544:	63 fd       	sbrc	r22, 3
    1546:	04 c0       	rjmp	.+8      	; 0x1550 <_Z15chooseDirectionv+0x12e>
            {
                turnDirection = north; //East(right) and west(left) walls detected... go straight (possibility #4)  
    1548:	80 e8       	ldi	r24, 0x80	; 128
    154a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                break;
    154e:	08 95       	ret
            }
            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x80) == 0x80) //there is a North(top) wall 
    1550:	44 23       	and	r20, r20
    1552:	0c f0       	brlt	.+2      	; 0x1556 <_Z15chooseDirectionv+0x134>
    1554:	53 c0       	rjmp	.+166    	; 0x15fc <_Z15chooseDirectionv+0x1da>
            {
                if ((mazeArray[current_i_xEastWestLeftRight - 1] [current_j_yNorthSouthUpDown].weightToCenter
    1556:	ac 01       	movw	r20, r24
    1558:	41 50       	subi	r20, 0x01	; 1
    155a:	51 09       	sbc	r21, r1
                > mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].weightToCenter)//east(right) is closer to the center
    155c:	01 96       	adiw	r24, 0x01	; 1
                turnDirection = north; //East(right) and west(left) walls detected... go straight (possibility #4)  
                break;
            }
            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x80) == 0x80) //there is a North(top) wall 
            {
                if ((mazeArray[current_i_xEastWestLeftRight - 1] [current_j_yNorthSouthUpDown].weightToCenter
    155e:	da 01       	movw	r26, r20
    1560:	aa 0f       	add	r26, r26
    1562:	bb 1f       	adc	r27, r27
    1564:	a4 0f       	add	r26, r20
    1566:	b5 1f       	adc	r27, r21
    1568:	aa 0f       	add	r26, r26
    156a:	bb 1f       	adc	r27, r27
    156c:	a2 0f       	add	r26, r18
    156e:	b3 1f       	adc	r27, r19
    1570:	aa 0f       	add	r26, r26
    1572:	bb 1f       	adc	r27, r27
    1574:	aa 0f       	add	r26, r26
    1576:	bb 1f       	adc	r27, r27
    1578:	a9 5c       	subi	r26, 0xC9	; 201
    157a:	be 4f       	sbci	r27, 0xFE	; 254
                > mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].weightToCenter)//east(right) is closer to the center
    157c:	fc 01       	movw	r30, r24
    157e:	ee 0f       	add	r30, r30
    1580:	ff 1f       	adc	r31, r31
    1582:	e8 0f       	add	r30, r24
    1584:	f9 1f       	adc	r31, r25
    1586:	ee 0f       	add	r30, r30
    1588:	ff 1f       	adc	r31, r31
    158a:	e2 0f       	add	r30, r18
    158c:	f3 1f       	adc	r31, r19
    158e:	ee 0f       	add	r30, r30
    1590:	ff 1f       	adc	r31, r31
    1592:	ee 0f       	add	r30, r30
    1594:	ff 1f       	adc	r31, r31
    1596:	e9 5c       	subi	r30, 0xC9	; 201
    1598:	fe 4f       	sbci	r31, 0xFE	; 254
                turnDirection = north; //East(right) and west(left) walls detected... go straight (possibility #4)  
                break;
            }
            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x80) == 0x80) //there is a North(top) wall 
            {
                if ((mazeArray[current_i_xEastWestLeftRight - 1] [current_j_yNorthSouthUpDown].weightToCenter
    159a:	13 96       	adiw	r26, 0x03	; 3
    159c:	7c 91       	ld	r23, X
    159e:	63 81       	ldd	r22, Z+3	; 0x03
    15a0:	67 17       	cp	r22, r23
    15a2:	b0 f4       	brcc	.+44     	; 0x15d0 <_Z15chooseDirectionv+0x1ae>
                > mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].weightToCenter)//east(right) is closer to the center
                && ((mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].cellParameters & 0x08) != 0x08))//and next cell "not visited"
    15a4:	fc 01       	movw	r30, r24
    15a6:	ee 0f       	add	r30, r30
    15a8:	ff 1f       	adc	r31, r31
    15aa:	e8 0f       	add	r30, r24
    15ac:	f9 1f       	adc	r31, r25
    15ae:	ee 0f       	add	r30, r30
    15b0:	ff 1f       	adc	r31, r31
    15b2:	e2 0f       	add	r30, r18
    15b4:	f3 1f       	adc	r31, r19
    15b6:	ee 0f       	add	r30, r30
    15b8:	ff 1f       	adc	r31, r31
    15ba:	ee 0f       	add	r30, r30
    15bc:	ff 1f       	adc	r31, r31
    15be:	e9 5c       	subi	r30, 0xC9	; 201
    15c0:	fe 4f       	sbci	r31, 0xFE	; 254
    15c2:	80 81       	ld	r24, Z
    15c4:	83 fd       	sbrc	r24, 3
    15c6:	04 c0       	rjmp	.+8      	; 0x15d0 <_Z15chooseDirectionv+0x1ae>
                {
                    turnDirection = east; //North(top) walls detected... go right(east)(possibility #5)  
    15c8:	80 e2       	ldi	r24, 0x20	; 32
    15ca:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                    break;
    15ce:	08 95       	ret
                }
                if (((mazeArray[current_i_xEastWestLeftRight - 1] [current_j_yNorthSouthUpDown].cellParameters & 0x08) != 0x08))//west(right) is closer to the center and next cell "not visited"
    15d0:	fa 01       	movw	r30, r20
    15d2:	ee 0f       	add	r30, r30
    15d4:	ff 1f       	adc	r31, r31
    15d6:	e4 0f       	add	r30, r20
    15d8:	f5 1f       	adc	r31, r21
    15da:	ee 0f       	add	r30, r30
    15dc:	ff 1f       	adc	r31, r31
    15de:	e2 0f       	add	r30, r18
    15e0:	f3 1f       	adc	r31, r19
    15e2:	ee 0f       	add	r30, r30
    15e4:	ff 1f       	adc	r31, r31
    15e6:	ee 0f       	add	r30, r30
    15e8:	ff 1f       	adc	r31, r31
    15ea:	e9 5c       	subi	r30, 0xC9	; 201
    15ec:	fe 4f       	sbci	r31, 0xFE	; 254
    15ee:	80 81       	ld	r24, Z
    15f0:	83 fd       	sbrc	r24, 3
    15f2:	51 c7       	rjmp	.+3746   	; 0x2496 <_Z15chooseDirectionv+0x1074>
                {
                    turnDirection = west; //North(top) walls detected... go left(west)(possibility #5)  
    15f4:	80 e1       	ldi	r24, 0x10	; 16
    15f6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                    break;
    15fa:	08 95       	ret
                }
            }

            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x20) == 0x20) //there is a East(right) wall 
    15fc:	45 ff       	sbrs	r20, 5
    15fe:	55 c0       	rjmp	.+170    	; 0x16aa <_Z15chooseDirectionv+0x288>
            {
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown + 1].weightToCenter
    1600:	b9 01       	movw	r22, r18
    1602:	6f 5f       	subi	r22, 0xFF	; 255
    1604:	7f 4f       	sbci	r23, 0xFF	; 255
                > mazeArray[current_i_xEastWestLeftRight - 1] [current_j_yNorthSouthUpDown].weightToCenter)//west(left) is closer to the center
    1606:	ac 01       	movw	r20, r24
    1608:	41 50       	subi	r20, 0x01	; 1
    160a:	51 09       	sbc	r21, r1
                }
            }

            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x20) == 0x20) //there is a East(right) wall 
            {
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown + 1].weightToCenter
    160c:	dc 01       	movw	r26, r24
    160e:	aa 0f       	add	r26, r26
    1610:	bb 1f       	adc	r27, r27
    1612:	a8 0f       	add	r26, r24
    1614:	b9 1f       	adc	r27, r25
    1616:	aa 0f       	add	r26, r26
    1618:	bb 1f       	adc	r27, r27
    161a:	a6 0f       	add	r26, r22
    161c:	b7 1f       	adc	r27, r23
    161e:	aa 0f       	add	r26, r26
    1620:	bb 1f       	adc	r27, r27
    1622:	aa 0f       	add	r26, r26
    1624:	bb 1f       	adc	r27, r27
    1626:	a9 5c       	subi	r26, 0xC9	; 201
    1628:	be 4f       	sbci	r27, 0xFE	; 254
                > mazeArray[current_i_xEastWestLeftRight - 1] [current_j_yNorthSouthUpDown].weightToCenter)//west(left) is closer to the center
    162a:	fa 01       	movw	r30, r20
    162c:	ee 0f       	add	r30, r30
    162e:	ff 1f       	adc	r31, r31
    1630:	e4 0f       	add	r30, r20
    1632:	f5 1f       	adc	r31, r21
    1634:	ee 0f       	add	r30, r30
    1636:	ff 1f       	adc	r31, r31
    1638:	e2 0f       	add	r30, r18
    163a:	f3 1f       	adc	r31, r19
    163c:	ee 0f       	add	r30, r30
    163e:	ff 1f       	adc	r31, r31
    1640:	ee 0f       	add	r30, r30
    1642:	ff 1f       	adc	r31, r31
    1644:	e9 5c       	subi	r30, 0xC9	; 201
    1646:	fe 4f       	sbci	r31, 0xFE	; 254
                }
            }

            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x20) == 0x20) //there is a East(right) wall 
            {
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown + 1].weightToCenter
    1648:	13 96       	adiw	r26, 0x03	; 3
    164a:	ac 91       	ld	r26, X
    164c:	e3 81       	ldd	r30, Z+3	; 0x03
    164e:	ea 17       	cp	r30, r26
    1650:	b0 f4       	brcc	.+44     	; 0x167e <_Z15chooseDirectionv+0x25c>
                > mazeArray[current_i_xEastWestLeftRight - 1] [current_j_yNorthSouthUpDown].weightToCenter)//west(left) is closer to the center
                && ((mazeArray[current_i_xEastWestLeftRight - 1] [current_j_yNorthSouthUpDown].cellParameters & 0x08) != 0x08))//and next cell "not visited"
    1652:	fa 01       	movw	r30, r20
    1654:	ee 0f       	add	r30, r30
    1656:	ff 1f       	adc	r31, r31
    1658:	e4 0f       	add	r30, r20
    165a:	f5 1f       	adc	r31, r21
    165c:	ee 0f       	add	r30, r30
    165e:	ff 1f       	adc	r31, r31
    1660:	e2 0f       	add	r30, r18
    1662:	f3 1f       	adc	r31, r19
    1664:	ee 0f       	add	r30, r30
    1666:	ff 1f       	adc	r31, r31
    1668:	ee 0f       	add	r30, r30
    166a:	ff 1f       	adc	r31, r31
    166c:	e9 5c       	subi	r30, 0xC9	; 201
    166e:	fe 4f       	sbci	r31, 0xFE	; 254
    1670:	20 81       	ld	r18, Z
    1672:	23 fd       	sbrc	r18, 3
    1674:	04 c0       	rjmp	.+8      	; 0x167e <_Z15chooseDirectionv+0x25c>
                {
								//uint8_tToBluetooth(mazeArray[current_i_xEastWestLeftRight][ current_j_yNorthSouthUpDown].cellParameters);
								//timerInMilliseconds(5);// can't do more than 5 seconds
//
								//greenRXLEDOn();
                    turnDirection = east; //East(right) walls detected... go left(west)(possibility #6)  
    1676:	80 e2       	ldi	r24, 0x20	; 32
    1678:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                    break;
    167c:	08 95       	ret
                }
                if (((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown + 1].cellParameters & 0x08) != 0x08))//west(right) is closer to the center and next cell "not visited"
    167e:	fc 01       	movw	r30, r24
    1680:	ee 0f       	add	r30, r30
    1682:	ff 1f       	adc	r31, r31
    1684:	e8 0f       	add	r30, r24
    1686:	f9 1f       	adc	r31, r25
    1688:	ee 0f       	add	r30, r30
    168a:	ff 1f       	adc	r31, r31
    168c:	e6 0f       	add	r30, r22
    168e:	f7 1f       	adc	r31, r23
    1690:	ee 0f       	add	r30, r30
    1692:	ff 1f       	adc	r31, r31
    1694:	ee 0f       	add	r30, r30
    1696:	ff 1f       	adc	r31, r31
    1698:	e9 5c       	subi	r30, 0xC9	; 201
    169a:	fe 4f       	sbci	r31, 0xFE	; 254
    169c:	80 81       	ld	r24, Z
    169e:	83 fd       	sbrc	r24, 3
    16a0:	fa c6       	rjmp	.+3572   	; 0x2496 <_Z15chooseDirectionv+0x1074>
                {
                    turnDirection = north; //East(right) walls detected... go up(north)(possibility #6)  
    16a2:	80 e8       	ldi	r24, 0x80	; 128
    16a4:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                    break;
    16a8:	08 95       	ret
                }
            }

            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x10) == 0x10) //there is a West(left) wall 
    16aa:	44 ff       	sbrs	r20, 4
    16ac:	55 c0       	rjmp	.+170    	; 0x1758 <_Z15chooseDirectionv+0x336>
            {
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown + 1].weightToCenter
    16ae:	b9 01       	movw	r22, r18
    16b0:	6f 5f       	subi	r22, 0xFF	; 255
    16b2:	7f 4f       	sbci	r23, 0xFF	; 255
                > mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].weightToCenter)//East(right) is closer to the center
    16b4:	ac 01       	movw	r20, r24
    16b6:	4f 5f       	subi	r20, 0xFF	; 255
    16b8:	5f 4f       	sbci	r21, 0xFF	; 255
                }
            }

            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x10) == 0x10) //there is a West(left) wall 
            {
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown + 1].weightToCenter
    16ba:	dc 01       	movw	r26, r24
    16bc:	aa 0f       	add	r26, r26
    16be:	bb 1f       	adc	r27, r27
    16c0:	a8 0f       	add	r26, r24
    16c2:	b9 1f       	adc	r27, r25
    16c4:	aa 0f       	add	r26, r26
    16c6:	bb 1f       	adc	r27, r27
    16c8:	a6 0f       	add	r26, r22
    16ca:	b7 1f       	adc	r27, r23
    16cc:	aa 0f       	add	r26, r26
    16ce:	bb 1f       	adc	r27, r27
    16d0:	aa 0f       	add	r26, r26
    16d2:	bb 1f       	adc	r27, r27
    16d4:	a9 5c       	subi	r26, 0xC9	; 201
    16d6:	be 4f       	sbci	r27, 0xFE	; 254
                > mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].weightToCenter)//East(right) is closer to the center
    16d8:	fa 01       	movw	r30, r20
    16da:	ee 0f       	add	r30, r30
    16dc:	ff 1f       	adc	r31, r31
    16de:	e4 0f       	add	r30, r20
    16e0:	f5 1f       	adc	r31, r21
    16e2:	ee 0f       	add	r30, r30
    16e4:	ff 1f       	adc	r31, r31
    16e6:	e2 0f       	add	r30, r18
    16e8:	f3 1f       	adc	r31, r19
    16ea:	ee 0f       	add	r30, r30
    16ec:	ff 1f       	adc	r31, r31
    16ee:	ee 0f       	add	r30, r30
    16f0:	ff 1f       	adc	r31, r31
    16f2:	e9 5c       	subi	r30, 0xC9	; 201
    16f4:	fe 4f       	sbci	r31, 0xFE	; 254
                }
            }

            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x10) == 0x10) //there is a West(left) wall 
            {
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown + 1].weightToCenter
    16f6:	13 96       	adiw	r26, 0x03	; 3
    16f8:	ac 91       	ld	r26, X
    16fa:	e3 81       	ldd	r30, Z+3	; 0x03
    16fc:	ea 17       	cp	r30, r26
    16fe:	b0 f4       	brcc	.+44     	; 0x172c <_Z15chooseDirectionv+0x30a>
                > mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].weightToCenter)//East(right) is closer to the center
                && ((mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].cellParameters & 0x08) != 0x08))//and next cell "not visited"
    1700:	fa 01       	movw	r30, r20
    1702:	ee 0f       	add	r30, r30
    1704:	ff 1f       	adc	r31, r31
    1706:	e4 0f       	add	r30, r20
    1708:	f5 1f       	adc	r31, r21
    170a:	ee 0f       	add	r30, r30
    170c:	ff 1f       	adc	r31, r31
    170e:	e2 0f       	add	r30, r18
    1710:	f3 1f       	adc	r31, r19
    1712:	ee 0f       	add	r30, r30
    1714:	ff 1f       	adc	r31, r31
    1716:	ee 0f       	add	r30, r30
    1718:	ff 1f       	adc	r31, r31
    171a:	e9 5c       	subi	r30, 0xC9	; 201
    171c:	fe 4f       	sbci	r31, 0xFE	; 254
    171e:	20 81       	ld	r18, Z
    1720:	23 fd       	sbrc	r18, 3
    1722:	04 c0       	rjmp	.+8      	; 0x172c <_Z15chooseDirectionv+0x30a>
                {
                    turnDirection = west; //West(left) walls detected... go right(east)(possibility #7)  
    1724:	80 e1       	ldi	r24, 0x10	; 16
    1726:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                    break;
    172a:	08 95       	ret
                }
                if (((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown + 1].cellParameters & 0x08) != 0x08))//west(right) is closer to the center and next cell "not visited"
    172c:	fc 01       	movw	r30, r24
    172e:	ee 0f       	add	r30, r30
    1730:	ff 1f       	adc	r31, r31
    1732:	e8 0f       	add	r30, r24
    1734:	f9 1f       	adc	r31, r25
    1736:	ee 0f       	add	r30, r30
    1738:	ff 1f       	adc	r31, r31
    173a:	e6 0f       	add	r30, r22
    173c:	f7 1f       	adc	r31, r23
    173e:	ee 0f       	add	r30, r30
    1740:	ff 1f       	adc	r31, r31
    1742:	ee 0f       	add	r30, r30
    1744:	ff 1f       	adc	r31, r31
    1746:	e9 5c       	subi	r30, 0xC9	; 201
    1748:	fe 4f       	sbci	r31, 0xFE	; 254
    174a:	80 81       	ld	r24, Z
    174c:	83 fd       	sbrc	r24, 3
    174e:	a3 c6       	rjmp	.+3398   	; 0x2496 <_Z15chooseDirectionv+0x1074>
                {
                    turnDirection = north; //West(left) walls detected... go up(north)(possibility #7)  
    1750:	80 e8       	ldi	r24, 0x80	; 128
    1752:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                    break;
    1756:	08 95       	ret
                }
            }

            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x30) == 0x30) //are no walls 
    1758:	50 33       	cpi	r21, 0x30	; 48
    175a:	09 f0       	breq	.+2      	; 0x175e <_Z15chooseDirectionv+0x33c>
    175c:	9c c6       	rjmp	.+3384   	; 0x2496 <_Z15chooseDirectionv+0x1074>
            {
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown + 1].weightToCenter
    175e:	a9 01       	movw	r20, r18
    1760:	4f 5f       	subi	r20, 0xFF	; 255
    1762:	5f 4f       	sbci	r21, 0xFF	; 255
    1764:	fc 01       	movw	r30, r24
    1766:	ee 0f       	add	r30, r30
    1768:	ff 1f       	adc	r31, r31
    176a:	e8 0f       	add	r30, r24
    176c:	f9 1f       	adc	r31, r25
    176e:	ee 0f       	add	r30, r30
    1770:	ff 1f       	adc	r31, r31
    1772:	e4 0f       	add	r30, r20
    1774:	f5 1f       	adc	r31, r21
    1776:	ee 0f       	add	r30, r30
    1778:	ff 1f       	adc	r31, r31
    177a:	ee 0f       	add	r30, r30
    177c:	ff 1f       	adc	r31, r31
    177e:	e9 5c       	subi	r30, 0xC9	; 201
    1780:	fe 4f       	sbci	r31, 0xFE	; 254
    1782:	a3 81       	ldd	r26, Z+3	; 0x03
                > mazeArray[current_i_xEastWestLeftRight - 1] [current_j_yNorthSouthUpDown].weightToCenter)//west(left) is closer to the center
    1784:	bc 01       	movw	r22, r24
    1786:	61 50       	subi	r22, 0x01	; 1
    1788:	71 09       	sbc	r23, r1
    178a:	fb 01       	movw	r30, r22
    178c:	ee 0f       	add	r30, r30
    178e:	ff 1f       	adc	r31, r31
    1790:	e6 0f       	add	r30, r22
    1792:	f7 1f       	adc	r31, r23
    1794:	ee 0f       	add	r30, r30
    1796:	ff 1f       	adc	r31, r31
    1798:	e2 0f       	add	r30, r18
    179a:	f3 1f       	adc	r31, r19
    179c:	ee 0f       	add	r30, r30
    179e:	ff 1f       	adc	r31, r31
    17a0:	ee 0f       	add	r30, r30
    17a2:	ff 1f       	adc	r31, r31
    17a4:	e9 5c       	subi	r30, 0xC9	; 201
    17a6:	fe 4f       	sbci	r31, 0xFE	; 254
                }
            }

            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x30) == 0x30) //are no walls 
            {
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown + 1].weightToCenter
    17a8:	e3 81       	ldd	r30, Z+3	; 0x03
    17aa:	ea 17       	cp	r30, r26
    17ac:	b0 f4       	brcc	.+44     	; 0x17da <_Z15chooseDirectionv+0x3b8>
                > mazeArray[current_i_xEastWestLeftRight - 1] [current_j_yNorthSouthUpDown].weightToCenter)//west(left) is closer to the center
                && ((mazeArray[current_i_xEastWestLeftRight - 1] [current_j_yNorthSouthUpDown].cellParameters & 0x08) != 0x08))//and next cell "not visited"
    17ae:	fb 01       	movw	r30, r22
    17b0:	ee 0f       	add	r30, r30
    17b2:	ff 1f       	adc	r31, r31
    17b4:	e6 0f       	add	r30, r22
    17b6:	f7 1f       	adc	r31, r23
    17b8:	ee 0f       	add	r30, r30
    17ba:	ff 1f       	adc	r31, r31
    17bc:	e2 0f       	add	r30, r18
    17be:	f3 1f       	adc	r31, r19
    17c0:	ee 0f       	add	r30, r30
    17c2:	ff 1f       	adc	r31, r31
    17c4:	ee 0f       	add	r30, r30
    17c6:	ff 1f       	adc	r31, r31
    17c8:	e9 5c       	subi	r30, 0xC9	; 201
    17ca:	fe 4f       	sbci	r31, 0xFE	; 254
    17cc:	60 81       	ld	r22, Z
    17ce:	63 fd       	sbrc	r22, 3
    17d0:	04 c0       	rjmp	.+8      	; 0x17da <_Z15chooseDirectionv+0x3b8>
                {
                    turnDirection = east; //East(right) walls detected... go left(west)(possibility #8)  
    17d2:	80 e2       	ldi	r24, 0x20	; 32
    17d4:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                    break;
    17d8:	08 95       	ret
                }
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown + 1].weightToCenter
                    > mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].weightToCenter)//East(right) is closer to the center
    17da:	bc 01       	movw	r22, r24
    17dc:	6f 5f       	subi	r22, 0xFF	; 255
    17de:	7f 4f       	sbci	r23, 0xFF	; 255
    17e0:	fb 01       	movw	r30, r22
    17e2:	ee 0f       	add	r30, r30
    17e4:	ff 1f       	adc	r31, r31
    17e6:	e6 0f       	add	r30, r22
    17e8:	f7 1f       	adc	r31, r23
    17ea:	ee 0f       	add	r30, r30
    17ec:	ff 1f       	adc	r31, r31
    17ee:	e2 0f       	add	r30, r18
    17f0:	f3 1f       	adc	r31, r19
    17f2:	ee 0f       	add	r30, r30
    17f4:	ff 1f       	adc	r31, r31
    17f6:	ee 0f       	add	r30, r30
    17f8:	ff 1f       	adc	r31, r31
    17fa:	e9 5c       	subi	r30, 0xC9	; 201
    17fc:	fe 4f       	sbci	r31, 0xFE	; 254
                && ((mazeArray[current_i_xEastWestLeftRight - 1] [current_j_yNorthSouthUpDown].cellParameters & 0x08) != 0x08))//and next cell "not visited"
                {
                    turnDirection = east; //East(right) walls detected... go left(west)(possibility #8)  
                    break;
                }
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown + 1].weightToCenter
    17fe:	e3 81       	ldd	r30, Z+3	; 0x03
    1800:	ea 17       	cp	r30, r26
    1802:	b0 f4       	brcc	.+44     	; 0x1830 <_Z15chooseDirectionv+0x40e>
                    > mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].weightToCenter)//East(right) is closer to the center
                    && ((mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].cellParameters & 0x08) != 0x08))//and next cell "not visited"
    1804:	fb 01       	movw	r30, r22
    1806:	ee 0f       	add	r30, r30
    1808:	ff 1f       	adc	r31, r31
    180a:	e6 0f       	add	r30, r22
    180c:	f7 1f       	adc	r31, r23
    180e:	ee 0f       	add	r30, r30
    1810:	ff 1f       	adc	r31, r31
    1812:	e2 0f       	add	r30, r18
    1814:	f3 1f       	adc	r31, r19
    1816:	ee 0f       	add	r30, r30
    1818:	ff 1f       	adc	r31, r31
    181a:	ee 0f       	add	r30, r30
    181c:	ff 1f       	adc	r31, r31
    181e:	e9 5c       	subi	r30, 0xC9	; 201
    1820:	fe 4f       	sbci	r31, 0xFE	; 254
    1822:	20 81       	ld	r18, Z
    1824:	23 fd       	sbrc	r18, 3
    1826:	04 c0       	rjmp	.+8      	; 0x1830 <_Z15chooseDirectionv+0x40e>
                {
                    turnDirection = west; //West(left) walls detected... go right(east)(possibility #8)  
    1828:	80 e1       	ldi	r24, 0x10	; 16
    182a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                    break;
    182e:	08 95       	ret
                }
                if (((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown + 1].cellParameters & 0x08) != 0x08))//west(right) is closer to the center and next cell "not visited"
    1830:	9c 01       	movw	r18, r24
    1832:	22 0f       	add	r18, r18
    1834:	33 1f       	adc	r19, r19
    1836:	82 0f       	add	r24, r18
    1838:	93 1f       	adc	r25, r19
    183a:	88 0f       	add	r24, r24
    183c:	99 1f       	adc	r25, r25
    183e:	fc 01       	movw	r30, r24
    1840:	e4 0f       	add	r30, r20
    1842:	f5 1f       	adc	r31, r21
    1844:	ee 0f       	add	r30, r30
    1846:	ff 1f       	adc	r31, r31
    1848:	ee 0f       	add	r30, r30
    184a:	ff 1f       	adc	r31, r31
    184c:	e9 5c       	subi	r30, 0xC9	; 201
    184e:	fe 4f       	sbci	r31, 0xFE	; 254
    1850:	80 81       	ld	r24, Z
    1852:	83 fd       	sbrc	r24, 3
    1854:	20 c6       	rjmp	.+3136   	; 0x2496 <_Z15chooseDirectionv+0x1074>
                {
                    turnDirection = north; //West(left) walls detected... go up(north)(possibility #8)  
    1856:	80 e8       	ldi	r24, 0x80	; 128
    1858:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                    break;
    185c:	08 95       	ret
                * first we check for if we are in a dead-end, 3 walls in front of us
                * , then for 2 walls
                * , then for 1 wall
                * , then no walls
                */
            if (((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x70) == 0x70))//North(top) ,east(right), and west(left) walls detected
    185e:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <current_i_xEastWestLeftRight>
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	20 91 35 01 	lds	r18, 0x0135	; 0x800135 <current_j_yNorthSouthUpDown>
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	fc 01       	movw	r30, r24
    186c:	ee 0f       	add	r30, r30
    186e:	ff 1f       	adc	r31, r31
    1870:	e8 0f       	add	r30, r24
    1872:	f9 1f       	adc	r31, r25
    1874:	ee 0f       	add	r30, r30
    1876:	ff 1f       	adc	r31, r31
    1878:	e2 0f       	add	r30, r18
    187a:	f3 1f       	adc	r31, r19
    187c:	ee 0f       	add	r30, r30
    187e:	ff 1f       	adc	r31, r31
    1880:	ee 0f       	add	r30, r30
    1882:	ff 1f       	adc	r31, r31
    1884:	e9 5c       	subi	r30, 0xC9	; 201
    1886:	fe 4f       	sbci	r31, 0xFE	; 254
    1888:	40 81       	ld	r20, Z
    188a:	54 2f       	mov	r21, r20
    188c:	50 77       	andi	r21, 0x70	; 112
    188e:	50 37       	cpi	r21, 0x70	; 112
    1890:	a9 f4       	brne	.+42     	; 0x18bc <_Z15chooseDirectionv+0x49a>
            {
                turnDirection = north; //North(top) ,east(right), and west(left) walls detected... dead-end, turn around (possibility #1)   
    1892:	50 e8       	ldi	r21, 0x80	; 128
    1894:	50 93 16 01 	sts	0x0116, r21	; 0x800116 <turnDirection>
                mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters |= 0x04;
    1898:	fc 01       	movw	r30, r24
    189a:	ee 0f       	add	r30, r30
    189c:	ff 1f       	adc	r31, r31
    189e:	e8 0f       	add	r30, r24
    18a0:	f9 1f       	adc	r31, r25
    18a2:	ee 0f       	add	r30, r30
    18a4:	ff 1f       	adc	r31, r31
    18a6:	e2 0f       	add	r30, r18
    18a8:	f3 1f       	adc	r31, r19
    18aa:	ee 0f       	add	r30, r30
    18ac:	ff 1f       	adc	r31, r31
    18ae:	ee 0f       	add	r30, r30
    18b0:	ff 1f       	adc	r31, r31
    18b2:	e9 5c       	subi	r30, 0xC9	; 201
    18b4:	fe 4f       	sbci	r31, 0xFE	; 254
    18b6:	44 60       	ori	r20, 0x04	; 4
    18b8:	40 83       	st	Z, r20
                break;
    18ba:	08 95       	ret
            }
            else if (((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x50) == 0x50) //there are South(bottom) and west(left) walls 
    18bc:	54 2f       	mov	r21, r20
    18be:	50 75       	andi	r21, 0x50	; 80
    18c0:	50 35       	cpi	r21, 0x50	; 80
    18c2:	c9 f4       	brne	.+50     	; 0x18f6 <_Z15chooseDirectionv+0x4d4>
                && ((mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].cellParameters & 0x08) != 0x08)) //and next cell "not visited"
    18c4:	bc 01       	movw	r22, r24
    18c6:	6f 5f       	subi	r22, 0xFF	; 255
    18c8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ca:	fb 01       	movw	r30, r22
    18cc:	ee 0f       	add	r30, r30
    18ce:	ff 1f       	adc	r31, r31
    18d0:	e6 0f       	add	r30, r22
    18d2:	f7 1f       	adc	r31, r23
    18d4:	ee 0f       	add	r30, r30
    18d6:	ff 1f       	adc	r31, r31
    18d8:	e2 0f       	add	r30, r18
    18da:	f3 1f       	adc	r31, r19
    18dc:	ee 0f       	add	r30, r30
    18de:	ff 1f       	adc	r31, r31
    18e0:	ee 0f       	add	r30, r30
    18e2:	ff 1f       	adc	r31, r31
    18e4:	e9 5c       	subi	r30, 0xC9	; 201
    18e6:	fe 4f       	sbci	r31, 0xFE	; 254
    18e8:	50 81       	ld	r21, Z
    18ea:	53 fd       	sbrc	r21, 3
    18ec:	04 c0       	rjmp	.+8      	; 0x18f6 <_Z15chooseDirectionv+0x4d4>
            {
                turnDirection = east; //South(bottom) and west(left) walls detected... go right turn (possibility #2)   
    18ee:	80 e2       	ldi	r24, 0x20	; 32
    18f0:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                break;
    18f4:	08 95       	ret
            }
            else if (((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x60) == 0x60) //there are South(bottom) and East(right) walls 
    18f6:	54 2f       	mov	r21, r20
    18f8:	50 76       	andi	r21, 0x60	; 96
    18fa:	50 36       	cpi	r21, 0x60	; 96
    18fc:	c9 f4       	brne	.+50     	; 0x1930 <_Z15chooseDirectionv+0x50e>
                && ((mazeArray[current_i_xEastWestLeftRight - 1] [current_j_yNorthSouthUpDown].cellParameters & 0x08) != 0x08)) //and next cell "not visited"
    18fe:	bc 01       	movw	r22, r24
    1900:	61 50       	subi	r22, 0x01	; 1
    1902:	71 09       	sbc	r23, r1
    1904:	fb 01       	movw	r30, r22
    1906:	ee 0f       	add	r30, r30
    1908:	ff 1f       	adc	r31, r31
    190a:	e6 0f       	add	r30, r22
    190c:	f7 1f       	adc	r31, r23
    190e:	ee 0f       	add	r30, r30
    1910:	ff 1f       	adc	r31, r31
    1912:	e2 0f       	add	r30, r18
    1914:	f3 1f       	adc	r31, r19
    1916:	ee 0f       	add	r30, r30
    1918:	ff 1f       	adc	r31, r31
    191a:	ee 0f       	add	r30, r30
    191c:	ff 1f       	adc	r31, r31
    191e:	e9 5c       	subi	r30, 0xC9	; 201
    1920:	fe 4f       	sbci	r31, 0xFE	; 254
    1922:	50 81       	ld	r21, Z
    1924:	53 fd       	sbrc	r21, 3
    1926:	04 c0       	rjmp	.+8      	; 0x1930 <_Z15chooseDirectionv+0x50e>
            {
                turnDirection = west; //South(bottom) and East(right) walls detected... go left turn (possibility #3)  
    1928:	80 e1       	ldi	r24, 0x10	; 16
    192a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                break;
    192e:	08 95       	ret
            }
            else if (((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x30) == 0x30) //there are East(right) and west(left) walls 
    1930:	54 2f       	mov	r21, r20
    1932:	50 73       	andi	r21, 0x30	; 48
    1934:	50 33       	cpi	r21, 0x30	; 48
    1936:	c9 f4       	brne	.+50     	; 0x196a <_Z15chooseDirectionv+0x548>
                && ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown - 1].cellParameters & 0x08) != 0x08)) //and next cell "not visited"
    1938:	fc 01       	movw	r30, r24
    193a:	ee 0f       	add	r30, r30
    193c:	ff 1f       	adc	r31, r31
    193e:	e8 0f       	add	r30, r24
    1940:	f9 1f       	adc	r31, r25
    1942:	ee 0f       	add	r30, r30
    1944:	ff 1f       	adc	r31, r31
    1946:	b9 01       	movw	r22, r18
    1948:	61 50       	subi	r22, 0x01	; 1
    194a:	71 09       	sbc	r23, r1
    194c:	e6 0f       	add	r30, r22
    194e:	f7 1f       	adc	r31, r23
    1950:	ee 0f       	add	r30, r30
    1952:	ff 1f       	adc	r31, r31
    1954:	ee 0f       	add	r30, r30
    1956:	ff 1f       	adc	r31, r31
    1958:	e9 5c       	subi	r30, 0xC9	; 201
    195a:	fe 4f       	sbci	r31, 0xFE	; 254
    195c:	50 81       	ld	r21, Z
    195e:	53 fd       	sbrc	r21, 3
    1960:	04 c0       	rjmp	.+8      	; 0x196a <_Z15chooseDirectionv+0x548>
            {
                turnDirection = south; //East(right) and west(left) walls detected... go straight (possibility #4)  
    1962:	80 e4       	ldi	r24, 0x40	; 64
    1964:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                break;
    1968:	08 95       	ret
            }

            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x40) == 0x40) //there is a South(bottom) wall 
    196a:	46 ff       	sbrs	r20, 6
    196c:	53 c0       	rjmp	.+166    	; 0x1a14 <_Z15chooseDirectionv+0x5f2>
            {
                if ((mazeArray[current_i_xEastWestLeftRight - 1] [current_j_yNorthSouthUpDown].weightToCenter
    196e:	ac 01       	movw	r20, r24
    1970:	41 50       	subi	r20, 0x01	; 1
    1972:	51 09       	sbc	r21, r1
                > mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].weightToCenter)//east(right) is closer to the center
    1974:	01 96       	adiw	r24, 0x01	; 1
                break;
            }

            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x40) == 0x40) //there is a South(bottom) wall 
            {
                if ((mazeArray[current_i_xEastWestLeftRight - 1] [current_j_yNorthSouthUpDown].weightToCenter
    1976:	da 01       	movw	r26, r20
    1978:	aa 0f       	add	r26, r26
    197a:	bb 1f       	adc	r27, r27
    197c:	a4 0f       	add	r26, r20
    197e:	b5 1f       	adc	r27, r21
    1980:	aa 0f       	add	r26, r26
    1982:	bb 1f       	adc	r27, r27
    1984:	a2 0f       	add	r26, r18
    1986:	b3 1f       	adc	r27, r19
    1988:	aa 0f       	add	r26, r26
    198a:	bb 1f       	adc	r27, r27
    198c:	aa 0f       	add	r26, r26
    198e:	bb 1f       	adc	r27, r27
    1990:	a9 5c       	subi	r26, 0xC9	; 201
    1992:	be 4f       	sbci	r27, 0xFE	; 254
                > mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].weightToCenter)//east(right) is closer to the center
    1994:	fc 01       	movw	r30, r24
    1996:	ee 0f       	add	r30, r30
    1998:	ff 1f       	adc	r31, r31
    199a:	e8 0f       	add	r30, r24
    199c:	f9 1f       	adc	r31, r25
    199e:	ee 0f       	add	r30, r30
    19a0:	ff 1f       	adc	r31, r31
    19a2:	e2 0f       	add	r30, r18
    19a4:	f3 1f       	adc	r31, r19
    19a6:	ee 0f       	add	r30, r30
    19a8:	ff 1f       	adc	r31, r31
    19aa:	ee 0f       	add	r30, r30
    19ac:	ff 1f       	adc	r31, r31
    19ae:	e9 5c       	subi	r30, 0xC9	; 201
    19b0:	fe 4f       	sbci	r31, 0xFE	; 254
                break;
            }

            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x40) == 0x40) //there is a South(bottom) wall 
            {
                if ((mazeArray[current_i_xEastWestLeftRight - 1] [current_j_yNorthSouthUpDown].weightToCenter
    19b2:	13 96       	adiw	r26, 0x03	; 3
    19b4:	7c 91       	ld	r23, X
    19b6:	63 81       	ldd	r22, Z+3	; 0x03
    19b8:	67 17       	cp	r22, r23
    19ba:	b0 f4       	brcc	.+44     	; 0x19e8 <_Z15chooseDirectionv+0x5c6>
                > mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].weightToCenter)//east(right) is closer to the center
                && ((mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].cellParameters & 0x08) != 0x08))//and next cell "not visited"
    19bc:	fc 01       	movw	r30, r24
    19be:	ee 0f       	add	r30, r30
    19c0:	ff 1f       	adc	r31, r31
    19c2:	e8 0f       	add	r30, r24
    19c4:	f9 1f       	adc	r31, r25
    19c6:	ee 0f       	add	r30, r30
    19c8:	ff 1f       	adc	r31, r31
    19ca:	e2 0f       	add	r30, r18
    19cc:	f3 1f       	adc	r31, r19
    19ce:	ee 0f       	add	r30, r30
    19d0:	ff 1f       	adc	r31, r31
    19d2:	ee 0f       	add	r30, r30
    19d4:	ff 1f       	adc	r31, r31
    19d6:	e9 5c       	subi	r30, 0xC9	; 201
    19d8:	fe 4f       	sbci	r31, 0xFE	; 254
    19da:	80 81       	ld	r24, Z
    19dc:	83 fd       	sbrc	r24, 3
    19de:	04 c0       	rjmp	.+8      	; 0x19e8 <_Z15chooseDirectionv+0x5c6>
                {
                    turnDirection = east; //South(bottom) walls detected... go right(east)(possibility #5)  
    19e0:	80 e2       	ldi	r24, 0x20	; 32
    19e2:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                    break;
    19e6:	08 95       	ret
                }
                if (((mazeArray[current_i_xEastWestLeftRight - 1] [current_j_yNorthSouthUpDown].cellParameters & 0x08) != 0x08))//west(right) is closer to the center and next cell "not visited"
    19e8:	fa 01       	movw	r30, r20
    19ea:	ee 0f       	add	r30, r30
    19ec:	ff 1f       	adc	r31, r31
    19ee:	e4 0f       	add	r30, r20
    19f0:	f5 1f       	adc	r31, r21
    19f2:	ee 0f       	add	r30, r30
    19f4:	ff 1f       	adc	r31, r31
    19f6:	e2 0f       	add	r30, r18
    19f8:	f3 1f       	adc	r31, r19
    19fa:	ee 0f       	add	r30, r30
    19fc:	ff 1f       	adc	r31, r31
    19fe:	ee 0f       	add	r30, r30
    1a00:	ff 1f       	adc	r31, r31
    1a02:	e9 5c       	subi	r30, 0xC9	; 201
    1a04:	fe 4f       	sbci	r31, 0xFE	; 254
    1a06:	80 81       	ld	r24, Z
    1a08:	83 fd       	sbrc	r24, 3
    1a0a:	45 c5       	rjmp	.+2698   	; 0x2496 <_Z15chooseDirectionv+0x1074>
                {
                    turnDirection = west; //South(bottom) walls detected... go left(west)(possibility #5)  
    1a0c:	80 e1       	ldi	r24, 0x10	; 16
    1a0e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                    break;
    1a12:	08 95       	ret
                }
            }

            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x20) == 0x20) //there is a East(right) wall 
    1a14:	45 ff       	sbrs	r20, 5
    1a16:	55 c0       	rjmp	.+170    	; 0x1ac2 <_Z15chooseDirectionv+0x6a0>
            {
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown - 1].weightToCenter
    1a18:	b9 01       	movw	r22, r18
    1a1a:	61 50       	subi	r22, 0x01	; 1
    1a1c:	71 09       	sbc	r23, r1
                > mazeArray[current_i_xEastWestLeftRight - 1] [current_j_yNorthSouthUpDown].weightToCenter)//west(left) is closer to the center
    1a1e:	ac 01       	movw	r20, r24
    1a20:	41 50       	subi	r20, 0x01	; 1
    1a22:	51 09       	sbc	r21, r1
                }
            }

            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x20) == 0x20) //there is a East(right) wall 
            {
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown - 1].weightToCenter
    1a24:	dc 01       	movw	r26, r24
    1a26:	aa 0f       	add	r26, r26
    1a28:	bb 1f       	adc	r27, r27
    1a2a:	a8 0f       	add	r26, r24
    1a2c:	b9 1f       	adc	r27, r25
    1a2e:	aa 0f       	add	r26, r26
    1a30:	bb 1f       	adc	r27, r27
    1a32:	a6 0f       	add	r26, r22
    1a34:	b7 1f       	adc	r27, r23
    1a36:	aa 0f       	add	r26, r26
    1a38:	bb 1f       	adc	r27, r27
    1a3a:	aa 0f       	add	r26, r26
    1a3c:	bb 1f       	adc	r27, r27
    1a3e:	a9 5c       	subi	r26, 0xC9	; 201
    1a40:	be 4f       	sbci	r27, 0xFE	; 254
                > mazeArray[current_i_xEastWestLeftRight - 1] [current_j_yNorthSouthUpDown].weightToCenter)//west(left) is closer to the center
    1a42:	fa 01       	movw	r30, r20
    1a44:	ee 0f       	add	r30, r30
    1a46:	ff 1f       	adc	r31, r31
    1a48:	e4 0f       	add	r30, r20
    1a4a:	f5 1f       	adc	r31, r21
    1a4c:	ee 0f       	add	r30, r30
    1a4e:	ff 1f       	adc	r31, r31
    1a50:	e2 0f       	add	r30, r18
    1a52:	f3 1f       	adc	r31, r19
    1a54:	ee 0f       	add	r30, r30
    1a56:	ff 1f       	adc	r31, r31
    1a58:	ee 0f       	add	r30, r30
    1a5a:	ff 1f       	adc	r31, r31
    1a5c:	e9 5c       	subi	r30, 0xC9	; 201
    1a5e:	fe 4f       	sbci	r31, 0xFE	; 254
                }
            }

            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x20) == 0x20) //there is a East(right) wall 
            {
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown - 1].weightToCenter
    1a60:	13 96       	adiw	r26, 0x03	; 3
    1a62:	ac 91       	ld	r26, X
    1a64:	e3 81       	ldd	r30, Z+3	; 0x03
    1a66:	ea 17       	cp	r30, r26
    1a68:	b0 f4       	brcc	.+44     	; 0x1a96 <_Z15chooseDirectionv+0x674>
                > mazeArray[current_i_xEastWestLeftRight - 1] [current_j_yNorthSouthUpDown].weightToCenter)//west(left) is closer to the center
                && ((mazeArray[current_i_xEastWestLeftRight - 1] [current_j_yNorthSouthUpDown].cellParameters & 0x08) != 0x08))//and next cell "not visited"
    1a6a:	fa 01       	movw	r30, r20
    1a6c:	ee 0f       	add	r30, r30
    1a6e:	ff 1f       	adc	r31, r31
    1a70:	e4 0f       	add	r30, r20
    1a72:	f5 1f       	adc	r31, r21
    1a74:	ee 0f       	add	r30, r30
    1a76:	ff 1f       	adc	r31, r31
    1a78:	e2 0f       	add	r30, r18
    1a7a:	f3 1f       	adc	r31, r19
    1a7c:	ee 0f       	add	r30, r30
    1a7e:	ff 1f       	adc	r31, r31
    1a80:	ee 0f       	add	r30, r30
    1a82:	ff 1f       	adc	r31, r31
    1a84:	e9 5c       	subi	r30, 0xC9	; 201
    1a86:	fe 4f       	sbci	r31, 0xFE	; 254
    1a88:	20 81       	ld	r18, Z
    1a8a:	23 fd       	sbrc	r18, 3
    1a8c:	04 c0       	rjmp	.+8      	; 0x1a96 <_Z15chooseDirectionv+0x674>
                {
                    turnDirection = east; //East(right) walls detected... go left(west)(possibility #6)  
    1a8e:	80 e2       	ldi	r24, 0x20	; 32
    1a90:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                    break;
    1a94:	08 95       	ret
                }
                if (((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown - 1].cellParameters & 0x08) != 0x08))//west(right) is closer to the center and next cell "not visited"
    1a96:	fc 01       	movw	r30, r24
    1a98:	ee 0f       	add	r30, r30
    1a9a:	ff 1f       	adc	r31, r31
    1a9c:	e8 0f       	add	r30, r24
    1a9e:	f9 1f       	adc	r31, r25
    1aa0:	ee 0f       	add	r30, r30
    1aa2:	ff 1f       	adc	r31, r31
    1aa4:	e6 0f       	add	r30, r22
    1aa6:	f7 1f       	adc	r31, r23
    1aa8:	ee 0f       	add	r30, r30
    1aaa:	ff 1f       	adc	r31, r31
    1aac:	ee 0f       	add	r30, r30
    1aae:	ff 1f       	adc	r31, r31
    1ab0:	e9 5c       	subi	r30, 0xC9	; 201
    1ab2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ab4:	80 81       	ld	r24, Z
    1ab6:	83 fd       	sbrc	r24, 3
    1ab8:	ee c4       	rjmp	.+2524   	; 0x2496 <_Z15chooseDirectionv+0x1074>
                {
                    turnDirection = south; //East(right) walls detected... go down(south)(possibility #6)  
    1aba:	80 e4       	ldi	r24, 0x40	; 64
    1abc:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                    break;
    1ac0:	08 95       	ret
                }
            }

            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x10) == 0x10) //there is a West(left) wall 
    1ac2:	44 ff       	sbrs	r20, 4
    1ac4:	55 c0       	rjmp	.+170    	; 0x1b70 <_Z15chooseDirectionv+0x74e>
            {
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown - 1].weightToCenter
    1ac6:	b9 01       	movw	r22, r18
    1ac8:	61 50       	subi	r22, 0x01	; 1
    1aca:	71 09       	sbc	r23, r1
                > mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].weightToCenter)//East(right) is closer to the center
    1acc:	ac 01       	movw	r20, r24
    1ace:	4f 5f       	subi	r20, 0xFF	; 255
    1ad0:	5f 4f       	sbci	r21, 0xFF	; 255
                }
            }

            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x10) == 0x10) //there is a West(left) wall 
            {
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown - 1].weightToCenter
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	aa 0f       	add	r26, r26
    1ad6:	bb 1f       	adc	r27, r27
    1ad8:	a8 0f       	add	r26, r24
    1ada:	b9 1f       	adc	r27, r25
    1adc:	aa 0f       	add	r26, r26
    1ade:	bb 1f       	adc	r27, r27
    1ae0:	a6 0f       	add	r26, r22
    1ae2:	b7 1f       	adc	r27, r23
    1ae4:	aa 0f       	add	r26, r26
    1ae6:	bb 1f       	adc	r27, r27
    1ae8:	aa 0f       	add	r26, r26
    1aea:	bb 1f       	adc	r27, r27
    1aec:	a9 5c       	subi	r26, 0xC9	; 201
    1aee:	be 4f       	sbci	r27, 0xFE	; 254
                > mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].weightToCenter)//East(right) is closer to the center
    1af0:	fa 01       	movw	r30, r20
    1af2:	ee 0f       	add	r30, r30
    1af4:	ff 1f       	adc	r31, r31
    1af6:	e4 0f       	add	r30, r20
    1af8:	f5 1f       	adc	r31, r21
    1afa:	ee 0f       	add	r30, r30
    1afc:	ff 1f       	adc	r31, r31
    1afe:	e2 0f       	add	r30, r18
    1b00:	f3 1f       	adc	r31, r19
    1b02:	ee 0f       	add	r30, r30
    1b04:	ff 1f       	adc	r31, r31
    1b06:	ee 0f       	add	r30, r30
    1b08:	ff 1f       	adc	r31, r31
    1b0a:	e9 5c       	subi	r30, 0xC9	; 201
    1b0c:	fe 4f       	sbci	r31, 0xFE	; 254
                }
            }

            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x10) == 0x10) //there is a West(left) wall 
            {
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown - 1].weightToCenter
    1b0e:	13 96       	adiw	r26, 0x03	; 3
    1b10:	ac 91       	ld	r26, X
    1b12:	e3 81       	ldd	r30, Z+3	; 0x03
    1b14:	ea 17       	cp	r30, r26
    1b16:	b0 f4       	brcc	.+44     	; 0x1b44 <_Z15chooseDirectionv+0x722>
                > mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].weightToCenter)//East(right) is closer to the center
                && ((mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].cellParameters & 0x08) != 0x08))//and next cell "not visited"
    1b18:	fa 01       	movw	r30, r20
    1b1a:	ee 0f       	add	r30, r30
    1b1c:	ff 1f       	adc	r31, r31
    1b1e:	e4 0f       	add	r30, r20
    1b20:	f5 1f       	adc	r31, r21
    1b22:	ee 0f       	add	r30, r30
    1b24:	ff 1f       	adc	r31, r31
    1b26:	e2 0f       	add	r30, r18
    1b28:	f3 1f       	adc	r31, r19
    1b2a:	ee 0f       	add	r30, r30
    1b2c:	ff 1f       	adc	r31, r31
    1b2e:	ee 0f       	add	r30, r30
    1b30:	ff 1f       	adc	r31, r31
    1b32:	e9 5c       	subi	r30, 0xC9	; 201
    1b34:	fe 4f       	sbci	r31, 0xFE	; 254
    1b36:	20 81       	ld	r18, Z
    1b38:	23 fd       	sbrc	r18, 3
    1b3a:	04 c0       	rjmp	.+8      	; 0x1b44 <_Z15chooseDirectionv+0x722>
                {
                    turnDirection = west; //West(left) walls detected... go right(east)(possibility #7)  
    1b3c:	80 e1       	ldi	r24, 0x10	; 16
    1b3e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                    break;
    1b42:	08 95       	ret
                }
                if (((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown - 1].cellParameters & 0x08) != 0x08))//west(right) is closer to the center and next cell "not visited"
    1b44:	fc 01       	movw	r30, r24
    1b46:	ee 0f       	add	r30, r30
    1b48:	ff 1f       	adc	r31, r31
    1b4a:	e8 0f       	add	r30, r24
    1b4c:	f9 1f       	adc	r31, r25
    1b4e:	ee 0f       	add	r30, r30
    1b50:	ff 1f       	adc	r31, r31
    1b52:	e6 0f       	add	r30, r22
    1b54:	f7 1f       	adc	r31, r23
    1b56:	ee 0f       	add	r30, r30
    1b58:	ff 1f       	adc	r31, r31
    1b5a:	ee 0f       	add	r30, r30
    1b5c:	ff 1f       	adc	r31, r31
    1b5e:	e9 5c       	subi	r30, 0xC9	; 201
    1b60:	fe 4f       	sbci	r31, 0xFE	; 254
    1b62:	80 81       	ld	r24, Z
    1b64:	83 fd       	sbrc	r24, 3
    1b66:	97 c4       	rjmp	.+2350   	; 0x2496 <_Z15chooseDirectionv+0x1074>
                {
                    turnDirection = south; //West(left) walls detected... go down(south)(possibility #7)  
    1b68:	80 e4       	ldi	r24, 0x40	; 64
    1b6a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                    break;
    1b6e:	08 95       	ret
                }
            }

            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x00) == 0x00) //are no walls(never happen)
            {
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown - 1].weightToCenter
    1b70:	a9 01       	movw	r20, r18
    1b72:	41 50       	subi	r20, 0x01	; 1
    1b74:	51 09       	sbc	r21, r1
    1b76:	fc 01       	movw	r30, r24
    1b78:	ee 0f       	add	r30, r30
    1b7a:	ff 1f       	adc	r31, r31
    1b7c:	e8 0f       	add	r30, r24
    1b7e:	f9 1f       	adc	r31, r25
    1b80:	ee 0f       	add	r30, r30
    1b82:	ff 1f       	adc	r31, r31
    1b84:	e4 0f       	add	r30, r20
    1b86:	f5 1f       	adc	r31, r21
    1b88:	ee 0f       	add	r30, r30
    1b8a:	ff 1f       	adc	r31, r31
    1b8c:	ee 0f       	add	r30, r30
    1b8e:	ff 1f       	adc	r31, r31
    1b90:	e9 5c       	subi	r30, 0xC9	; 201
    1b92:	fe 4f       	sbci	r31, 0xFE	; 254
    1b94:	a3 81       	ldd	r26, Z+3	; 0x03
                > mazeArray[current_i_xEastWestLeftRight - 1] [current_j_yNorthSouthUpDown].weightToCenter)//west(left) is closer to the center
    1b96:	bc 01       	movw	r22, r24
    1b98:	61 50       	subi	r22, 0x01	; 1
    1b9a:	71 09       	sbc	r23, r1
    1b9c:	fb 01       	movw	r30, r22
    1b9e:	ee 0f       	add	r30, r30
    1ba0:	ff 1f       	adc	r31, r31
    1ba2:	e6 0f       	add	r30, r22
    1ba4:	f7 1f       	adc	r31, r23
    1ba6:	ee 0f       	add	r30, r30
    1ba8:	ff 1f       	adc	r31, r31
    1baa:	e2 0f       	add	r30, r18
    1bac:	f3 1f       	adc	r31, r19
    1bae:	ee 0f       	add	r30, r30
    1bb0:	ff 1f       	adc	r31, r31
    1bb2:	ee 0f       	add	r30, r30
    1bb4:	ff 1f       	adc	r31, r31
    1bb6:	e9 5c       	subi	r30, 0xC9	; 201
    1bb8:	fe 4f       	sbci	r31, 0xFE	; 254
                }
            }

            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x00) == 0x00) //are no walls(never happen)
            {
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown - 1].weightToCenter
    1bba:	e3 81       	ldd	r30, Z+3	; 0x03
    1bbc:	ea 17       	cp	r30, r26
    1bbe:	b0 f4       	brcc	.+44     	; 0x1bec <_Z15chooseDirectionv+0x7ca>
                > mazeArray[current_i_xEastWestLeftRight - 1] [current_j_yNorthSouthUpDown].weightToCenter)//west(left) is closer to the center
                && ((mazeArray[current_i_xEastWestLeftRight - 1] [current_j_yNorthSouthUpDown].cellParameters & 0x08) != 0x08))//and next cell "not visited"
    1bc0:	fb 01       	movw	r30, r22
    1bc2:	ee 0f       	add	r30, r30
    1bc4:	ff 1f       	adc	r31, r31
    1bc6:	e6 0f       	add	r30, r22
    1bc8:	f7 1f       	adc	r31, r23
    1bca:	ee 0f       	add	r30, r30
    1bcc:	ff 1f       	adc	r31, r31
    1bce:	e2 0f       	add	r30, r18
    1bd0:	f3 1f       	adc	r31, r19
    1bd2:	ee 0f       	add	r30, r30
    1bd4:	ff 1f       	adc	r31, r31
    1bd6:	ee 0f       	add	r30, r30
    1bd8:	ff 1f       	adc	r31, r31
    1bda:	e9 5c       	subi	r30, 0xC9	; 201
    1bdc:	fe 4f       	sbci	r31, 0xFE	; 254
    1bde:	60 81       	ld	r22, Z
    1be0:	63 fd       	sbrc	r22, 3
    1be2:	04 c0       	rjmp	.+8      	; 0x1bec <_Z15chooseDirectionv+0x7ca>
                {
                    turnDirection = east; //East(right) walls detected... go left(west)(possibility #8)  
    1be4:	80 e2       	ldi	r24, 0x20	; 32
    1be6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                    break;
    1bea:	08 95       	ret
                }
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown - 1].weightToCenter
                    > mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].weightToCenter)//East(right) is closer to the center
    1bec:	bc 01       	movw	r22, r24
    1bee:	6f 5f       	subi	r22, 0xFF	; 255
    1bf0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf2:	fb 01       	movw	r30, r22
    1bf4:	ee 0f       	add	r30, r30
    1bf6:	ff 1f       	adc	r31, r31
    1bf8:	e6 0f       	add	r30, r22
    1bfa:	f7 1f       	adc	r31, r23
    1bfc:	ee 0f       	add	r30, r30
    1bfe:	ff 1f       	adc	r31, r31
    1c00:	e2 0f       	add	r30, r18
    1c02:	f3 1f       	adc	r31, r19
    1c04:	ee 0f       	add	r30, r30
    1c06:	ff 1f       	adc	r31, r31
    1c08:	ee 0f       	add	r30, r30
    1c0a:	ff 1f       	adc	r31, r31
    1c0c:	e9 5c       	subi	r30, 0xC9	; 201
    1c0e:	fe 4f       	sbci	r31, 0xFE	; 254
                && ((mazeArray[current_i_xEastWestLeftRight - 1] [current_j_yNorthSouthUpDown].cellParameters & 0x08) != 0x08))//and next cell "not visited"
                {
                    turnDirection = east; //East(right) walls detected... go left(west)(possibility #8)  
                    break;
                }
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown - 1].weightToCenter
    1c10:	e3 81       	ldd	r30, Z+3	; 0x03
    1c12:	ea 17       	cp	r30, r26
    1c14:	b0 f4       	brcc	.+44     	; 0x1c42 <_Z15chooseDirectionv+0x820>
                    > mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].weightToCenter)//East(right) is closer to the center
                    && ((mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].cellParameters & 0x08) != 0x08))//and next cell "not visited"
    1c16:	fb 01       	movw	r30, r22
    1c18:	ee 0f       	add	r30, r30
    1c1a:	ff 1f       	adc	r31, r31
    1c1c:	e6 0f       	add	r30, r22
    1c1e:	f7 1f       	adc	r31, r23
    1c20:	ee 0f       	add	r30, r30
    1c22:	ff 1f       	adc	r31, r31
    1c24:	e2 0f       	add	r30, r18
    1c26:	f3 1f       	adc	r31, r19
    1c28:	ee 0f       	add	r30, r30
    1c2a:	ff 1f       	adc	r31, r31
    1c2c:	ee 0f       	add	r30, r30
    1c2e:	ff 1f       	adc	r31, r31
    1c30:	e9 5c       	subi	r30, 0xC9	; 201
    1c32:	fe 4f       	sbci	r31, 0xFE	; 254
    1c34:	20 81       	ld	r18, Z
    1c36:	23 fd       	sbrc	r18, 3
    1c38:	04 c0       	rjmp	.+8      	; 0x1c42 <_Z15chooseDirectionv+0x820>
                {
                    turnDirection = west; //West(left) walls detected... go right(east)(possibility #8)  
    1c3a:	80 e1       	ldi	r24, 0x10	; 16
    1c3c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                    break;
    1c40:	08 95       	ret
                }
                if (((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown - 1].cellParameters & 0x08) != 0x08))//west(right) is closer to the center and next cell "not visited"
    1c42:	9c 01       	movw	r18, r24
    1c44:	22 0f       	add	r18, r18
    1c46:	33 1f       	adc	r19, r19
    1c48:	82 0f       	add	r24, r18
    1c4a:	93 1f       	adc	r25, r19
    1c4c:	88 0f       	add	r24, r24
    1c4e:	99 1f       	adc	r25, r25
    1c50:	fc 01       	movw	r30, r24
    1c52:	e4 0f       	add	r30, r20
    1c54:	f5 1f       	adc	r31, r21
    1c56:	ee 0f       	add	r30, r30
    1c58:	ff 1f       	adc	r31, r31
    1c5a:	ee 0f       	add	r30, r30
    1c5c:	ff 1f       	adc	r31, r31
    1c5e:	e9 5c       	subi	r30, 0xC9	; 201
    1c60:	fe 4f       	sbci	r31, 0xFE	; 254
    1c62:	80 81       	ld	r24, Z
    1c64:	83 fd       	sbrc	r24, 3
    1c66:	17 c4       	rjmp	.+2094   	; 0x2496 <_Z15chooseDirectionv+0x1074>
                {
                    turnDirection = south; //West(left) walls detected... go down(south)(possibility #8)  
    1c68:	80 e4       	ldi	r24, 0x40	; 64
    1c6a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                    break;
    1c6e:	08 95       	ret
                * first we check for if we are in a dead-end, 3 walls in front of us
                * , then for 2 walls
                * , then for 1 wall
                * , then no walls
                */
            if (((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0xe0) == 0xe0))//North(top) ,south(bottom), and east(right) walls detected
    1c70:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <current_i_xEastWestLeftRight>
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	20 91 35 01 	lds	r18, 0x0135	; 0x800135 <current_j_yNorthSouthUpDown>
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	fc 01       	movw	r30, r24
    1c7e:	ee 0f       	add	r30, r30
    1c80:	ff 1f       	adc	r31, r31
    1c82:	e8 0f       	add	r30, r24
    1c84:	f9 1f       	adc	r31, r25
    1c86:	ee 0f       	add	r30, r30
    1c88:	ff 1f       	adc	r31, r31
    1c8a:	e2 0f       	add	r30, r18
    1c8c:	f3 1f       	adc	r31, r19
    1c8e:	ee 0f       	add	r30, r30
    1c90:	ff 1f       	adc	r31, r31
    1c92:	ee 0f       	add	r30, r30
    1c94:	ff 1f       	adc	r31, r31
    1c96:	e9 5c       	subi	r30, 0xC9	; 201
    1c98:	fe 4f       	sbci	r31, 0xFE	; 254
    1c9a:	40 81       	ld	r20, Z
    1c9c:	54 2f       	mov	r21, r20
    1c9e:	50 7e       	andi	r21, 0xE0	; 224
    1ca0:	50 3e       	cpi	r21, 0xE0	; 224
    1ca2:	a9 f4       	brne	.+42     	; 0x1cce <_Z15chooseDirectionv+0x8ac>
            {
                turnDirection = west; //North(top) ,south(bottom), and east(right) walls detected... dead-end, turn around (possibility #1)   
    1ca4:	50 e1       	ldi	r21, 0x10	; 16
    1ca6:	50 93 16 01 	sts	0x0116, r21	; 0x800116 <turnDirection>
                mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters |= 0x04;
    1caa:	fc 01       	movw	r30, r24
    1cac:	ee 0f       	add	r30, r30
    1cae:	ff 1f       	adc	r31, r31
    1cb0:	e8 0f       	add	r30, r24
    1cb2:	f9 1f       	adc	r31, r25
    1cb4:	ee 0f       	add	r30, r30
    1cb6:	ff 1f       	adc	r31, r31
    1cb8:	e2 0f       	add	r30, r18
    1cba:	f3 1f       	adc	r31, r19
    1cbc:	ee 0f       	add	r30, r30
    1cbe:	ff 1f       	adc	r31, r31
    1cc0:	ee 0f       	add	r30, r30
    1cc2:	ff 1f       	adc	r31, r31
    1cc4:	e9 5c       	subi	r30, 0xC9	; 201
    1cc6:	fe 4f       	sbci	r31, 0xFE	; 254
    1cc8:	44 60       	ori	r20, 0x04	; 4
    1cca:	40 83       	st	Z, r20
                break;
    1ccc:	08 95       	ret
            }
            else if (((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0xa0) == 0xa0) //there are North(top) and East(right) walls 
    1cce:	54 2f       	mov	r21, r20
    1cd0:	50 7a       	andi	r21, 0xA0	; 160
    1cd2:	50 3a       	cpi	r21, 0xA0	; 160
    1cd4:	c9 f4       	brne	.+50     	; 0x1d08 <_Z15chooseDirectionv+0x8e6>
                && ((mazeArray[current_i_xEastWestLeftRight ] [current_j_yNorthSouthUpDown - 1].cellParameters & 0x08) != 0x08)) //and next cell "not visited"
    1cd6:	fc 01       	movw	r30, r24
    1cd8:	ee 0f       	add	r30, r30
    1cda:	ff 1f       	adc	r31, r31
    1cdc:	e8 0f       	add	r30, r24
    1cde:	f9 1f       	adc	r31, r25
    1ce0:	ee 0f       	add	r30, r30
    1ce2:	ff 1f       	adc	r31, r31
    1ce4:	b9 01       	movw	r22, r18
    1ce6:	61 50       	subi	r22, 0x01	; 1
    1ce8:	71 09       	sbc	r23, r1
    1cea:	e6 0f       	add	r30, r22
    1cec:	f7 1f       	adc	r31, r23
    1cee:	ee 0f       	add	r30, r30
    1cf0:	ff 1f       	adc	r31, r31
    1cf2:	ee 0f       	add	r30, r30
    1cf4:	ff 1f       	adc	r31, r31
    1cf6:	e9 5c       	subi	r30, 0xC9	; 201
    1cf8:	fe 4f       	sbci	r31, 0xFE	; 254
    1cfa:	50 81       	ld	r21, Z
    1cfc:	53 fd       	sbrc	r21, 3
    1cfe:	04 c0       	rjmp	.+8      	; 0x1d08 <_Z15chooseDirectionv+0x8e6>
            {
                turnDirection = south; //North(top) and East(right) walls detected... go right turn (possibility #2)   
    1d00:	80 e4       	ldi	r24, 0x40	; 64
    1d02:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                break;
    1d06:	08 95       	ret
            }
            else if (((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0xc0) == 0xc0) //there are North(top) and South(bottom) walls 
    1d08:	54 2f       	mov	r21, r20
    1d0a:	50 7c       	andi	r21, 0xC0	; 192
    1d0c:	50 3c       	cpi	r21, 0xC0	; 192
    1d0e:	c9 f4       	brne	.+50     	; 0x1d42 <_Z15chooseDirectionv+0x920>
                && ((mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].cellParameters & 0x08) != 0x08)) //and next cell "not visited"
    1d10:	bc 01       	movw	r22, r24
    1d12:	6f 5f       	subi	r22, 0xFF	; 255
    1d14:	7f 4f       	sbci	r23, 0xFF	; 255
    1d16:	fb 01       	movw	r30, r22
    1d18:	ee 0f       	add	r30, r30
    1d1a:	ff 1f       	adc	r31, r31
    1d1c:	e6 0f       	add	r30, r22
    1d1e:	f7 1f       	adc	r31, r23
    1d20:	ee 0f       	add	r30, r30
    1d22:	ff 1f       	adc	r31, r31
    1d24:	e2 0f       	add	r30, r18
    1d26:	f3 1f       	adc	r31, r19
    1d28:	ee 0f       	add	r30, r30
    1d2a:	ff 1f       	adc	r31, r31
    1d2c:	ee 0f       	add	r30, r30
    1d2e:	ff 1f       	adc	r31, r31
    1d30:	e9 5c       	subi	r30, 0xC9	; 201
    1d32:	fe 4f       	sbci	r31, 0xFE	; 254
    1d34:	50 81       	ld	r21, Z
    1d36:	53 fd       	sbrc	r21, 3
    1d38:	04 c0       	rjmp	.+8      	; 0x1d42 <_Z15chooseDirectionv+0x920>
            {
                turnDirection = east; //North(top) and South(bottom) walls detected... go straight (possibility #3)  
    1d3a:	80 e2       	ldi	r24, 0x20	; 32
    1d3c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                break;
    1d40:	08 95       	ret
            }
            else if (((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x60) == 0x60) //there are South(bottom) and East(right) walls 
    1d42:	54 2f       	mov	r21, r20
    1d44:	50 76       	andi	r21, 0x60	; 96
    1d46:	50 36       	cpi	r21, 0x60	; 96
    1d48:	c9 f4       	brne	.+50     	; 0x1d7c <_Z15chooseDirectionv+0x95a>
                && ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown + 1].cellParameters & 0x08) != 0x08)) //and next cell "not visited"
    1d4a:	fc 01       	movw	r30, r24
    1d4c:	ee 0f       	add	r30, r30
    1d4e:	ff 1f       	adc	r31, r31
    1d50:	e8 0f       	add	r30, r24
    1d52:	f9 1f       	adc	r31, r25
    1d54:	ee 0f       	add	r30, r30
    1d56:	ff 1f       	adc	r31, r31
    1d58:	b9 01       	movw	r22, r18
    1d5a:	6f 5f       	subi	r22, 0xFF	; 255
    1d5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d5e:	e6 0f       	add	r30, r22
    1d60:	f7 1f       	adc	r31, r23
    1d62:	ee 0f       	add	r30, r30
    1d64:	ff 1f       	adc	r31, r31
    1d66:	ee 0f       	add	r30, r30
    1d68:	ff 1f       	adc	r31, r31
    1d6a:	e9 5c       	subi	r30, 0xC9	; 201
    1d6c:	fe 4f       	sbci	r31, 0xFE	; 254
    1d6e:	50 81       	ld	r21, Z
    1d70:	53 fd       	sbrc	r21, 3
    1d72:	04 c0       	rjmp	.+8      	; 0x1d7c <_Z15chooseDirectionv+0x95a>
            {
                turnDirection = north; //South(Bottom) and East(right) walls detected... go left turn (possibility #4)  
    1d74:	80 e8       	ldi	r24, 0x80	; 128
    1d76:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                break;
    1d7a:	08 95       	ret
            }

            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x80) == 0x80) //there is a North(top) wall 
    1d7c:	44 23       	and	r20, r20
    1d7e:	0c f0       	brlt	.+2      	; 0x1d82 <_Z15chooseDirectionv+0x960>
    1d80:	55 c0       	rjmp	.+170    	; 0x1e2c <_Z15chooseDirectionv+0xa0a>
            {
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown - 1].weightToCenter
    1d82:	b9 01       	movw	r22, r18
    1d84:	61 50       	subi	r22, 0x01	; 1
    1d86:	71 09       	sbc	r23, r1
                > mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].weightToCenter)//east(right) is closer to the center
    1d88:	ac 01       	movw	r20, r24
    1d8a:	4f 5f       	subi	r20, 0xFF	; 255
    1d8c:	5f 4f       	sbci	r21, 0xFF	; 255
                break;
            }

            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x80) == 0x80) //there is a North(top) wall 
            {
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown - 1].weightToCenter
    1d8e:	dc 01       	movw	r26, r24
    1d90:	aa 0f       	add	r26, r26
    1d92:	bb 1f       	adc	r27, r27
    1d94:	a8 0f       	add	r26, r24
    1d96:	b9 1f       	adc	r27, r25
    1d98:	aa 0f       	add	r26, r26
    1d9a:	bb 1f       	adc	r27, r27
    1d9c:	a6 0f       	add	r26, r22
    1d9e:	b7 1f       	adc	r27, r23
    1da0:	aa 0f       	add	r26, r26
    1da2:	bb 1f       	adc	r27, r27
    1da4:	aa 0f       	add	r26, r26
    1da6:	bb 1f       	adc	r27, r27
    1da8:	a9 5c       	subi	r26, 0xC9	; 201
    1daa:	be 4f       	sbci	r27, 0xFE	; 254
                > mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].weightToCenter)//east(right) is closer to the center
    1dac:	fa 01       	movw	r30, r20
    1dae:	ee 0f       	add	r30, r30
    1db0:	ff 1f       	adc	r31, r31
    1db2:	e4 0f       	add	r30, r20
    1db4:	f5 1f       	adc	r31, r21
    1db6:	ee 0f       	add	r30, r30
    1db8:	ff 1f       	adc	r31, r31
    1dba:	e2 0f       	add	r30, r18
    1dbc:	f3 1f       	adc	r31, r19
    1dbe:	ee 0f       	add	r30, r30
    1dc0:	ff 1f       	adc	r31, r31
    1dc2:	ee 0f       	add	r30, r30
    1dc4:	ff 1f       	adc	r31, r31
    1dc6:	e9 5c       	subi	r30, 0xC9	; 201
    1dc8:	fe 4f       	sbci	r31, 0xFE	; 254
                break;
            }

            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x80) == 0x80) //there is a North(top) wall 
            {
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown - 1].weightToCenter
    1dca:	13 96       	adiw	r26, 0x03	; 3
    1dcc:	ac 91       	ld	r26, X
    1dce:	e3 81       	ldd	r30, Z+3	; 0x03
    1dd0:	ea 17       	cp	r30, r26
    1dd2:	b0 f4       	brcc	.+44     	; 0x1e00 <_Z15chooseDirectionv+0x9de>
                > mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].weightToCenter)//east(right) is closer to the center
                && ((mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].cellParameters & 0x08) != 0x08))//and next cell "not visited"
    1dd4:	fa 01       	movw	r30, r20
    1dd6:	ee 0f       	add	r30, r30
    1dd8:	ff 1f       	adc	r31, r31
    1dda:	e4 0f       	add	r30, r20
    1ddc:	f5 1f       	adc	r31, r21
    1dde:	ee 0f       	add	r30, r30
    1de0:	ff 1f       	adc	r31, r31
    1de2:	e2 0f       	add	r30, r18
    1de4:	f3 1f       	adc	r31, r19
    1de6:	ee 0f       	add	r30, r30
    1de8:	ff 1f       	adc	r31, r31
    1dea:	ee 0f       	add	r30, r30
    1dec:	ff 1f       	adc	r31, r31
    1dee:	e9 5c       	subi	r30, 0xC9	; 201
    1df0:	fe 4f       	sbci	r31, 0xFE	; 254
    1df2:	20 81       	ld	r18, Z
    1df4:	23 fd       	sbrc	r18, 3
    1df6:	04 c0       	rjmp	.+8      	; 0x1e00 <_Z15chooseDirectionv+0x9de>
                {
                    turnDirection = east; //North(top) walls detected... go right(east)(possibility #5)  
    1df8:	80 e2       	ldi	r24, 0x20	; 32
    1dfa:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                    break;
    1dfe:	08 95       	ret
                }
                if (((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown - 1].cellParameters & 0x08) != 0x08))//west(right) is closer to the center and next cell "not visited"
    1e00:	fc 01       	movw	r30, r24
    1e02:	ee 0f       	add	r30, r30
    1e04:	ff 1f       	adc	r31, r31
    1e06:	e8 0f       	add	r30, r24
    1e08:	f9 1f       	adc	r31, r25
    1e0a:	ee 0f       	add	r30, r30
    1e0c:	ff 1f       	adc	r31, r31
    1e0e:	e6 0f       	add	r30, r22
    1e10:	f7 1f       	adc	r31, r23
    1e12:	ee 0f       	add	r30, r30
    1e14:	ff 1f       	adc	r31, r31
    1e16:	ee 0f       	add	r30, r30
    1e18:	ff 1f       	adc	r31, r31
    1e1a:	e9 5c       	subi	r30, 0xC9	; 201
    1e1c:	fe 4f       	sbci	r31, 0xFE	; 254
    1e1e:	80 81       	ld	r24, Z
    1e20:	83 fd       	sbrc	r24, 3
    1e22:	39 c3       	rjmp	.+1650   	; 0x2496 <_Z15chooseDirectionv+0x1074>
                {
                    turnDirection = south; //North(top) walls detected... go left(west)(possibility #5)  
    1e24:	80 e4       	ldi	r24, 0x40	; 64
    1e26:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                    break;
    1e2a:	08 95       	ret
                }
            }

            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x20) == 0x20) //there is a East(right) wall 
    1e2c:	45 ff       	sbrs	r20, 5
    1e2e:	54 c0       	rjmp	.+168    	; 0x1ed8 <_Z15chooseDirectionv+0xab6>
            {
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown + 1].weightToCenter
    1e30:	b9 01       	movw	r22, r18
    1e32:	6f 5f       	subi	r22, 0xFF	; 255
    1e34:	7f 4f       	sbci	r23, 0xFF	; 255
                > mazeArray[current_i_xEastWestLeftRight ] [current_j_yNorthSouthUpDown - 1].weightToCenter)//South(bottom) is closer to the center
    1e36:	21 50       	subi	r18, 0x01	; 1
    1e38:	31 09       	sbc	r19, r1
                }
            }

            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x20) == 0x20) //there is a East(right) wall 
            {
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown + 1].weightToCenter
    1e3a:	ac 01       	movw	r20, r24
    1e3c:	44 0f       	add	r20, r20
    1e3e:	55 1f       	adc	r21, r21
    1e40:	da 01       	movw	r26, r20
    1e42:	a8 0f       	add	r26, r24
    1e44:	b9 1f       	adc	r27, r25
    1e46:	aa 0f       	add	r26, r26
    1e48:	bb 1f       	adc	r27, r27
    1e4a:	a6 0f       	add	r26, r22
    1e4c:	b7 1f       	adc	r27, r23
    1e4e:	aa 0f       	add	r26, r26
    1e50:	bb 1f       	adc	r27, r27
    1e52:	aa 0f       	add	r26, r26
    1e54:	bb 1f       	adc	r27, r27
    1e56:	a9 5c       	subi	r26, 0xC9	; 201
    1e58:	be 4f       	sbci	r27, 0xFE	; 254
                > mazeArray[current_i_xEastWestLeftRight ] [current_j_yNorthSouthUpDown - 1].weightToCenter)//South(bottom) is closer to the center
    1e5a:	fa 01       	movw	r30, r20
    1e5c:	e8 0f       	add	r30, r24
    1e5e:	f9 1f       	adc	r31, r25
    1e60:	ee 0f       	add	r30, r30
    1e62:	ff 1f       	adc	r31, r31
    1e64:	e2 0f       	add	r30, r18
    1e66:	f3 1f       	adc	r31, r19
    1e68:	ee 0f       	add	r30, r30
    1e6a:	ff 1f       	adc	r31, r31
    1e6c:	ee 0f       	add	r30, r30
    1e6e:	ff 1f       	adc	r31, r31
    1e70:	e9 5c       	subi	r30, 0xC9	; 201
    1e72:	fe 4f       	sbci	r31, 0xFE	; 254
                }
            }

            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x20) == 0x20) //there is a East(right) wall 
            {
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown + 1].weightToCenter
    1e74:	13 96       	adiw	r26, 0x03	; 3
    1e76:	5c 91       	ld	r21, X
    1e78:	43 81       	ldd	r20, Z+3	; 0x03
    1e7a:	45 17       	cp	r20, r21
    1e7c:	b8 f4       	brcc	.+46     	; 0x1eac <_Z15chooseDirectionv+0xa8a>
                > mazeArray[current_i_xEastWestLeftRight ] [current_j_yNorthSouthUpDown - 1].weightToCenter)//South(bottom) is closer to the center
                && ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown - 1].cellParameters & 0x08) != 0x08))//and next cell "not visited"
    1e7e:	fc 01       	movw	r30, r24
    1e80:	ee 0f       	add	r30, r30
    1e82:	ff 1f       	adc	r31, r31
    1e84:	e8 0f       	add	r30, r24
    1e86:	f9 1f       	adc	r31, r25
    1e88:	ee 0f       	add	r30, r30
    1e8a:	ff 1f       	adc	r31, r31
    1e8c:	2e 0f       	add	r18, r30
    1e8e:	3f 1f       	adc	r19, r31
    1e90:	f9 01       	movw	r30, r18
    1e92:	ee 0f       	add	r30, r30
    1e94:	ff 1f       	adc	r31, r31
    1e96:	ee 0f       	add	r30, r30
    1e98:	ff 1f       	adc	r31, r31
    1e9a:	e9 5c       	subi	r30, 0xC9	; 201
    1e9c:	fe 4f       	sbci	r31, 0xFE	; 254
    1e9e:	20 81       	ld	r18, Z
    1ea0:	23 fd       	sbrc	r18, 3
    1ea2:	04 c0       	rjmp	.+8      	; 0x1eac <_Z15chooseDirectionv+0xa8a>
                {
                    turnDirection = south; //East(right) walls detected... go down(south)(possibility #6)  
    1ea4:	80 e4       	ldi	r24, 0x40	; 64
    1ea6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                    break;
    1eaa:	08 95       	ret
                }
                if (((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown + 1].cellParameters & 0x08) != 0x08))//west(right) is closer to the center and next cell "not visited"
    1eac:	fc 01       	movw	r30, r24
    1eae:	ee 0f       	add	r30, r30
    1eb0:	ff 1f       	adc	r31, r31
    1eb2:	e8 0f       	add	r30, r24
    1eb4:	f9 1f       	adc	r31, r25
    1eb6:	ee 0f       	add	r30, r30
    1eb8:	ff 1f       	adc	r31, r31
    1eba:	e6 0f       	add	r30, r22
    1ebc:	f7 1f       	adc	r31, r23
    1ebe:	ee 0f       	add	r30, r30
    1ec0:	ff 1f       	adc	r31, r31
    1ec2:	ee 0f       	add	r30, r30
    1ec4:	ff 1f       	adc	r31, r31
    1ec6:	e9 5c       	subi	r30, 0xC9	; 201
    1ec8:	fe 4f       	sbci	r31, 0xFE	; 254
    1eca:	80 81       	ld	r24, Z
    1ecc:	83 fd       	sbrc	r24, 3
    1ece:	e3 c2       	rjmp	.+1478   	; 0x2496 <_Z15chooseDirectionv+0x1074>
                {
                    turnDirection = north; //East(right) walls detected... go up(north)(possibility #6)  
    1ed0:	80 e8       	ldi	r24, 0x80	; 128
    1ed2:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                    break;
    1ed6:	08 95       	ret
                }
            }

            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x40) == 0x40) //there is a South(bottom) wall 
    1ed8:	46 ff       	sbrs	r20, 6
    1eda:	55 c0       	rjmp	.+170    	; 0x1f86 <_Z15chooseDirectionv+0xb64>
            {
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown + 1].weightToCenter
    1edc:	b9 01       	movw	r22, r18
    1ede:	6f 5f       	subi	r22, 0xFF	; 255
    1ee0:	7f 4f       	sbci	r23, 0xFF	; 255
                > mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].weightToCenter)//East(right) is closer to the center
    1ee2:	ac 01       	movw	r20, r24
    1ee4:	4f 5f       	subi	r20, 0xFF	; 255
    1ee6:	5f 4f       	sbci	r21, 0xFF	; 255
                }
            }

            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x40) == 0x40) //there is a South(bottom) wall 
            {
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown + 1].weightToCenter
    1ee8:	dc 01       	movw	r26, r24
    1eea:	aa 0f       	add	r26, r26
    1eec:	bb 1f       	adc	r27, r27
    1eee:	a8 0f       	add	r26, r24
    1ef0:	b9 1f       	adc	r27, r25
    1ef2:	aa 0f       	add	r26, r26
    1ef4:	bb 1f       	adc	r27, r27
    1ef6:	a6 0f       	add	r26, r22
    1ef8:	b7 1f       	adc	r27, r23
    1efa:	aa 0f       	add	r26, r26
    1efc:	bb 1f       	adc	r27, r27
    1efe:	aa 0f       	add	r26, r26
    1f00:	bb 1f       	adc	r27, r27
    1f02:	a9 5c       	subi	r26, 0xC9	; 201
    1f04:	be 4f       	sbci	r27, 0xFE	; 254
                > mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].weightToCenter)//East(right) is closer to the center
    1f06:	fa 01       	movw	r30, r20
    1f08:	ee 0f       	add	r30, r30
    1f0a:	ff 1f       	adc	r31, r31
    1f0c:	e4 0f       	add	r30, r20
    1f0e:	f5 1f       	adc	r31, r21
    1f10:	ee 0f       	add	r30, r30
    1f12:	ff 1f       	adc	r31, r31
    1f14:	e2 0f       	add	r30, r18
    1f16:	f3 1f       	adc	r31, r19
    1f18:	ee 0f       	add	r30, r30
    1f1a:	ff 1f       	adc	r31, r31
    1f1c:	ee 0f       	add	r30, r30
    1f1e:	ff 1f       	adc	r31, r31
    1f20:	e9 5c       	subi	r30, 0xC9	; 201
    1f22:	fe 4f       	sbci	r31, 0xFE	; 254
                }
            }

            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x40) == 0x40) //there is a South(bottom) wall 
            {
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown + 1].weightToCenter
    1f24:	13 96       	adiw	r26, 0x03	; 3
    1f26:	ac 91       	ld	r26, X
    1f28:	e3 81       	ldd	r30, Z+3	; 0x03
    1f2a:	ea 17       	cp	r30, r26
    1f2c:	b0 f4       	brcc	.+44     	; 0x1f5a <_Z15chooseDirectionv+0xb38>
                > mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].weightToCenter)//East(right) is closer to the center
                && ((mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].cellParameters & 0x08) != 0x08))//and next cell "not visited"
    1f2e:	fa 01       	movw	r30, r20
    1f30:	ee 0f       	add	r30, r30
    1f32:	ff 1f       	adc	r31, r31
    1f34:	e4 0f       	add	r30, r20
    1f36:	f5 1f       	adc	r31, r21
    1f38:	ee 0f       	add	r30, r30
    1f3a:	ff 1f       	adc	r31, r31
    1f3c:	e2 0f       	add	r30, r18
    1f3e:	f3 1f       	adc	r31, r19
    1f40:	ee 0f       	add	r30, r30
    1f42:	ff 1f       	adc	r31, r31
    1f44:	ee 0f       	add	r30, r30
    1f46:	ff 1f       	adc	r31, r31
    1f48:	e9 5c       	subi	r30, 0xC9	; 201
    1f4a:	fe 4f       	sbci	r31, 0xFE	; 254
    1f4c:	20 81       	ld	r18, Z
    1f4e:	23 fd       	sbrc	r18, 3
    1f50:	04 c0       	rjmp	.+8      	; 0x1f5a <_Z15chooseDirectionv+0xb38>
                {
                    turnDirection = east; //south(bottom) walls detected... go right(east)(possibility #7)  
    1f52:	80 e2       	ldi	r24, 0x20	; 32
    1f54:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                    break;
    1f58:	08 95       	ret
                }
                if (((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown + 1].cellParameters & 0x08) != 0x08))//west(right) is closer to the center and next cell "not visited"
    1f5a:	fc 01       	movw	r30, r24
    1f5c:	ee 0f       	add	r30, r30
    1f5e:	ff 1f       	adc	r31, r31
    1f60:	e8 0f       	add	r30, r24
    1f62:	f9 1f       	adc	r31, r25
    1f64:	ee 0f       	add	r30, r30
    1f66:	ff 1f       	adc	r31, r31
    1f68:	e6 0f       	add	r30, r22
    1f6a:	f7 1f       	adc	r31, r23
    1f6c:	ee 0f       	add	r30, r30
    1f6e:	ff 1f       	adc	r31, r31
    1f70:	ee 0f       	add	r30, r30
    1f72:	ff 1f       	adc	r31, r31
    1f74:	e9 5c       	subi	r30, 0xC9	; 201
    1f76:	fe 4f       	sbci	r31, 0xFE	; 254
    1f78:	80 81       	ld	r24, Z
    1f7a:	83 fd       	sbrc	r24, 3
    1f7c:	8c c2       	rjmp	.+1304   	; 0x2496 <_Z15chooseDirectionv+0x1074>
                {
                    turnDirection = north; //south(bottom) walls detected... go up(north)(possibility #7)  
    1f7e:	80 e8       	ldi	r24, 0x80	; 128
    1f80:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                    break;
    1f84:	08 95       	ret
                }
            }

            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x00) == 0x00) //are no walls // not happening
            {
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown - 1].weightToCenter
    1f86:	a9 01       	movw	r20, r18
    1f88:	41 50       	subi	r20, 0x01	; 1
    1f8a:	51 09       	sbc	r21, r1
    1f8c:	fc 01       	movw	r30, r24
    1f8e:	ee 0f       	add	r30, r30
    1f90:	ff 1f       	adc	r31, r31
    1f92:	e8 0f       	add	r30, r24
    1f94:	f9 1f       	adc	r31, r25
    1f96:	ee 0f       	add	r30, r30
    1f98:	ff 1f       	adc	r31, r31
    1f9a:	e4 0f       	add	r30, r20
    1f9c:	f5 1f       	adc	r31, r21
    1f9e:	ee 0f       	add	r30, r30
    1fa0:	ff 1f       	adc	r31, r31
    1fa2:	ee 0f       	add	r30, r30
    1fa4:	ff 1f       	adc	r31, r31
    1fa6:	e9 5c       	subi	r30, 0xC9	; 201
    1fa8:	fe 4f       	sbci	r31, 0xFE	; 254
    1faa:	a3 81       	ldd	r26, Z+3	; 0x03
                > mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].weightToCenter)//east(right) is closer to the center
    1fac:	bc 01       	movw	r22, r24
    1fae:	6f 5f       	subi	r22, 0xFF	; 255
    1fb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb2:	fb 01       	movw	r30, r22
    1fb4:	ee 0f       	add	r30, r30
    1fb6:	ff 1f       	adc	r31, r31
    1fb8:	e6 0f       	add	r30, r22
    1fba:	f7 1f       	adc	r31, r23
    1fbc:	ee 0f       	add	r30, r30
    1fbe:	ff 1f       	adc	r31, r31
    1fc0:	e2 0f       	add	r30, r18
    1fc2:	f3 1f       	adc	r31, r19
    1fc4:	ee 0f       	add	r30, r30
    1fc6:	ff 1f       	adc	r31, r31
    1fc8:	ee 0f       	add	r30, r30
    1fca:	ff 1f       	adc	r31, r31
    1fcc:	e9 5c       	subi	r30, 0xC9	; 201
    1fce:	fe 4f       	sbci	r31, 0xFE	; 254
                }
            }

            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x00) == 0x00) //are no walls // not happening
            {
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown - 1].weightToCenter
    1fd0:	e3 81       	ldd	r30, Z+3	; 0x03
    1fd2:	ea 17       	cp	r30, r26
    1fd4:	b0 f4       	brcc	.+44     	; 0x2002 <_Z15chooseDirectionv+0xbe0>
                > mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].weightToCenter)//east(right) is closer to the center
                && ((mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].cellParameters & 0x08) != 0x08))//and next cell "not visited"
    1fd6:	fb 01       	movw	r30, r22
    1fd8:	ee 0f       	add	r30, r30
    1fda:	ff 1f       	adc	r31, r31
    1fdc:	e6 0f       	add	r30, r22
    1fde:	f7 1f       	adc	r31, r23
    1fe0:	ee 0f       	add	r30, r30
    1fe2:	ff 1f       	adc	r31, r31
    1fe4:	e2 0f       	add	r30, r18
    1fe6:	f3 1f       	adc	r31, r19
    1fe8:	ee 0f       	add	r30, r30
    1fea:	ff 1f       	adc	r31, r31
    1fec:	ee 0f       	add	r30, r30
    1fee:	ff 1f       	adc	r31, r31
    1ff0:	e9 5c       	subi	r30, 0xC9	; 201
    1ff2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ff4:	60 81       	ld	r22, Z
    1ff6:	63 fd       	sbrc	r22, 3
    1ff8:	04 c0       	rjmp	.+8      	; 0x2002 <_Z15chooseDirectionv+0xbe0>
                {
                    turnDirection = east; //East(right) walls detected... go straight(east)(possibility #8)  
    1ffa:	80 e2       	ldi	r24, 0x20	; 32
    1ffc:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                    break;
    2000:	08 95       	ret
                }
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown + 1].weightToCenter
    2002:	2f 5f       	subi	r18, 0xFF	; 255
    2004:	3f 4f       	sbci	r19, 0xFF	; 255
    2006:	fc 01       	movw	r30, r24
    2008:	ee 0f       	add	r30, r30
    200a:	ff 1f       	adc	r31, r31
    200c:	e8 0f       	add	r30, r24
    200e:	f9 1f       	adc	r31, r25
    2010:	ee 0f       	add	r30, r30
    2012:	ff 1f       	adc	r31, r31
    2014:	e2 0f       	add	r30, r18
    2016:	f3 1f       	adc	r31, r19
    2018:	ee 0f       	add	r30, r30
    201a:	ff 1f       	adc	r31, r31
    201c:	ee 0f       	add	r30, r30
    201e:	ff 1f       	adc	r31, r31
    2020:	e9 5c       	subi	r30, 0xC9	; 201
    2022:	fe 4f       	sbci	r31, 0xFE	; 254
    2024:	63 81       	ldd	r22, Z+3	; 0x03
    2026:	a6 17       	cp	r26, r22
    2028:	b0 f4       	brcc	.+44     	; 0x2056 <_Z15chooseDirectionv+0xc34>
                    > mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown - 1].weightToCenter)//south(bottom) is closer to the center
                    && ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown - 1].cellParameters & 0x08) != 0x08))//and next cell "not visited"
    202a:	fc 01       	movw	r30, r24
    202c:	ee 0f       	add	r30, r30
    202e:	ff 1f       	adc	r31, r31
    2030:	e8 0f       	add	r30, r24
    2032:	f9 1f       	adc	r31, r25
    2034:	ee 0f       	add	r30, r30
    2036:	ff 1f       	adc	r31, r31
    2038:	e4 0f       	add	r30, r20
    203a:	f5 1f       	adc	r31, r21
    203c:	ee 0f       	add	r30, r30
    203e:	ff 1f       	adc	r31, r31
    2040:	ee 0f       	add	r30, r30
    2042:	ff 1f       	adc	r31, r31
    2044:	e9 5c       	subi	r30, 0xC9	; 201
    2046:	fe 4f       	sbci	r31, 0xFE	; 254
    2048:	40 81       	ld	r20, Z
    204a:	43 fd       	sbrc	r20, 3
    204c:	04 c0       	rjmp	.+8      	; 0x2056 <_Z15chooseDirectionv+0xc34>
                {
                    turnDirection = south; //East(right) walls detected... go right(south)(possibility #8)  
    204e:	80 e4       	ldi	r24, 0x40	; 64
    2050:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                    break;
    2054:	08 95       	ret
                }
                if (((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown + 1].cellParameters & 0x08) != 0x08))//north(up) is closer to the center and next cell "not visited"
    2056:	ac 01       	movw	r20, r24
    2058:	44 0f       	add	r20, r20
    205a:	55 1f       	adc	r21, r21
    205c:	84 0f       	add	r24, r20
    205e:	95 1f       	adc	r25, r21
    2060:	88 0f       	add	r24, r24
    2062:	99 1f       	adc	r25, r25
    2064:	28 0f       	add	r18, r24
    2066:	39 1f       	adc	r19, r25
    2068:	f9 01       	movw	r30, r18
    206a:	ee 0f       	add	r30, r30
    206c:	ff 1f       	adc	r31, r31
    206e:	ee 0f       	add	r30, r30
    2070:	ff 1f       	adc	r31, r31
    2072:	e9 5c       	subi	r30, 0xC9	; 201
    2074:	fe 4f       	sbci	r31, 0xFE	; 254
    2076:	80 81       	ld	r24, Z
    2078:	83 fd       	sbrc	r24, 3
    207a:	0d c2       	rjmp	.+1050   	; 0x2496 <_Z15chooseDirectionv+0x1074>
                {
                    turnDirection = north; //East(right) walls detected... go up(north)(possibility #8)  
    207c:	80 e8       	ldi	r24, 0x80	; 128
    207e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                    break;
    2082:	08 95       	ret
                * first we check for if we are in a dead-end, 3 walls in front of us
                * , then for 2 walls
                * , then for 1 wall
                * , then no walls
                */
            if (((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0xd0) == 0xd0))//North(top), south(bottom), and west(left) walls detected
    2084:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <current_i_xEastWestLeftRight>
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	20 91 35 01 	lds	r18, 0x0135	; 0x800135 <current_j_yNorthSouthUpDown>
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	fc 01       	movw	r30, r24
    2092:	ee 0f       	add	r30, r30
    2094:	ff 1f       	adc	r31, r31
    2096:	e8 0f       	add	r30, r24
    2098:	f9 1f       	adc	r31, r25
    209a:	ee 0f       	add	r30, r30
    209c:	ff 1f       	adc	r31, r31
    209e:	e2 0f       	add	r30, r18
    20a0:	f3 1f       	adc	r31, r19
    20a2:	ee 0f       	add	r30, r30
    20a4:	ff 1f       	adc	r31, r31
    20a6:	ee 0f       	add	r30, r30
    20a8:	ff 1f       	adc	r31, r31
    20aa:	e9 5c       	subi	r30, 0xC9	; 201
    20ac:	fe 4f       	sbci	r31, 0xFE	; 254
    20ae:	40 81       	ld	r20, Z
    20b0:	54 2f       	mov	r21, r20
    20b2:	50 7d       	andi	r21, 0xD0	; 208
    20b4:	50 3d       	cpi	r21, 0xD0	; 208
    20b6:	a9 f4       	brne	.+42     	; 0x20e2 <_Z15chooseDirectionv+0xcc0>
            {
                turnDirection = east; //North(top), south(bottom), and west(left) walls detected... dead-end, turn around (possibility #1)   
    20b8:	50 e2       	ldi	r21, 0x20	; 32
    20ba:	50 93 16 01 	sts	0x0116, r21	; 0x800116 <turnDirection>
                mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters |= 0x04;
    20be:	fc 01       	movw	r30, r24
    20c0:	ee 0f       	add	r30, r30
    20c2:	ff 1f       	adc	r31, r31
    20c4:	e8 0f       	add	r30, r24
    20c6:	f9 1f       	adc	r31, r25
    20c8:	ee 0f       	add	r30, r30
    20ca:	ff 1f       	adc	r31, r31
    20cc:	e2 0f       	add	r30, r18
    20ce:	f3 1f       	adc	r31, r19
    20d0:	ee 0f       	add	r30, r30
    20d2:	ff 1f       	adc	r31, r31
    20d4:	ee 0f       	add	r30, r30
    20d6:	ff 1f       	adc	r31, r31
    20d8:	e9 5c       	subi	r30, 0xC9	; 201
    20da:	fe 4f       	sbci	r31, 0xFE	; 254
    20dc:	44 60       	ori	r20, 0x04	; 4
    20de:	40 83       	st	Z, r20
                break;
    20e0:	08 95       	ret
            }
            else if (((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x90) == 0x90) //there are North(top) and West(left) walls 
    20e2:	54 2f       	mov	r21, r20
    20e4:	50 79       	andi	r21, 0x90	; 144
    20e6:	50 39       	cpi	r21, 0x90	; 144
    20e8:	c9 f4       	brne	.+50     	; 0x211c <_Z15chooseDirectionv+0xcfa>
                && ((mazeArray[current_i_xEastWestLeftRight - 1] [current_j_yNorthSouthUpDown].cellParameters & 0x08) != 0x08)) //and next cell "not visited"
    20ea:	bc 01       	movw	r22, r24
    20ec:	61 50       	subi	r22, 0x01	; 1
    20ee:	71 09       	sbc	r23, r1
    20f0:	fb 01       	movw	r30, r22
    20f2:	ee 0f       	add	r30, r30
    20f4:	ff 1f       	adc	r31, r31
    20f6:	e6 0f       	add	r30, r22
    20f8:	f7 1f       	adc	r31, r23
    20fa:	ee 0f       	add	r30, r30
    20fc:	ff 1f       	adc	r31, r31
    20fe:	e2 0f       	add	r30, r18
    2100:	f3 1f       	adc	r31, r19
    2102:	ee 0f       	add	r30, r30
    2104:	ff 1f       	adc	r31, r31
    2106:	ee 0f       	add	r30, r30
    2108:	ff 1f       	adc	r31, r31
    210a:	e9 5c       	subi	r30, 0xC9	; 201
    210c:	fe 4f       	sbci	r31, 0xFE	; 254
    210e:	50 81       	ld	r21, Z
    2110:	53 fd       	sbrc	r21, 3
    2112:	21 c0       	rjmp	.+66     	; 0x2156 <_Z15chooseDirectionv+0xd34>
            {
                turnDirection = south; //North(top) and West(left) walls detected... go left turn (possibility #2)   
    2114:	80 e4       	ldi	r24, 0x40	; 64
    2116:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                break;
    211a:	08 95       	ret
            }
            else if (((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0xc0) == 0xc0) //there are North(top) and South(bottom) walls 
    211c:	54 2f       	mov	r21, r20
    211e:	50 7c       	andi	r21, 0xC0	; 192
    2120:	50 3c       	cpi	r21, 0xC0	; 192
    2122:	c9 f4       	brne	.+50     	; 0x2156 <_Z15chooseDirectionv+0xd34>
                && ((mazeArray[current_i_xEastWestLeftRight - 1] [current_j_yNorthSouthUpDown].cellParameters & 0x08) != 0x08)) //and next cell "not visited"
    2124:	bc 01       	movw	r22, r24
    2126:	61 50       	subi	r22, 0x01	; 1
    2128:	71 09       	sbc	r23, r1
    212a:	fb 01       	movw	r30, r22
    212c:	ee 0f       	add	r30, r30
    212e:	ff 1f       	adc	r31, r31
    2130:	e6 0f       	add	r30, r22
    2132:	f7 1f       	adc	r31, r23
    2134:	ee 0f       	add	r30, r30
    2136:	ff 1f       	adc	r31, r31
    2138:	e2 0f       	add	r30, r18
    213a:	f3 1f       	adc	r31, r19
    213c:	ee 0f       	add	r30, r30
    213e:	ff 1f       	adc	r31, r31
    2140:	ee 0f       	add	r30, r30
    2142:	ff 1f       	adc	r31, r31
    2144:	e9 5c       	subi	r30, 0xC9	; 201
    2146:	fe 4f       	sbci	r31, 0xFE	; 254
    2148:	50 81       	ld	r21, Z
    214a:	53 fd       	sbrc	r21, 3
    214c:	04 c0       	rjmp	.+8      	; 0x2156 <_Z15chooseDirectionv+0xd34>
            {
                turnDirection = east; //North(top) and South(bottom) walls detected... go straight (possibility #3)  
    214e:	80 e2       	ldi	r24, 0x20	; 32
    2150:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                break;
    2154:	08 95       	ret
            }
            else if (((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x60) == 0x60) //there are South(bottom) and West(left) walls 
    2156:	54 2f       	mov	r21, r20
    2158:	50 76       	andi	r21, 0x60	; 96
    215a:	50 36       	cpi	r21, 0x60	; 96
    215c:	c9 f4       	brne	.+50     	; 0x2190 <_Z15chooseDirectionv+0xd6e>
                && ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown + 1].cellParameters & 0x08) != 0x08)) //and next cell "not visited"
    215e:	fc 01       	movw	r30, r24
    2160:	ee 0f       	add	r30, r30
    2162:	ff 1f       	adc	r31, r31
    2164:	e8 0f       	add	r30, r24
    2166:	f9 1f       	adc	r31, r25
    2168:	ee 0f       	add	r30, r30
    216a:	ff 1f       	adc	r31, r31
    216c:	b9 01       	movw	r22, r18
    216e:	6f 5f       	subi	r22, 0xFF	; 255
    2170:	7f 4f       	sbci	r23, 0xFF	; 255
    2172:	e6 0f       	add	r30, r22
    2174:	f7 1f       	adc	r31, r23
    2176:	ee 0f       	add	r30, r30
    2178:	ff 1f       	adc	r31, r31
    217a:	ee 0f       	add	r30, r30
    217c:	ff 1f       	adc	r31, r31
    217e:	e9 5c       	subi	r30, 0xC9	; 201
    2180:	fe 4f       	sbci	r31, 0xFE	; 254
    2182:	50 81       	ld	r21, Z
    2184:	53 fd       	sbrc	r21, 3
    2186:	04 c0       	rjmp	.+8      	; 0x2190 <_Z15chooseDirectionv+0xd6e>
            {
                turnDirection = north; //South(Bottom) and East(right) walls detected... go left turn (possibility #4)  
    2188:	80 e8       	ldi	r24, 0x80	; 128
    218a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                break;
    218e:	08 95       	ret
            }

            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x80) == 0x80) //there is a North(top) wall 
    2190:	44 23       	and	r20, r20
    2192:	0c f0       	brlt	.+2      	; 0x2196 <_Z15chooseDirectionv+0xd74>
    2194:	55 c0       	rjmp	.+170    	; 0x2240 <_Z15chooseDirectionv+0xe1e>
            {
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown - 1].weightToCenter
    2196:	b9 01       	movw	r22, r18
    2198:	61 50       	subi	r22, 0x01	; 1
    219a:	71 09       	sbc	r23, r1
                > mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].weightToCenter)//east(right) is closer to the center
    219c:	ac 01       	movw	r20, r24
    219e:	4f 5f       	subi	r20, 0xFF	; 255
    21a0:	5f 4f       	sbci	r21, 0xFF	; 255
                break;
            }

            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x80) == 0x80) //there is a North(top) wall 
            {
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown - 1].weightToCenter
    21a2:	dc 01       	movw	r26, r24
    21a4:	aa 0f       	add	r26, r26
    21a6:	bb 1f       	adc	r27, r27
    21a8:	a8 0f       	add	r26, r24
    21aa:	b9 1f       	adc	r27, r25
    21ac:	aa 0f       	add	r26, r26
    21ae:	bb 1f       	adc	r27, r27
    21b0:	a6 0f       	add	r26, r22
    21b2:	b7 1f       	adc	r27, r23
    21b4:	aa 0f       	add	r26, r26
    21b6:	bb 1f       	adc	r27, r27
    21b8:	aa 0f       	add	r26, r26
    21ba:	bb 1f       	adc	r27, r27
    21bc:	a9 5c       	subi	r26, 0xC9	; 201
    21be:	be 4f       	sbci	r27, 0xFE	; 254
                > mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].weightToCenter)//east(right) is closer to the center
    21c0:	fa 01       	movw	r30, r20
    21c2:	ee 0f       	add	r30, r30
    21c4:	ff 1f       	adc	r31, r31
    21c6:	e4 0f       	add	r30, r20
    21c8:	f5 1f       	adc	r31, r21
    21ca:	ee 0f       	add	r30, r30
    21cc:	ff 1f       	adc	r31, r31
    21ce:	e2 0f       	add	r30, r18
    21d0:	f3 1f       	adc	r31, r19
    21d2:	ee 0f       	add	r30, r30
    21d4:	ff 1f       	adc	r31, r31
    21d6:	ee 0f       	add	r30, r30
    21d8:	ff 1f       	adc	r31, r31
    21da:	e9 5c       	subi	r30, 0xC9	; 201
    21dc:	fe 4f       	sbci	r31, 0xFE	; 254
                break;
            }

            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x80) == 0x80) //there is a North(top) wall 
            {
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown - 1].weightToCenter
    21de:	13 96       	adiw	r26, 0x03	; 3
    21e0:	ac 91       	ld	r26, X
    21e2:	e3 81       	ldd	r30, Z+3	; 0x03
    21e4:	ea 17       	cp	r30, r26
    21e6:	b0 f4       	brcc	.+44     	; 0x2214 <_Z15chooseDirectionv+0xdf2>
                > mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].weightToCenter)//east(right) is closer to the center
                && ((mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].cellParameters & 0x08) != 0x08))//and next cell "not visited"
    21e8:	fa 01       	movw	r30, r20
    21ea:	ee 0f       	add	r30, r30
    21ec:	ff 1f       	adc	r31, r31
    21ee:	e4 0f       	add	r30, r20
    21f0:	f5 1f       	adc	r31, r21
    21f2:	ee 0f       	add	r30, r30
    21f4:	ff 1f       	adc	r31, r31
    21f6:	e2 0f       	add	r30, r18
    21f8:	f3 1f       	adc	r31, r19
    21fa:	ee 0f       	add	r30, r30
    21fc:	ff 1f       	adc	r31, r31
    21fe:	ee 0f       	add	r30, r30
    2200:	ff 1f       	adc	r31, r31
    2202:	e9 5c       	subi	r30, 0xC9	; 201
    2204:	fe 4f       	sbci	r31, 0xFE	; 254
    2206:	20 81       	ld	r18, Z
    2208:	23 fd       	sbrc	r18, 3
    220a:	04 c0       	rjmp	.+8      	; 0x2214 <_Z15chooseDirectionv+0xdf2>
                {
                    turnDirection = east; //North(top) walls detected... go right(east)(possibility #5)  
    220c:	80 e2       	ldi	r24, 0x20	; 32
    220e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                    break;
    2212:	08 95       	ret
                }
                if (((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown - 1].cellParameters & 0x08) != 0x08))//west(right) is closer to the center and next cell "not visited"
    2214:	fc 01       	movw	r30, r24
    2216:	ee 0f       	add	r30, r30
    2218:	ff 1f       	adc	r31, r31
    221a:	e8 0f       	add	r30, r24
    221c:	f9 1f       	adc	r31, r25
    221e:	ee 0f       	add	r30, r30
    2220:	ff 1f       	adc	r31, r31
    2222:	e6 0f       	add	r30, r22
    2224:	f7 1f       	adc	r31, r23
    2226:	ee 0f       	add	r30, r30
    2228:	ff 1f       	adc	r31, r31
    222a:	ee 0f       	add	r30, r30
    222c:	ff 1f       	adc	r31, r31
    222e:	e9 5c       	subi	r30, 0xC9	; 201
    2230:	fe 4f       	sbci	r31, 0xFE	; 254
    2232:	80 81       	ld	r24, Z
    2234:	83 fd       	sbrc	r24, 3
    2236:	2f c1       	rjmp	.+606    	; 0x2496 <_Z15chooseDirectionv+0x1074>
                {
                    turnDirection = south; //North(top) walls detected... go left(west)(possibility #5)  
    2238:	80 e4       	ldi	r24, 0x40	; 64
    223a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                    break;
    223e:	08 95       	ret
                }
            }

            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x20) == 0x20) //there is a East(right) wall 
    2240:	45 ff       	sbrs	r20, 5
    2242:	54 c0       	rjmp	.+168    	; 0x22ec <_Z15chooseDirectionv+0xeca>
            {
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown + 1].weightToCenter
    2244:	b9 01       	movw	r22, r18
    2246:	6f 5f       	subi	r22, 0xFF	; 255
    2248:	7f 4f       	sbci	r23, 0xFF	; 255
                > mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown - 1].weightToCenter)//South(bottom) is closer to the center
    224a:	21 50       	subi	r18, 0x01	; 1
    224c:	31 09       	sbc	r19, r1
                }
            }

            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x20) == 0x20) //there is a East(right) wall 
            {
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown + 1].weightToCenter
    224e:	ac 01       	movw	r20, r24
    2250:	44 0f       	add	r20, r20
    2252:	55 1f       	adc	r21, r21
    2254:	da 01       	movw	r26, r20
    2256:	a8 0f       	add	r26, r24
    2258:	b9 1f       	adc	r27, r25
    225a:	aa 0f       	add	r26, r26
    225c:	bb 1f       	adc	r27, r27
    225e:	a6 0f       	add	r26, r22
    2260:	b7 1f       	adc	r27, r23
    2262:	aa 0f       	add	r26, r26
    2264:	bb 1f       	adc	r27, r27
    2266:	aa 0f       	add	r26, r26
    2268:	bb 1f       	adc	r27, r27
    226a:	a9 5c       	subi	r26, 0xC9	; 201
    226c:	be 4f       	sbci	r27, 0xFE	; 254
                > mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown - 1].weightToCenter)//South(bottom) is closer to the center
    226e:	fa 01       	movw	r30, r20
    2270:	e8 0f       	add	r30, r24
    2272:	f9 1f       	adc	r31, r25
    2274:	ee 0f       	add	r30, r30
    2276:	ff 1f       	adc	r31, r31
    2278:	e2 0f       	add	r30, r18
    227a:	f3 1f       	adc	r31, r19
    227c:	ee 0f       	add	r30, r30
    227e:	ff 1f       	adc	r31, r31
    2280:	ee 0f       	add	r30, r30
    2282:	ff 1f       	adc	r31, r31
    2284:	e9 5c       	subi	r30, 0xC9	; 201
    2286:	fe 4f       	sbci	r31, 0xFE	; 254
                }
            }

            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x20) == 0x20) //there is a East(right) wall 
            {
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown + 1].weightToCenter
    2288:	13 96       	adiw	r26, 0x03	; 3
    228a:	5c 91       	ld	r21, X
    228c:	43 81       	ldd	r20, Z+3	; 0x03
    228e:	45 17       	cp	r20, r21
    2290:	b8 f4       	brcc	.+46     	; 0x22c0 <_Z15chooseDirectionv+0xe9e>
                > mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown - 1].weightToCenter)//South(bottom) is closer to the center
                && ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown - 1].cellParameters & 0x08) != 0x08))//and next cell "not visited"
    2292:	fc 01       	movw	r30, r24
    2294:	ee 0f       	add	r30, r30
    2296:	ff 1f       	adc	r31, r31
    2298:	e8 0f       	add	r30, r24
    229a:	f9 1f       	adc	r31, r25
    229c:	ee 0f       	add	r30, r30
    229e:	ff 1f       	adc	r31, r31
    22a0:	2e 0f       	add	r18, r30
    22a2:	3f 1f       	adc	r19, r31
    22a4:	f9 01       	movw	r30, r18
    22a6:	ee 0f       	add	r30, r30
    22a8:	ff 1f       	adc	r31, r31
    22aa:	ee 0f       	add	r30, r30
    22ac:	ff 1f       	adc	r31, r31
    22ae:	e9 5c       	subi	r30, 0xC9	; 201
    22b0:	fe 4f       	sbci	r31, 0xFE	; 254
    22b2:	20 81       	ld	r18, Z
    22b4:	23 fd       	sbrc	r18, 3
    22b6:	04 c0       	rjmp	.+8      	; 0x22c0 <_Z15chooseDirectionv+0xe9e>
                {
                    turnDirection = south; //East(right) walls detected... go down(south)(possibility #6)  
    22b8:	80 e4       	ldi	r24, 0x40	; 64
    22ba:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                    break;
    22be:	08 95       	ret
                }
                if (((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown + 1].cellParameters & 0x08) != 0x08))//west(right) is closer to the center and next cell "not visited"
    22c0:	fc 01       	movw	r30, r24
    22c2:	ee 0f       	add	r30, r30
    22c4:	ff 1f       	adc	r31, r31
    22c6:	e8 0f       	add	r30, r24
    22c8:	f9 1f       	adc	r31, r25
    22ca:	ee 0f       	add	r30, r30
    22cc:	ff 1f       	adc	r31, r31
    22ce:	e6 0f       	add	r30, r22
    22d0:	f7 1f       	adc	r31, r23
    22d2:	ee 0f       	add	r30, r30
    22d4:	ff 1f       	adc	r31, r31
    22d6:	ee 0f       	add	r30, r30
    22d8:	ff 1f       	adc	r31, r31
    22da:	e9 5c       	subi	r30, 0xC9	; 201
    22dc:	fe 4f       	sbci	r31, 0xFE	; 254
    22de:	80 81       	ld	r24, Z
    22e0:	83 fd       	sbrc	r24, 3
    22e2:	d9 c0       	rjmp	.+434    	; 0x2496 <_Z15chooseDirectionv+0x1074>
                {
                    turnDirection = north; //East(right) walls detected... go up(north)(possibility #6)  
    22e4:	80 e8       	ldi	r24, 0x80	; 128
    22e6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                    break;
    22ea:	08 95       	ret
                }
            }

            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x40) == 0x40) //there is a South(bottom) wall 
    22ec:	46 ff       	sbrs	r20, 6
    22ee:	55 c0       	rjmp	.+170    	; 0x239a <_Z15chooseDirectionv+0xf78>
            {
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown + 1].weightToCenter
    22f0:	b9 01       	movw	r22, r18
    22f2:	6f 5f       	subi	r22, 0xFF	; 255
    22f4:	7f 4f       	sbci	r23, 0xFF	; 255
                > mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].weightToCenter)//East(right) is closer to the center
    22f6:	ac 01       	movw	r20, r24
    22f8:	4f 5f       	subi	r20, 0xFF	; 255
    22fa:	5f 4f       	sbci	r21, 0xFF	; 255
                }
            }

            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x40) == 0x40) //there is a South(bottom) wall 
            {
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown + 1].weightToCenter
    22fc:	dc 01       	movw	r26, r24
    22fe:	aa 0f       	add	r26, r26
    2300:	bb 1f       	adc	r27, r27
    2302:	a8 0f       	add	r26, r24
    2304:	b9 1f       	adc	r27, r25
    2306:	aa 0f       	add	r26, r26
    2308:	bb 1f       	adc	r27, r27
    230a:	a6 0f       	add	r26, r22
    230c:	b7 1f       	adc	r27, r23
    230e:	aa 0f       	add	r26, r26
    2310:	bb 1f       	adc	r27, r27
    2312:	aa 0f       	add	r26, r26
    2314:	bb 1f       	adc	r27, r27
    2316:	a9 5c       	subi	r26, 0xC9	; 201
    2318:	be 4f       	sbci	r27, 0xFE	; 254
                > mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].weightToCenter)//East(right) is closer to the center
    231a:	fa 01       	movw	r30, r20
    231c:	ee 0f       	add	r30, r30
    231e:	ff 1f       	adc	r31, r31
    2320:	e4 0f       	add	r30, r20
    2322:	f5 1f       	adc	r31, r21
    2324:	ee 0f       	add	r30, r30
    2326:	ff 1f       	adc	r31, r31
    2328:	e2 0f       	add	r30, r18
    232a:	f3 1f       	adc	r31, r19
    232c:	ee 0f       	add	r30, r30
    232e:	ff 1f       	adc	r31, r31
    2330:	ee 0f       	add	r30, r30
    2332:	ff 1f       	adc	r31, r31
    2334:	e9 5c       	subi	r30, 0xC9	; 201
    2336:	fe 4f       	sbci	r31, 0xFE	; 254
                }
            }

            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x40) == 0x40) //there is a South(bottom) wall 
            {
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown + 1].weightToCenter
    2338:	13 96       	adiw	r26, 0x03	; 3
    233a:	ac 91       	ld	r26, X
    233c:	e3 81       	ldd	r30, Z+3	; 0x03
    233e:	ea 17       	cp	r30, r26
    2340:	b0 f4       	brcc	.+44     	; 0x236e <_Z15chooseDirectionv+0xf4c>
                > mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].weightToCenter)//East(right) is closer to the center
                && ((mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].cellParameters & 0x08) != 0x08))//and next cell "not visited"
    2342:	fa 01       	movw	r30, r20
    2344:	ee 0f       	add	r30, r30
    2346:	ff 1f       	adc	r31, r31
    2348:	e4 0f       	add	r30, r20
    234a:	f5 1f       	adc	r31, r21
    234c:	ee 0f       	add	r30, r30
    234e:	ff 1f       	adc	r31, r31
    2350:	e2 0f       	add	r30, r18
    2352:	f3 1f       	adc	r31, r19
    2354:	ee 0f       	add	r30, r30
    2356:	ff 1f       	adc	r31, r31
    2358:	ee 0f       	add	r30, r30
    235a:	ff 1f       	adc	r31, r31
    235c:	e9 5c       	subi	r30, 0xC9	; 201
    235e:	fe 4f       	sbci	r31, 0xFE	; 254
    2360:	20 81       	ld	r18, Z
    2362:	23 fd       	sbrc	r18, 3
    2364:	04 c0       	rjmp	.+8      	; 0x236e <_Z15chooseDirectionv+0xf4c>
                {
                    turnDirection = east; //south(bottom) walls detected... go right(east)(possibility #7)  
    2366:	80 e2       	ldi	r24, 0x20	; 32
    2368:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                    break;
    236c:	08 95       	ret
                }
                if (((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown + 1].cellParameters & 0x08) != 0x08))//west(right) is closer to the center and next cell "not visited"
    236e:	fc 01       	movw	r30, r24
    2370:	ee 0f       	add	r30, r30
    2372:	ff 1f       	adc	r31, r31
    2374:	e8 0f       	add	r30, r24
    2376:	f9 1f       	adc	r31, r25
    2378:	ee 0f       	add	r30, r30
    237a:	ff 1f       	adc	r31, r31
    237c:	e6 0f       	add	r30, r22
    237e:	f7 1f       	adc	r31, r23
    2380:	ee 0f       	add	r30, r30
    2382:	ff 1f       	adc	r31, r31
    2384:	ee 0f       	add	r30, r30
    2386:	ff 1f       	adc	r31, r31
    2388:	e9 5c       	subi	r30, 0xC9	; 201
    238a:	fe 4f       	sbci	r31, 0xFE	; 254
    238c:	80 81       	ld	r24, Z
    238e:	83 fd       	sbrc	r24, 3
    2390:	82 c0       	rjmp	.+260    	; 0x2496 <_Z15chooseDirectionv+0x1074>
                {
                    turnDirection = north; //south(bottom) walls detected... go up(north)(possibility #7)  
    2392:	80 e8       	ldi	r24, 0x80	; 128
    2394:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                    break;
    2398:	08 95       	ret
                }
            }

            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x00) == 0x00) //are no walls // not happening
            {
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown - 1].weightToCenter
    239a:	a9 01       	movw	r20, r18
    239c:	41 50       	subi	r20, 0x01	; 1
    239e:	51 09       	sbc	r21, r1
    23a0:	fc 01       	movw	r30, r24
    23a2:	ee 0f       	add	r30, r30
    23a4:	ff 1f       	adc	r31, r31
    23a6:	e8 0f       	add	r30, r24
    23a8:	f9 1f       	adc	r31, r25
    23aa:	ee 0f       	add	r30, r30
    23ac:	ff 1f       	adc	r31, r31
    23ae:	e4 0f       	add	r30, r20
    23b0:	f5 1f       	adc	r31, r21
    23b2:	ee 0f       	add	r30, r30
    23b4:	ff 1f       	adc	r31, r31
    23b6:	ee 0f       	add	r30, r30
    23b8:	ff 1f       	adc	r31, r31
    23ba:	e9 5c       	subi	r30, 0xC9	; 201
    23bc:	fe 4f       	sbci	r31, 0xFE	; 254
    23be:	a3 81       	ldd	r26, Z+3	; 0x03
                > mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].weightToCenter)//east(right) is closer to the center
    23c0:	bc 01       	movw	r22, r24
    23c2:	6f 5f       	subi	r22, 0xFF	; 255
    23c4:	7f 4f       	sbci	r23, 0xFF	; 255
    23c6:	fb 01       	movw	r30, r22
    23c8:	ee 0f       	add	r30, r30
    23ca:	ff 1f       	adc	r31, r31
    23cc:	e6 0f       	add	r30, r22
    23ce:	f7 1f       	adc	r31, r23
    23d0:	ee 0f       	add	r30, r30
    23d2:	ff 1f       	adc	r31, r31
    23d4:	e2 0f       	add	r30, r18
    23d6:	f3 1f       	adc	r31, r19
    23d8:	ee 0f       	add	r30, r30
    23da:	ff 1f       	adc	r31, r31
    23dc:	ee 0f       	add	r30, r30
    23de:	ff 1f       	adc	r31, r31
    23e0:	e9 5c       	subi	r30, 0xC9	; 201
    23e2:	fe 4f       	sbci	r31, 0xFE	; 254
                }
            }

            else if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters & 0x00) == 0x00) //are no walls // not happening
            {
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown - 1].weightToCenter
    23e4:	e3 81       	ldd	r30, Z+3	; 0x03
    23e6:	ea 17       	cp	r30, r26
    23e8:	b0 f4       	brcc	.+44     	; 0x2416 <_Z15chooseDirectionv+0xff4>
                > mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].weightToCenter)//east(right) is closer to the center
                && ((mazeArray[current_i_xEastWestLeftRight + 1] [current_j_yNorthSouthUpDown].cellParameters & 0x08) != 0x08))//and next cell "not visited"
    23ea:	fb 01       	movw	r30, r22
    23ec:	ee 0f       	add	r30, r30
    23ee:	ff 1f       	adc	r31, r31
    23f0:	e6 0f       	add	r30, r22
    23f2:	f7 1f       	adc	r31, r23
    23f4:	ee 0f       	add	r30, r30
    23f6:	ff 1f       	adc	r31, r31
    23f8:	e2 0f       	add	r30, r18
    23fa:	f3 1f       	adc	r31, r19
    23fc:	ee 0f       	add	r30, r30
    23fe:	ff 1f       	adc	r31, r31
    2400:	ee 0f       	add	r30, r30
    2402:	ff 1f       	adc	r31, r31
    2404:	e9 5c       	subi	r30, 0xC9	; 201
    2406:	fe 4f       	sbci	r31, 0xFE	; 254
    2408:	60 81       	ld	r22, Z
    240a:	63 fd       	sbrc	r22, 3
    240c:	04 c0       	rjmp	.+8      	; 0x2416 <_Z15chooseDirectionv+0xff4>
                {
                    turnDirection = east; //East(right) walls detected... go straight(east)(possibility #8)  
    240e:	80 e2       	ldi	r24, 0x20	; 32
    2410:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                    break;
    2414:	08 95       	ret
                }
                if ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown + 1].weightToCenter
    2416:	2f 5f       	subi	r18, 0xFF	; 255
    2418:	3f 4f       	sbci	r19, 0xFF	; 255
    241a:	fc 01       	movw	r30, r24
    241c:	ee 0f       	add	r30, r30
    241e:	ff 1f       	adc	r31, r31
    2420:	e8 0f       	add	r30, r24
    2422:	f9 1f       	adc	r31, r25
    2424:	ee 0f       	add	r30, r30
    2426:	ff 1f       	adc	r31, r31
    2428:	e2 0f       	add	r30, r18
    242a:	f3 1f       	adc	r31, r19
    242c:	ee 0f       	add	r30, r30
    242e:	ff 1f       	adc	r31, r31
    2430:	ee 0f       	add	r30, r30
    2432:	ff 1f       	adc	r31, r31
    2434:	e9 5c       	subi	r30, 0xC9	; 201
    2436:	fe 4f       	sbci	r31, 0xFE	; 254
    2438:	63 81       	ldd	r22, Z+3	; 0x03
    243a:	a6 17       	cp	r26, r22
    243c:	b0 f4       	brcc	.+44     	; 0x246a <_Z15chooseDirectionv+0x1048>
                    > mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown - 1].weightToCenter)//south(bottom) is closer to the center
                    && ((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown - 1].cellParameters & 0x08) != 0x08))//and next cell "not visited"
    243e:	fc 01       	movw	r30, r24
    2440:	ee 0f       	add	r30, r30
    2442:	ff 1f       	adc	r31, r31
    2444:	e8 0f       	add	r30, r24
    2446:	f9 1f       	adc	r31, r25
    2448:	ee 0f       	add	r30, r30
    244a:	ff 1f       	adc	r31, r31
    244c:	e4 0f       	add	r30, r20
    244e:	f5 1f       	adc	r31, r21
    2450:	ee 0f       	add	r30, r30
    2452:	ff 1f       	adc	r31, r31
    2454:	ee 0f       	add	r30, r30
    2456:	ff 1f       	adc	r31, r31
    2458:	e9 5c       	subi	r30, 0xC9	; 201
    245a:	fe 4f       	sbci	r31, 0xFE	; 254
    245c:	40 81       	ld	r20, Z
    245e:	43 fd       	sbrc	r20, 3
    2460:	04 c0       	rjmp	.+8      	; 0x246a <_Z15chooseDirectionv+0x1048>
                {
                    turnDirection = south; //East(right) walls detected... go right(south)(possibility #8)  
    2462:	80 e4       	ldi	r24, 0x40	; 64
    2464:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
                    break;
    2468:	08 95       	ret
                }
                if (((mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown + 1].cellParameters & 0x08) != 0x08))//north(up) is closer to the center and next cell "not visited"
    246a:	ac 01       	movw	r20, r24
    246c:	44 0f       	add	r20, r20
    246e:	55 1f       	adc	r21, r21
    2470:	84 0f       	add	r24, r20
    2472:	95 1f       	adc	r25, r21
    2474:	88 0f       	add	r24, r24
    2476:	99 1f       	adc	r25, r25
    2478:	28 0f       	add	r18, r24
    247a:	39 1f       	adc	r19, r25
    247c:	f9 01       	movw	r30, r18
    247e:	ee 0f       	add	r30, r30
    2480:	ff 1f       	adc	r31, r31
    2482:	ee 0f       	add	r30, r30
    2484:	ff 1f       	adc	r31, r31
    2486:	e9 5c       	subi	r30, 0xC9	; 201
    2488:	fe 4f       	sbci	r31, 0xFE	; 254
    248a:	80 81       	ld	r24, Z
    248c:	83 fd       	sbrc	r24, 3
    248e:	03 c0       	rjmp	.+6      	; 0x2496 <_Z15chooseDirectionv+0x1074>
                {
                    turnDirection = north; //East(right) walls detected... go up(north)(possibility #8)  
    2490:	80 e8       	ldi	r24, 0x80	; 128
    2492:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <turnDirection>
    2496:	08 95       	ret

00002498 <_Z17faceNextDirectionv>:

}

void faceNextDirection()
{// makes turn and marks cell as "visited"
    switch (turnDirection)
    2498:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <turnDirection>
    249c:	80 32       	cpi	r24, 0x20	; 32
    249e:	09 f4       	brne	.+2      	; 0x24a2 <_Z17faceNextDirectionv+0xa>
    24a0:	6e c0       	rjmp	.+220    	; 0x257e <_Z17faceNextDirectionv+0xe6>
    24a2:	20 f4       	brcc	.+8      	; 0x24ac <_Z17faceNextDirectionv+0x14>
    24a4:	80 31       	cpi	r24, 0x10	; 16
    24a6:	09 f4       	brne	.+2      	; 0x24aa <_Z17faceNextDirectionv+0x12>
    24a8:	9c c0       	rjmp	.+312    	; 0x25e2 <_Z17faceNextDirectionv+0x14a>
    24aa:	08 95       	ret
    24ac:	80 34       	cpi	r24, 0x40	; 64
    24ae:	a9 f1       	breq	.+106    	; 0x251a <_Z17faceNextDirectionv+0x82>
    24b0:	80 38       	cpi	r24, 0x80	; 128
    24b2:	09 f0       	breq	.+2      	; 0x24b6 <_Z17faceNextDirectionv+0x1e>
    24b4:	c8 c0       	rjmp	.+400    	; 0x2646 <_Z17faceNextDirectionv+0x1ae>
    {
        case north:
			switch (currentDirection)
    24b6:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <currentDirection>
    24ba:	80 32       	cpi	r24, 0x20	; 32
    24bc:	41 f0       	breq	.+16     	; 0x24ce <_Z17faceNextDirectionv+0x36>
    24be:	80 34       	cpi	r24, 0x40	; 64
    24c0:	19 f0       	breq	.+6      	; 0x24c8 <_Z17faceNextDirectionv+0x30>
    24c2:	80 31       	cpi	r24, 0x10	; 16
    24c4:	49 f4       	brne	.+18     	; 0x24d8 <_Z17faceNextDirectionv+0x40>
    24c6:	06 c0       	rjmp	.+12     	; 0x24d4 <_Z17faceNextDirectionv+0x3c>
			{
				case north:
					//already there
				break;
				case south:
					rightEncoder180();
    24c8:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <_Z15rightEncoder180v>
				break;
    24cc:	05 c0       	rjmp	.+10     	; 0x24d8 <_Z17faceNextDirectionv+0x40>
				case east:

					rightEncoderTurn();
    24ce:	0e 94 15 03 	call	0x62a	; 0x62a <_Z16rightEncoderTurnv>
					break;
    24d2:	02 c0       	rjmp	.+4      	; 0x24d8 <_Z17faceNextDirectionv+0x40>
				case west:
					leftEncoderTurn();
    24d4:	0e 94 ad 02 	call	0x55a	; 0x55a <_Z15leftEncoderTurnv>
				break;
				//default:
				///* Your code here */
				//break;
			}
            currentDirection = north;
    24d8:	80 e8       	ldi	r24, 0x80	; 128
    24da:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <currentDirection>
            mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters |= 0x08; // visited
    24de:	20 91 35 01 	lds	r18, 0x0135	; 0x800135 <current_j_yNorthSouthUpDown>
    24e2:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <current_i_xEastWestLeftRight>
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	a2 2f       	mov	r26, r18
    24ea:	b0 e0       	ldi	r27, 0x00	; 0
    24ec:	ac 01       	movw	r20, r24
    24ee:	44 0f       	add	r20, r20
    24f0:	55 1f       	adc	r21, r21
    24f2:	fa 01       	movw	r30, r20
    24f4:	e8 0f       	add	r30, r24
    24f6:	f9 1f       	adc	r31, r25
    24f8:	ee 0f       	add	r30, r30
    24fa:	ff 1f       	adc	r31, r31
    24fc:	ea 0f       	add	r30, r26
    24fe:	fb 1f       	adc	r31, r27
    2500:	ee 0f       	add	r30, r30
    2502:	ff 1f       	adc	r31, r31
    2504:	ee 0f       	add	r30, r30
    2506:	ff 1f       	adc	r31, r31
    2508:	e9 5c       	subi	r30, 0xC9	; 201
    250a:	fe 4f       	sbci	r31, 0xFE	; 254
    250c:	80 81       	ld	r24, Z
    250e:	88 60       	ori	r24, 0x08	; 8
    2510:	80 83       	st	Z, r24
			current_j_yNorthSouthUpDown = current_j_yNorthSouthUpDown + 1; // this changes
    2512:	2f 5f       	subi	r18, 0xFF	; 255
    2514:	20 93 35 01 	sts	0x0135, r18	; 0x800135 <current_j_yNorthSouthUpDown>
            break;
    2518:	08 95       	ret
        case south:
			switch (currentDirection)
    251a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <currentDirection>
    251e:	80 32       	cpi	r24, 0x20	; 32
    2520:	41 f0       	breq	.+16     	; 0x2532 <_Z17faceNextDirectionv+0x9a>
    2522:	80 38       	cpi	r24, 0x80	; 128
    2524:	19 f0       	breq	.+6      	; 0x252c <_Z17faceNextDirectionv+0x94>
    2526:	80 31       	cpi	r24, 0x10	; 16
    2528:	49 f4       	brne	.+18     	; 0x253c <_Z17faceNextDirectionv+0xa4>
    252a:	06 c0       	rjmp	.+12     	; 0x2538 <_Z17faceNextDirectionv+0xa0>
			{
				case north:
					rightEncoder180();				
    252c:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <_Z15rightEncoder180v>
				break;
    2530:	05 c0       	rjmp	.+10     	; 0x253c <_Z17faceNextDirectionv+0xa4>
				case south:
					//already there
				break;
				case east:
					leftEncoderTurn();
    2532:	0e 94 ad 02 	call	0x55a	; 0x55a <_Z15leftEncoderTurnv>
				break;
    2536:	02 c0       	rjmp	.+4      	; 0x253c <_Z17faceNextDirectionv+0xa4>
				case west:
					rightEncoderTurn();
    2538:	0e 94 15 03 	call	0x62a	; 0x62a <_Z16rightEncoderTurnv>
				break;
				//default:
				///* Your code here */
				//break;
			}
			currentDirection = south;
    253c:	80 e4       	ldi	r24, 0x40	; 64
    253e:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <currentDirection>
			mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters |= 0x08; // visited
    2542:	20 91 35 01 	lds	r18, 0x0135	; 0x800135 <current_j_yNorthSouthUpDown>
    2546:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <current_i_xEastWestLeftRight>
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	a2 2f       	mov	r26, r18
    254e:	b0 e0       	ldi	r27, 0x00	; 0
    2550:	ac 01       	movw	r20, r24
    2552:	44 0f       	add	r20, r20
    2554:	55 1f       	adc	r21, r21
    2556:	fa 01       	movw	r30, r20
    2558:	e8 0f       	add	r30, r24
    255a:	f9 1f       	adc	r31, r25
    255c:	ee 0f       	add	r30, r30
    255e:	ff 1f       	adc	r31, r31
    2560:	ea 0f       	add	r30, r26
    2562:	fb 1f       	adc	r31, r27
    2564:	ee 0f       	add	r30, r30
    2566:	ff 1f       	adc	r31, r31
    2568:	ee 0f       	add	r30, r30
    256a:	ff 1f       	adc	r31, r31
    256c:	e9 5c       	subi	r30, 0xC9	; 201
    256e:	fe 4f       	sbci	r31, 0xFE	; 254
    2570:	80 81       	ld	r24, Z
    2572:	88 60       	ori	r24, 0x08	; 8
    2574:	80 83       	st	Z, r24
			current_j_yNorthSouthUpDown = current_j_yNorthSouthUpDown - 1; // this changes
    2576:	21 50       	subi	r18, 0x01	; 1
    2578:	20 93 35 01 	sts	0x0135, r18	; 0x800135 <current_j_yNorthSouthUpDown>
            break;
    257c:	08 95       	ret
        case east:
			switch (currentDirection)
    257e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <currentDirection>
    2582:	80 34       	cpi	r24, 0x40	; 64
    2584:	41 f0       	breq	.+16     	; 0x2596 <_Z17faceNextDirectionv+0xfe>
    2586:	80 38       	cpi	r24, 0x80	; 128
    2588:	19 f0       	breq	.+6      	; 0x2590 <_Z17faceNextDirectionv+0xf8>
    258a:	80 31       	cpi	r24, 0x10	; 16
    258c:	49 f4       	brne	.+18     	; 0x25a0 <_Z17faceNextDirectionv+0x108>
    258e:	06 c0       	rjmp	.+12     	; 0x259c <_Z17faceNextDirectionv+0x104>
			{
				case north:
					rightEncoderTurn();
    2590:	0e 94 15 03 	call	0x62a	; 0x62a <_Z16rightEncoderTurnv>
				break;
    2594:	05 c0       	rjmp	.+10     	; 0x25a0 <_Z17faceNextDirectionv+0x108>
				case south:
					leftEncoderTurn();
    2596:	0e 94 ad 02 	call	0x55a	; 0x55a <_Z15leftEncoderTurnv>
				break;
    259a:	02 c0       	rjmp	.+4      	; 0x25a0 <_Z17faceNextDirectionv+0x108>
				case east:
				//already there
				break;
				case west:
					rightEncoder180();
    259c:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <_Z15rightEncoder180v>
				break;
				//default:
				///* Your code here */
				//break;
			}
			currentDirection = east;
    25a0:	80 e2       	ldi	r24, 0x20	; 32
    25a2:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <currentDirection>
			mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters |= 0x08; // visited
    25a6:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <current_i_xEastWestLeftRight>
    25aa:	a2 2f       	mov	r26, r18
    25ac:	b0 e0       	ldi	r27, 0x00	; 0
    25ae:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <current_j_yNorthSouthUpDown>
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	ad 01       	movw	r20, r26
    25b6:	44 0f       	add	r20, r20
    25b8:	55 1f       	adc	r21, r21
    25ba:	fa 01       	movw	r30, r20
    25bc:	ea 0f       	add	r30, r26
    25be:	fb 1f       	adc	r31, r27
    25c0:	ee 0f       	add	r30, r30
    25c2:	ff 1f       	adc	r31, r31
    25c4:	e8 0f       	add	r30, r24
    25c6:	f9 1f       	adc	r31, r25
    25c8:	ee 0f       	add	r30, r30
    25ca:	ff 1f       	adc	r31, r31
    25cc:	ee 0f       	add	r30, r30
    25ce:	ff 1f       	adc	r31, r31
    25d0:	e9 5c       	subi	r30, 0xC9	; 201
    25d2:	fe 4f       	sbci	r31, 0xFE	; 254
    25d4:	80 81       	ld	r24, Z
    25d6:	88 60       	ori	r24, 0x08	; 8
    25d8:	80 83       	st	Z, r24
			current_i_xEastWestLeftRight = current_i_xEastWestLeftRight + 1; // this changes
    25da:	2f 5f       	subi	r18, 0xFF	; 255
    25dc:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <current_i_xEastWestLeftRight>
            break;
    25e0:	08 95       	ret
        case west:
			switch (currentDirection)
    25e2:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <currentDirection>
    25e6:	80 34       	cpi	r24, 0x40	; 64
    25e8:	41 f0       	breq	.+16     	; 0x25fa <_Z17faceNextDirectionv+0x162>
    25ea:	80 38       	cpi	r24, 0x80	; 128
    25ec:	19 f0       	breq	.+6      	; 0x25f4 <_Z17faceNextDirectionv+0x15c>
    25ee:	80 32       	cpi	r24, 0x20	; 32
    25f0:	49 f4       	brne	.+18     	; 0x2604 <_Z17faceNextDirectionv+0x16c>
    25f2:	06 c0       	rjmp	.+12     	; 0x2600 <_Z17faceNextDirectionv+0x168>
			{
				case north:
					leftEncoderTurn();
    25f4:	0e 94 ad 02 	call	0x55a	; 0x55a <_Z15leftEncoderTurnv>
				break;
    25f8:	05 c0       	rjmp	.+10     	; 0x2604 <_Z17faceNextDirectionv+0x16c>
				case south:
					rightEncoderTurn();
    25fa:	0e 94 15 03 	call	0x62a	; 0x62a <_Z16rightEncoderTurnv>
				break;
    25fe:	02 c0       	rjmp	.+4      	; 0x2604 <_Z17faceNextDirectionv+0x16c>
				case east:

					rightEncoder180();
    2600:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <_Z15rightEncoder180v>
				break;
				//default:
				///* Your code here */
				//break;
			}
			currentDirection = west;
    2604:	80 e1       	ldi	r24, 0x10	; 16
    2606:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <currentDirection>
			mazeArray[current_i_xEastWestLeftRight] [current_j_yNorthSouthUpDown].cellParameters |= 0x08; // visited
    260a:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <current_i_xEastWestLeftRight>
    260e:	e2 2f       	mov	r30, r18
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <current_j_yNorthSouthUpDown>
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	af 01       	movw	r20, r30
    261a:	44 0f       	add	r20, r20
    261c:	55 1f       	adc	r21, r21
    261e:	da 01       	movw	r26, r20
    2620:	ae 0f       	add	r26, r30
    2622:	bf 1f       	adc	r27, r31
    2624:	aa 0f       	add	r26, r26
    2626:	bb 1f       	adc	r27, r27
    2628:	a8 0f       	add	r26, r24
    262a:	b9 1f       	adc	r27, r25
    262c:	aa 0f       	add	r26, r26
    262e:	bb 1f       	adc	r27, r27
    2630:	aa 0f       	add	r26, r26
    2632:	bb 1f       	adc	r27, r27
    2634:	a9 5c       	subi	r26, 0xC9	; 201
    2636:	be 4f       	sbci	r27, 0xFE	; 254
    2638:	fd 01       	movw	r30, r26
    263a:	80 81       	ld	r24, Z
    263c:	88 60       	ori	r24, 0x08	; 8
    263e:	8c 93       	st	X, r24
			current_i_xEastWestLeftRight = current_i_xEastWestLeftRight - 1; // this changes
    2640:	21 50       	subi	r18, 0x01	; 1
    2642:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <current_i_xEastWestLeftRight>
    2646:	08 95       	ret

00002648 <main>:
//}
///	DELETE WHEN REAL MOVEONEBLOCK IS COMPLETED     ********/

int main(void)
{
	RegisterInitialization();
    2648:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z22RegisterInitializationv>
	//greenRXLEDOn();

	while (800 > IRSensorFrontLeft()) //waits for left front sensor to be tripped by user to continue
    264c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_Z17IRSensorFrontLeftv>
    2650:	80 32       	cpi	r24, 0x20	; 32
    2652:	93 40       	sbci	r25, 0x03	; 3
    2654:	28 f4       	brcc	.+10     	; 0x2660 <main+0x18>
	{
		timerInMilliseconds(10);
    2656:	8a e0       	ldi	r24, 0x0A	; 10
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
int main(void)
{
	RegisterInitialization();
	//greenRXLEDOn();

	while (800 > IRSensorFrontLeft()) //waits for left front sensor to be tripped by user to continue
    265e:	f6 cf       	rjmp	.-20     	; 0x264c <main+0x4>
	{
		timerInMilliseconds(10);
	}

	mazeCellInitialize();
    2660:	0e 94 6e 08 	call	0x10dc	; 0x10dc <_Z18mazeCellInitializev>

    while (1) 
    { 


		timerInMilliseconds(1000);// can't do more than 5 seconds
    2664:	88 ee       	ldi	r24, 0xE8	; 232
    2666:	93 e0       	ldi	r25, 0x03	; 3
    2668:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>

	    moveOneBlock();
    266c:	0e 94 c0 07 	call	0xf80	; 0xf80 <_Z12moveOneBlockv>
		markWalls();
    2670:	0e 94 a6 08 	call	0x114c	; 0x114c <_Z9markWallsv>
	    chooseDirection();
    2674:	0e 94 11 0a 	call	0x1422	; 0x1422 <_Z15chooseDirectionv>
		faceNextDirection();
    2678:	0e 94 4c 12 	call	0x2498	; 0x2498 <_Z17faceNextDirectionv>
    267c:	f3 cf       	rjmp	.-26     	; 0x2664 <main+0x1c>

0000267e <_GLOBAL__sub_I_recievedChar>:
uint8_t leftBaseSpeed = 50;
uint8_t rightBaseSpeed = 50;
uint16_t Paway = 20;// P coefficient// change with different light
uint16_t Ptoward = 10;// change with different light
uint16_t D = 10;// change with different light
uint16_t errorMax = ((rightBaseSpeed - 5) * Paway);//this is the max difference between 255 or 0 and Base speed, * the Propotional divider
    267e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <rightBaseSpeed>
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	05 97       	sbiw	r24, 0x05	; 5
    2686:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <Paway>
    268a:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <Paway+0x1>
    268e:	84 9f       	mul	r24, r20
    2690:	90 01       	movw	r18, r0
    2692:	85 9f       	mul	r24, r21
    2694:	30 0d       	add	r19, r0
    2696:	94 9f       	mul	r25, r20
    2698:	30 0d       	add	r19, r0
    269a:	11 24       	eor	r1, r1
    269c:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <errorMax+0x1>
    26a0:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <errorMax>
    26a4:	08 95       	ret

000026a6 <__udivmodhi4>:
    26a6:	aa 1b       	sub	r26, r26
    26a8:	bb 1b       	sub	r27, r27
    26aa:	51 e1       	ldi	r21, 0x11	; 17
    26ac:	07 c0       	rjmp	.+14     	; 0x26bc <__udivmodhi4_ep>

000026ae <__udivmodhi4_loop>:
    26ae:	aa 1f       	adc	r26, r26
    26b0:	bb 1f       	adc	r27, r27
    26b2:	a6 17       	cp	r26, r22
    26b4:	b7 07       	cpc	r27, r23
    26b6:	10 f0       	brcs	.+4      	; 0x26bc <__udivmodhi4_ep>
    26b8:	a6 1b       	sub	r26, r22
    26ba:	b7 0b       	sbc	r27, r23

000026bc <__udivmodhi4_ep>:
    26bc:	88 1f       	adc	r24, r24
    26be:	99 1f       	adc	r25, r25
    26c0:	5a 95       	dec	r21
    26c2:	a9 f7       	brne	.-22     	; 0x26ae <__udivmodhi4_loop>
    26c4:	80 95       	com	r24
    26c6:	90 95       	com	r25
    26c8:	bc 01       	movw	r22, r24
    26ca:	cd 01       	movw	r24, r26
    26cc:	08 95       	ret

000026ce <__tablejump2__>:
    26ce:	ee 0f       	add	r30, r30
    26d0:	ff 1f       	adc	r31, r31
    26d2:	05 90       	lpm	r0, Z+
    26d4:	f4 91       	lpm	r31, Z
    26d6:	e0 2d       	mov	r30, r0
    26d8:	09 94       	ijmp

000026da <eeprom_update_word>:
    26da:	01 96       	adiw	r24, 0x01	; 1
    26dc:	27 2f       	mov	r18, r23
    26de:	0e 94 74 13 	call	0x26e8	; 0x26e8 <eeprom_update_r18>
    26e2:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <eeprom_update_byte>

000026e6 <eeprom_update_byte>:
    26e6:	26 2f       	mov	r18, r22

000026e8 <eeprom_update_r18>:
    26e8:	f9 99       	sbic	0x1f, 1	; 31
    26ea:	fe cf       	rjmp	.-4      	; 0x26e8 <eeprom_update_r18>
    26ec:	92 bd       	out	0x22, r25	; 34
    26ee:	81 bd       	out	0x21, r24	; 33
    26f0:	f8 9a       	sbi	0x1f, 0	; 31
    26f2:	01 97       	sbiw	r24, 0x01	; 1
    26f4:	00 b4       	in	r0, 0x20	; 32
    26f6:	02 16       	cp	r0, r18
    26f8:	39 f0       	breq	.+14     	; 0x2708 <eeprom_update_r18+0x20>
    26fa:	1f ba       	out	0x1f, r1	; 31
    26fc:	20 bd       	out	0x20, r18	; 32
    26fe:	0f b6       	in	r0, 0x3f	; 63
    2700:	f8 94       	cli
    2702:	fa 9a       	sbi	0x1f, 2	; 31
    2704:	f9 9a       	sbi	0x1f, 1	; 31
    2706:	0f be       	out	0x3f, r0	; 63
    2708:	08 95       	ret

0000270a <_exit>:
    270a:	f8 94       	cli

0000270c <__stop_program>:
    270c:	ff cf       	rjmp	.-2      	; 0x270c <__stop_program>
