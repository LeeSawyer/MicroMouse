
gyroTurns.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000560  000005f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000560  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080010c  0080010c  00000600  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000600  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000630  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000030f3  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000983  00000000  00000000  0000395b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e47  00000000  00000000  000042de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006a0  00000000  00000000  00006128  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001023  00000000  00000000  000067c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000019d7  00000000  00000000  000077eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005a8  00000000  00000000  000091c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__vector_3>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_5>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	6c 02       	muls	r22, r28

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	e0 e6       	ldi	r30, 0x60	; 96
  7e:	f5 e0       	ldi	r31, 0x05	; 5
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	ac 30       	cpi	r26, 0x0C	; 12
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	ac e0       	ldi	r26, 0x0C	; 12
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	a9 31       	cpi	r26, 0x19	; 25
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 a8 02 	call	0x550	; 0x550 <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 59 02 	call	0x4b2	; 0x4b2 <main>
  b6:	0c 94 ae 02 	jmp	0x55c	; 0x55c <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <_Z22RegisterInitializationv>:
}

void blueTXLEDOff()
{
		//also 0x01 = 0b00000001 = (1 << PORTD0) = (1 << 1) = _BV(1) = 1
		PORTD &= ~(1 << PORTD0); //port D0,  TX LED blue
  be:	87 b1       	in	r24, 0x07	; 7
  c0:	88 61       	ori	r24, 0x18	; 24
  c2:	87 b9       	out	0x07, r24	; 7
  c4:	83 e6       	ldi	r24, 0x63	; 99
  c6:	8a b9       	out	0x0a, r24	; 10
  c8:	87 b1       	in	r24, 0x07	; 7
  ca:	87 7d       	andi	r24, 0xD7	; 215
  cc:	87 b9       	out	0x07, r24	; 7
  ce:	84 b1       	in	r24, 0x04	; 4
  d0:	86 60       	ori	r24, 0x06	; 6
  d2:	84 b9       	out	0x04, r24	; 4
  d4:	21 e0       	ldi	r18, 0x01	; 1
  d6:	25 b9       	out	0x05, r18	; 5
  d8:	30 e8       	ldi	r19, 0x80	; 128
  da:	3b b9       	out	0x0b, r19	; 11
  dc:	83 ea       	ldi	r24, 0xA3	; 163
  de:	84 bd       	out	0x24, r24	; 36
  e0:	95 e0       	ldi	r25, 0x05	; 5
  e2:	95 bd       	out	0x25, r25	; 37
  e4:	81 ea       	ldi	r24, 0xA1	; 161
  e6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  ea:	8d e0       	ldi	r24, 0x0D	; 13
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f0:	e1 eb       	ldi	r30, 0xB1	; 177
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	87 60       	ori	r24, 0x07	; 7
  f8:	80 83       	st	Z, r24
  fa:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
  fe:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 102:	87 e6       	ldi	r24, 0x67	; 103
 104:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 108:	86 e0       	ldi	r24, 0x06	; 6
 10a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 10e:	84 e8       	ldi	r24, 0x84	; 132
 110:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 114:	87 e0       	ldi	r24, 0x07	; 7
 116:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
 11a:	30 93 6d 00 	sts	0x006D, r19	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
 11e:	20 93 6b 00 	sts	0x006B, r18	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
 122:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
 126:	78 94       	sei
 128:	08 95       	ret

0000012a <__vector_3>:
 12a:	1f 92       	push	r1
 12c:	0f 92       	push	r0
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	0f 92       	push	r0
 132:	11 24       	eor	r1, r1
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
 138:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <rightEncoderAPos>
 13c:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <rightEncoderAPos+0x1>
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <rightEncoderAPos+0x1>
 146:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <rightEncoderAPos>
 14a:	9f 91       	pop	r25
 14c:	8f 91       	pop	r24
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <__vector_5>:
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
 166:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <rightEncoderAPos>
 16a:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <rightEncoderAPos+0x1>
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <rightEncoderAPos+0x1>
 174:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <rightEncoderAPos>
 178:	9f 91       	pop	r25
 17a:	8f 91       	pop	r24
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <_Z19timerInMillisecondsj>:
 186:	0f 93       	push	r16
 188:	1f 93       	push	r17
 18a:	8c 01       	movw	r16, r24
 18c:	00 0f       	add	r16, r16
 18e:	11 1f       	adc	r17, r17
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	08 0f       	add	r16, r24
 19e:	19 1f       	adc	r17, r25
 1a0:	20 e0       	ldi	r18, 0x00	; 0
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	40 e0       	ldi	r20, 0x00	; 0
 1a6:	50 e0       	ldi	r21, 0x00	; 0
 1a8:	ba 01       	movw	r22, r20
 1aa:	e2 eb       	ldi	r30, 0xB2	; 178
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	81 3a       	cpi	r24, 0xA1	; 161
 1b2:	30 f4       	brcc	.+12     	; 0x1c0 <_Z19timerInMillisecondsj+0x3a>
 1b4:	80 81       	ld	r24, Z
 1b6:	8f 5f       	subi	r24, 0xFF	; 255
 1b8:	80 83       	st	Z, r24
 1ba:	80 81       	ld	r24, Z
 1bc:	81 3a       	cpi	r24, 0xA1	; 161
 1be:	d0 f3       	brcs	.-12     	; 0x1b4 <_Z19timerInMillisecondsj+0x2e>
 1c0:	10 82       	st	Z, r1
 1c2:	4f 5f       	subi	r20, 0xFF	; 255
 1c4:	5f 4f       	sbci	r21, 0xFF	; 255
 1c6:	6f 4f       	sbci	r22, 0xFF	; 255
 1c8:	7f 4f       	sbci	r23, 0xFF	; 255
 1ca:	04 17       	cp	r16, r20
 1cc:	15 07       	cpc	r17, r21
 1ce:	26 07       	cpc	r18, r22
 1d0:	37 07       	cpc	r19, r23
 1d2:	68 f7       	brcc	.-38     	; 0x1ae <_Z19timerInMillisecondsj+0x28>
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	1f 91       	pop	r17
 1da:	0f 91       	pop	r16
 1dc:	08 95       	ret

000001de <_Z10frontLEDOnv>:
 1de:	43 9a       	sbi	0x08, 3	; 8
 1e0:	08 95       	ret

000001e2 <_Z11frontLEDOffv>:
 1e2:	43 98       	cbi	0x08, 3	; 8
 1e4:	08 95       	ret

000001e6 <_Z17IRSensorFrontLeftv>:
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
 1f2:	82 e4       	ldi	r24, 0x42	; 66
 1f4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 1f8:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z11frontLEDOffv>
 1fc:	ea e7       	ldi	r30, 0x7A	; 122
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	80 64       	ori	r24, 0x40	; 64
 204:	80 83       	st	Z, r24
 206:	80 81       	ld	r24, Z
 208:	86 fd       	sbrc	r24, 6
 20a:	fd cf       	rjmp	.-6      	; 0x206 <_Z17IRSensorFrontLeftv+0x20>
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
 214:	ea e7       	ldi	r30, 0x7A	; 122
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	80 64       	ori	r24, 0x40	; 64
 21c:	80 83       	st	Z, r24
 21e:	80 81       	ld	r24, Z
 220:	86 fd       	sbrc	r24, 6
 222:	fd cf       	rjmp	.-6      	; 0x21e <_Z17IRSensorFrontLeftv+0x38>
 224:	c0 91 78 00 	lds	r28, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 228:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 22c:	d0 e0       	ldi	r29, 0x00	; 0
 22e:	d8 2b       	or	r29, r24
 230:	0e 94 ef 00 	call	0x1de	; 0x1de <_Z10frontLEDOnv>
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
 23c:	ea e7       	ldi	r30, 0x7A	; 122
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	80 64       	ori	r24, 0x40	; 64
 244:	80 83       	st	Z, r24
 246:	80 81       	ld	r24, Z
 248:	86 fd       	sbrc	r24, 6
 24a:	fd cf       	rjmp	.-6      	; 0x246 <_Z17IRSensorFrontLeftv+0x60>
 24c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z11frontLEDOffv>
 250:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 254:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	92 2b       	or	r25, r18
 25c:	8c 1b       	sub	r24, r28
 25e:	9d 0b       	sbc	r25, r29
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	08 95       	ret

00000266 <_Z22startGyroADCConversionv>:
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
 26e:	80 e4       	ldi	r24, 0x40	; 64
 270:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 274:	ea e7       	ldi	r30, 0x7A	; 122
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	80 64       	ori	r24, 0x40	; 64
 27c:	80 83       	st	Z, r24
 27e:	80 81       	ld	r24, Z
 280:	86 fd       	sbrc	r24, 6
 282:	fd cf       	rjmp	.-6      	; 0x27e <_Z22startGyroADCConversionv+0x18>
 284:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 288:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	92 2b       	or	r25, r18
 290:	08 95       	ret

00000292 <_Z13rightGyroTurnv>:
 292:	df 92       	push	r13
 294:	ef 92       	push	r14
 296:	ff 92       	push	r15
 298:	0f 93       	push	r16
 29a:	1f 93       	push	r17
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <gyroBreakWhileLoopCounter+0x1>
 2a4:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <gyroBreakWhileLoopCounter>
 2a8:	88 ed       	ldi	r24, 0xD8	; 216
 2aa:	95 ef       	ldi	r25, 0xF5	; 245
 2ac:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <rightTurnValue+0x1>
 2b0:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <rightTurnValue>
 2b4:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2b8:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 2bc:	82 e3       	ldi	r24, 0x32	; 50
 2be:	87 bd       	out	0x27, r24	; 39
 2c0:	82 e3       	ldi	r24, 0x32	; 50
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 2c8:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 2cc:	18 bc       	out	0x28, r1	; 40
 2ce:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <gyroBreakWhileLoopCounter>
 2d2:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <gyroBreakWhileLoopCounter+0x1>
 2d6:	84 36       	cpi	r24, 0x64	; 100
 2d8:	91 05       	cpc	r25, r1
 2da:	08 f0       	brcs	.+2      	; 0x2de <_Z13rightGyroTurnv+0x4c>
 2dc:	d8 c0       	rjmp	.+432    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 2de:	0f 2e       	mov	r0, r31
 2e0:	f2 e3       	ldi	r31, 0x32	; 50
 2e2:	ef 2e       	mov	r14, r31
 2e4:	f1 2c       	mov	r15, r1
 2e6:	f0 2d       	mov	r31, r0
 2e8:	0f 2e       	mov	r0, r31
 2ea:	f2 e3       	ldi	r31, 0x32	; 50
 2ec:	df 2e       	mov	r13, r31
 2ee:	f0 2d       	mov	r31, r0
 2f0:	0a e8       	ldi	r16, 0x8A	; 138
 2f2:	10 e0       	ldi	r17, 0x00	; 0
 2f4:	c8 e8       	ldi	r28, 0x88	; 136
 2f6:	d0 e0       	ldi	r29, 0x00	; 0
 2f8:	0e 94 33 01 	call	0x266	; 0x266 <_Z22startGyroADCConversionv>
 2fc:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <gyroValue+0x1>
 300:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <gyroValue>
 304:	82 33       	cpi	r24, 0x32	; 50
 306:	21 e0       	ldi	r18, 0x01	; 1
 308:	92 07       	cpc	r25, r18
 30a:	60 f0       	brcs	.+24     	; 0x324 <_Z13rightGyroTurnv+0x92>
 30c:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <rightTurnValue>
 310:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <rightTurnValue+0x1>
 314:	23 5d       	subi	r18, 0xD3	; 211
 316:	3e 4f       	sbci	r19, 0xFE	; 254
 318:	28 1b       	sub	r18, r24
 31a:	39 0b       	sbc	r19, r25
 31c:	30 93 08 01 	sts	0x0108, r19	; 0x800108 <rightTurnValue+0x1>
 320:	20 93 07 01 	sts	0x0107, r18	; 0x800107 <rightTurnValue>
 324:	89 32       	cpi	r24, 0x29	; 41
 326:	41 e0       	ldi	r20, 0x01	; 1
 328:	94 07       	cpc	r25, r20
 32a:	68 f4       	brcc	.+26     	; 0x346 <_Z13rightGyroTurnv+0xb4>
 32c:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <rightTurnValue>
 330:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <rightTurnValue+0x1>
 334:	23 5d       	subi	r18, 0xD3	; 211
 336:	3e 4f       	sbci	r19, 0xFE	; 254
 338:	f9 01       	movw	r30, r18
 33a:	e8 1b       	sub	r30, r24
 33c:	f9 0b       	sbc	r31, r25
 33e:	f0 93 08 01 	sts	0x0108, r31	; 0x800108 <rightTurnValue+0x1>
 342:	e0 93 07 01 	sts	0x0107, r30	; 0x800107 <rightTurnValue>
 346:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <rightTurnValue>
 34a:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <rightTurnValue+0x1>
 34e:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <oldmotorSpeed>
 352:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <oldmotorSpeed+0x1>
 356:	ac 01       	movw	r20, r24
 358:	42 1b       	sub	r20, r18
 35a:	53 0b       	sbc	r21, r19
 35c:	9a 01       	movw	r18, r20
 35e:	50 93 11 01 	sts	0x0111, r21	; 0x800111 <errormotorSpeedDiff+0x1>
 362:	40 93 10 01 	sts	0x0110, r20	; 0x800110 <errormotorSpeedDiff>
 366:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <PGyroTurn>
 36a:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <PGyroTurn+0x1>
 36e:	0e 94 94 02 	call	0x528	; 0x528 <__divmodhi4>
 372:	fb 01       	movw	r30, r22
 374:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <DGyroTurn>
 378:	70 91 04 01 	lds	r23, 0x0104	; 0x800104 <DGyroTurn+0x1>
 37c:	c9 01       	movw	r24, r18
 37e:	0e 94 94 02 	call	0x528	; 0x528 <__divmodhi4>
 382:	6e 0f       	add	r22, r30
 384:	7f 1f       	adc	r23, r31
 386:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <motorSpeed16Bit+0x1>
 38a:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <motorSpeed16Bit>
 38e:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <oldmotorSpeed+0x1>
 392:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <oldmotorSpeed>
 396:	63 33       	cpi	r22, 0x33	; 51
 398:	71 05       	cpc	r23, r1
 39a:	84 f0       	brlt	.+32     	; 0x3bc <_Z13rightGyroTurnv+0x12a>
 39c:	f0 92 15 01 	sts	0x0115, r15	; 0x800115 <motorSpeed16Bit+0x1>
 3a0:	e0 92 14 01 	sts	0x0114, r14	; 0x800114 <motorSpeed16Bit>
 3a4:	d0 92 16 01 	sts	0x0116, r13	; 0x800116 <motorSpeed8Bit>
 3a8:	f8 01       	movw	r30, r16
 3aa:	11 82       	std	Z+1, r1	; 0x01
 3ac:	10 82       	st	Z, r1
 3ae:	d8 bc       	out	0x28, r13	; 40
 3b0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <motorSpeed8Bit>
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	99 83       	std	Y+1, r25	; 0x01
 3b8:	88 83       	st	Y, r24
 3ba:	17 bc       	out	0x27, r1	; 39
 3bc:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <motorSpeed16Bit>
 3c0:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <motorSpeed16Bit+0x1>
 3c4:	8e 3c       	cpi	r24, 0xCE	; 206
 3c6:	9f 4f       	sbci	r25, 0xFF	; 255
 3c8:	84 f4       	brge	.+32     	; 0x3ea <_Z13rightGyroTurnv+0x158>
 3ca:	f0 92 15 01 	sts	0x0115, r15	; 0x800115 <motorSpeed16Bit+0x1>
 3ce:	e0 92 14 01 	sts	0x0114, r14	; 0x800114 <motorSpeed16Bit>
 3d2:	d0 92 16 01 	sts	0x0116, r13	; 0x800116 <motorSpeed8Bit>
 3d6:	19 82       	std	Y+1, r1	; 0x01
 3d8:	18 82       	st	Y, r1
 3da:	d7 bc       	out	0x27, r13	; 39
 3dc:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <motorSpeed8Bit>
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	f8 01       	movw	r30, r16
 3e4:	91 83       	std	Z+1, r25	; 0x01
 3e6:	80 83       	st	Z, r24
 3e8:	18 bc       	out	0x28, r1	; 40
 3ea:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <motorSpeed16Bit>
 3ee:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <motorSpeed16Bit+0x1>
 3f2:	9c 01       	movw	r18, r24
 3f4:	20 5d       	subi	r18, 0xD0	; 208
 3f6:	3f 4f       	sbci	r19, 0xFF	; 255
 3f8:	21 36       	cpi	r18, 0x61	; 97
 3fa:	31 05       	cpc	r19, r1
 3fc:	60 f5       	brcc	.+88     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 3fe:	18 16       	cp	r1, r24
 400:	19 06       	cpc	r1, r25
 402:	64 f4       	brge	.+24     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 404:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <motorSpeed8Bit>
 408:	f8 01       	movw	r30, r16
 40a:	11 82       	std	Z+1, r1	; 0x01
 40c:	10 82       	st	Z, r1
 40e:	88 bd       	out	0x28, r24	; 40
 410:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <motorSpeed8Bit>
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	99 83       	std	Y+1, r25	; 0x01
 418:	88 83       	st	Y, r24
 41a:	17 bc       	out	0x27, r1	; 39
 41c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <motorSpeed16Bit>
 420:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <motorSpeed16Bit+0x1>
 424:	99 23       	and	r25, r25
 426:	bc f4       	brge	.+46     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 428:	9c 01       	movw	r18, r24
 42a:	99 23       	and	r25, r25
 42c:	24 f4       	brge	.+8      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 42e:	22 27       	eor	r18, r18
 430:	33 27       	eor	r19, r19
 432:	28 1b       	sub	r18, r24
 434:	39 0b       	sbc	r19, r25
 436:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <motorSpeed16Bit>
 43a:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <motorSpeed16Bit+0x1>
 43e:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <motorSpeed8Bit>
 442:	19 82       	std	Y+1, r1	; 0x01
 444:	18 82       	st	Y, r1
 446:	27 bd       	out	0x27, r18	; 39
 448:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <motorSpeed8Bit>
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	f8 01       	movw	r30, r16
 450:	91 83       	std	Z+1, r25	; 0x01
 452:	80 83       	st	Z, r24
 454:	18 bc       	out	0x28, r1	; 40
 456:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <motorSpeed16Bit>
 45a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <motorSpeed16Bit+0x1>
 45e:	0e 96       	adiw	r24, 0x0e	; 14
 460:	4d 97       	sbiw	r24, 0x1d	; 29
 462:	48 f4       	brcc	.+18     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 464:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <gyroBreakWhileLoopCounter>
 468:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <gyroBreakWhileLoopCounter+0x1>
 46c:	01 96       	adiw	r24, 0x01	; 1
 46e:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <gyroBreakWhileLoopCounter+0x1>
 472:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <gyroBreakWhileLoopCounter>
 476:	87 e0       	ldi	r24, 0x07	; 7
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
 47e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <gyroBreakWhileLoopCounter>
 482:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <gyroBreakWhileLoopCounter+0x1>
 486:	84 36       	cpi	r24, 0x64	; 100
 488:	91 05       	cpc	r25, r1
 48a:	08 f4       	brcc	.+2      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 48c:	35 cf       	rjmp	.-406    	; 0x2f8 <_Z13rightGyroTurnv+0x66>
 48e:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 492:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 496:	18 bc       	out	0x28, r1	; 40
 498:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 49c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 4a0:	17 bc       	out	0x27, r1	; 39
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	1f 91       	pop	r17
 4a8:	0f 91       	pop	r16
 4aa:	ff 90       	pop	r15
 4ac:	ef 90       	pop	r14
 4ae:	df 90       	pop	r13
 4b0:	08 95       	ret

000004b2 <main>:


int main(void)
{

	RegisterInitialization();
 4b2:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z22RegisterInitializationv>

	while (800 > IRSensorFrontLeft()) //waits for left front sensor to be tripped by user to continue
 4b6:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_Z17IRSensorFrontLeftv>
 4ba:	80 32       	cpi	r24, 0x20	; 32
 4bc:	93 40       	sbci	r25, 0x03	; 3
 4be:	28 f4       	brcc	.+10     	; 0x4ca <main+0x18>
	{
		timerInMilliseconds(10);
 4c0:	8a e0       	ldi	r24, 0x0A	; 10
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
int main(void)
{

	RegisterInitialization();

	while (800 > IRSensorFrontLeft()) //waits for left front sensor to be tripped by user to continue
 4c8:	f6 cf       	rjmp	.-20     	; 0x4b6 <main+0x4>

	while (1)
	{
	//moveOneBlock();
	//rightEncoderTurn();
	rightGyroTurn();
 4ca:	0e 94 49 01 	call	0x292	; 0x292 <_Z13rightGyroTurnv>
	timerInMilliseconds(5000);// the bandwidth of LY3200 Gyro is 140Hz= 7ms
 4ce:	88 e8       	ldi	r24, 0x88	; 136
 4d0:	93 e1       	ldi	r25, 0x13	; 19
 4d2:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
 4d6:	f9 cf       	rjmp	.-14     	; 0x4ca <main+0x18>

000004d8 <_GLOBAL__sub_I_recievedChar>:
uint8_t leftBaseSpeed = 50;
uint8_t rightBaseSpeed = 50;
uint16_t Paway = 20;// P coefficient// change with different light
uint16_t Ptoward = 10;// change with different light
uint16_t D = 10;// change with different light
uint16_t errorMax = ((rightBaseSpeed - 5) * Paway);//this is the max difference between 255 or 0 and Base speed, * the Propotional divider
 4d8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <rightBaseSpeed>
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	05 97       	sbiw	r24, 0x05	; 5
 4e0:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <Paway>
 4e4:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <Paway+0x1>
 4e8:	84 9f       	mul	r24, r20
 4ea:	90 01       	movw	r18, r0
 4ec:	85 9f       	mul	r24, r21
 4ee:	30 0d       	add	r19, r0
 4f0:	94 9f       	mul	r25, r20
 4f2:	30 0d       	add	r19, r0
 4f4:	11 24       	eor	r1, r1
 4f6:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <__data_end+0x1>
 4fa:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <__data_end>
 4fe:	08 95       	ret

00000500 <__udivmodhi4>:
 500:	aa 1b       	sub	r26, r26
 502:	bb 1b       	sub	r27, r27
 504:	51 e1       	ldi	r21, 0x11	; 17
 506:	07 c0       	rjmp	.+14     	; 0x516 <__udivmodhi4_ep>

00000508 <__udivmodhi4_loop>:
 508:	aa 1f       	adc	r26, r26
 50a:	bb 1f       	adc	r27, r27
 50c:	a6 17       	cp	r26, r22
 50e:	b7 07       	cpc	r27, r23
 510:	10 f0       	brcs	.+4      	; 0x516 <__udivmodhi4_ep>
 512:	a6 1b       	sub	r26, r22
 514:	b7 0b       	sbc	r27, r23

00000516 <__udivmodhi4_ep>:
 516:	88 1f       	adc	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	5a 95       	dec	r21
 51c:	a9 f7       	brne	.-22     	; 0x508 <__udivmodhi4_loop>
 51e:	80 95       	com	r24
 520:	90 95       	com	r25
 522:	bc 01       	movw	r22, r24
 524:	cd 01       	movw	r24, r26
 526:	08 95       	ret

00000528 <__divmodhi4>:
 528:	97 fb       	bst	r25, 7
 52a:	07 2e       	mov	r0, r23
 52c:	16 f4       	brtc	.+4      	; 0x532 <__divmodhi4+0xa>
 52e:	00 94       	com	r0
 530:	07 d0       	rcall	.+14     	; 0x540 <__divmodhi4_neg1>
 532:	77 fd       	sbrc	r23, 7
 534:	09 d0       	rcall	.+18     	; 0x548 <__divmodhi4_neg2>
 536:	0e 94 80 02 	call	0x500	; 0x500 <__udivmodhi4>
 53a:	07 fc       	sbrc	r0, 7
 53c:	05 d0       	rcall	.+10     	; 0x548 <__divmodhi4_neg2>
 53e:	3e f4       	brtc	.+14     	; 0x54e <__divmodhi4_exit>

00000540 <__divmodhi4_neg1>:
 540:	90 95       	com	r25
 542:	81 95       	neg	r24
 544:	9f 4f       	sbci	r25, 0xFF	; 255
 546:	08 95       	ret

00000548 <__divmodhi4_neg2>:
 548:	70 95       	com	r23
 54a:	61 95       	neg	r22
 54c:	7f 4f       	sbci	r23, 0xFF	; 255

0000054e <__divmodhi4_exit>:
 54e:	08 95       	ret

00000550 <__tablejump2__>:
 550:	ee 0f       	add	r30, r30
 552:	ff 1f       	adc	r31, r31
 554:	05 90       	lpm	r0, Z+
 556:	f4 91       	lpm	r31, Z
 558:	e0 2d       	mov	r30, r0
 55a:	09 94       	ijmp

0000055c <_exit>:
 55c:	f8 94       	cli

0000055e <__stop_program>:
 55e:	ff cf       	rjmp	.-2      	; 0x55e <__stop_program>
