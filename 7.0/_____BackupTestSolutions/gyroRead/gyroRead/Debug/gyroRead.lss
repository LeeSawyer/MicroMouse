
gyroRead.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007f9  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006bb  00000000  00000000  00000ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ea  00000000  00000000  00001174  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001560  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000490  00000000  00000000  000015f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000014  00000000  00000000  00001a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001a98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 b6 00 	call	0x16c	; 0x16c <main>
  88:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <_Z22RegisterInitializationv>:
{
		//also 0x01 = 0b00000001 = (1 << PORTD0) = (1 << 1) = _BV(1) = 1
		PORTD &= ~(1 << PORTD0); //port D0,  TX LED
		return(0);

  90:	87 b1       	in	r24, 0x07	; 7
  92:	88 61       	ori	r24, 0x18	; 24
  94:	87 b9       	out	0x07, r24	; 7
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	83 60       	ori	r24, 0x03	; 3
  9a:	8a b9       	out	0x0a, r24	; 10
  9c:	8a b1       	in	r24, 0x0a	; 10
  9e:	80 66       	ori	r24, 0x60	; 96
  a0:	8a b9       	out	0x0a, r24	; 10
  a2:	83 ea       	ldi	r24, 0xA3	; 163
  a4:	84 bd       	out	0x24, r24	; 36
  a6:	85 e0       	ldi	r24, 0x05	; 5
  a8:	85 bd       	out	0x25, r24	; 37
  aa:	84 b1       	in	r24, 0x04	; 4
  ac:	86 60       	ori	r24, 0x06	; 6
  ae:	84 b9       	out	0x04, r24	; 4
  b0:	81 ea       	ldi	r24, 0xA1	; 161
  b2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  b6:	8d e0       	ldi	r24, 0x0D	; 13
  b8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  bc:	e1 eb       	ldi	r30, 0xB1	; 177
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	87 60       	ori	r24, 0x07	; 7
  c4:	80 83       	st	Z, r24
  c6:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
  ca:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  ce:	87 e6       	ldi	r24, 0x67	; 103
  d0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  d4:	80 e9       	ldi	r24, 0x90	; 144
  d6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  da:	86 e0       	ldi	r24, 0x06	; 6
  dc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  e0:	87 b1       	in	r24, 0x07	; 7
  e2:	87 7d       	andi	r24, 0xD7	; 215
  e4:	87 b9       	out	0x07, r24	; 7
  e6:	52 98       	cbi	0x0a, 2	; 10
  e8:	8c e8       	ldi	r24, 0x8C	; 140
  ea:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  ee:	87 e0       	ldi	r24, 0x07	; 7
  f0:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
  f4:	ec e7       	ldi	r30, 0x7C	; 124
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	80 64       	ori	r24, 0x40	; 64
  fc:	80 83       	st	Z, r24
  fe:	78 94       	sei
 100:	08 95       	ret

00000102 <_Z11timer2_initv>:
}

void timer2_init()
{
	/////////////////////////////////USART config
	UBRR0H = (BRC >> 8); //sets the UART BAUD rate shifted over 8 bits , upper 8 bits
 102:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = BRC;// lower 8bits
 106:	87 e6       	ldi	r24, 0x67	; 103
 108:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1 << TXEN0);//  | (1 << TXCIE0);// TXEN0 enables transmit of UART 0; TXCIE0 trips the USART_TX_vect interupt when the UDR0 register empties
 10c:	88 e0       	ldi	r24, 0x08	; 8
 10e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);// sets up 8 bit data frame
 112:	86 e0       	ldi	r24, 0x06	; 6
 114:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	
	///////////////////////////////////ADC configure
	ADCSRA =  (1 << ADEN) | (1 << ADPS2);//(1 << ADPS2) | (1 << ADPS1)  // 16 prescale for 1Mhz
 118:	84 e8       	ldi	r24, 0x84	; 132
 11a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	//aden: adc enable;
	//input clockmux range: 16,000,000/50,000= 320  to   16,000,000/200,000= 80
	// 128 is the closest to what we need, so: ADPS2,ADPS1,ADPS0 all need to be 1
	//adie: adc interupt enable
	DIDR0 = (1 << ADC0D) | (1 << ADC1D) | (1 << ADC2D);//disables digital input from this pin is not needed to reduce power consumption
 11e:	87 e0       	ldi	r24, 0x07	; 7
 120:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	ADMUX |= (1 << REFS0);  // AVcc with External Capacitor at Aref pin, leaving MUX0,MUX1,MUX2,and MUX3 zero says we are using ADC0
 124:	ec e7       	ldi	r30, 0x7C	; 124
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	80 64       	ori	r24, 0x40	; 64
 12c:	80 83       	st	Z, r24
	//ADMUX &= ~(1 << ADLAR);   // clear for 10 bit resolution( &= ~ is turn a bit off)
	
	uint16_t IRSensorValue;// ADC higher value
	
	// set up timer with prescaler = 1024
	TCCR2B |= (1 << CS20)|(1 << CS21)|(1 << CS22);
 12e:	e1 eb       	ldi	r30, 0xB1	; 177
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	87 60       	ori	r24, 0x07	; 7
 136:	80 83       	st	Z, r24
	// initialize counter
	TCNT2 = 0;
 138:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
 13c:	08 95       	ret

0000013e <_Z18startADCConversionv>:
uint16_t startADCConversion()
{
	uint8_t theLow; // ADC lower value
	uint16_t gyroValue;// ADC higher value

	ADCSRA |= (1 << ADSC);    // Start the ADC conversion
 13e:	ea e7       	ldi	r30, 0x7A	; 122
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	80 64       	ori	r24, 0x40	; 64
 146:	80 83       	st	Z, r24
	while(ADCSRA & (1 << ADSC));      // Thanks T, this line waits for the ADC to finish
 148:	80 81       	ld	r24, Z
 14a:	86 fd       	sbrc	r24, 6
 14c:	fd cf       	rjmp	.-6      	; 0x148 <_Z18startADCConversionv+0xa>
	ADCSRA |= (1 << ADSC);    // Start the ADC conversion
 14e:	ea e7       	ldi	r30, 0x7A	; 122
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	80 64       	ori	r24, 0x40	; 64
 156:	80 83       	st	Z, r24
	while(ADCSRA & (1 << ADSC));      // Thanks T, this line waits for the ADC to finish
 158:	80 81       	ld	r24, Z
 15a:	86 fd       	sbrc	r24, 6
 15c:	fd cf       	rjmp	.-6      	; 0x158 <_Z18startADCConversionv+0x1a>

	theLow = ADCL; // ADC lower value
 15e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	gyroValue = ADCH <<8 | theLow;// ADC higher value
 162:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>

	return gyroValue;
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	92 2b       	or	r25, r18
 16a:	08 95       	ret

0000016c <main>:

int main(void)
{

	// connect led to pin PC0
	RegisterInitialization();
 16c:	0e 94 48 00 	call	0x90	; 0x90 <_Z22RegisterInitializationv>
	
	// initialize timer
	timer2_init();
 170:	0e 94 81 00 	call	0x102	; 0x102 <_Z11timer2_initv>
	while(1)
	{
		// check if the timer count reaches 124
		for(long unsigned int oneSecond =0; oneSecond  <= 10;oneSecond++)//(oneSecond  <= 10) and (TCNT2 <= 160) is 0.001 second
		{
			while (TCNT2 <= 160)
 174:	c2 eb       	ldi	r28, 0xB2	; 178
 176:	d0 e0       	ldi	r29, 0x00	; 0
void timer2_init();
uint16_t startADCConversion();


int main(void)
{
 178:	20 e0       	ldi	r18, 0x00	; 0
 17a:	30 e0       	ldi	r19, 0x00	; 0
	while(1)
	{
		// check if the timer count reaches 124
		for(long unsigned int oneSecond =0; oneSecond  <= 10;oneSecond++)//(oneSecond  <= 10) and (TCNT2 <= 160) is 0.001 second
		{
			while (TCNT2 <= 160)
 17c:	88 81       	ld	r24, Y
 17e:	81 3a       	cpi	r24, 0xA1	; 161
 180:	30 f4       	brcc	.+12     	; 0x18e <main+0x22>
			{
			TCNT2++;// reset counter
 182:	88 81       	ld	r24, Y
 184:	8f 5f       	subi	r24, 0xFF	; 255
 186:	88 83       	st	Y, r24
	while(1)
	{
		// check if the timer count reaches 124
		for(long unsigned int oneSecond =0; oneSecond  <= 10;oneSecond++)//(oneSecond  <= 10) and (TCNT2 <= 160) is 0.001 second
		{
			while (TCNT2 <= 160)
 188:	88 81       	ld	r24, Y
 18a:	81 3a       	cpi	r24, 0xA1	; 161
 18c:	d0 f3       	brcs	.-12     	; 0x182 <main+0x16>
			{
			TCNT2++;// reset counter
 			}
			TCNT2 = 0;// reset counter
 18e:	18 82       	st	Y, r1
 190:	2f 5f       	subi	r18, 0xFF	; 255
 192:	3f 4f       	sbci	r19, 0xFF	; 255
	
	// loop forever
	while(1)
	{
		// check if the timer count reaches 124
		for(long unsigned int oneSecond =0; oneSecond  <= 10;oneSecond++)//(oneSecond  <= 10) and (TCNT2 <= 160) is 0.001 second
 194:	2b 30       	cpi	r18, 0x0B	; 11
 196:	31 05       	cpc	r19, r1
 198:	89 f7       	brne	.-30     	; 0x17c <main+0x10>
			{
			TCNT2++;// reset counter
 			}
			TCNT2 = 0;// reset counter
		};
		startADCConversion();
 19a:	0e 94 9f 00 	call	0x13e	; 0x13e <_Z18startADCConversionv>
	
	// initialize timer
	timer2_init();
	
	// loop forever
	while(1)
 19e:	ec cf       	rjmp	.-40     	; 0x178 <main+0xc>

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
