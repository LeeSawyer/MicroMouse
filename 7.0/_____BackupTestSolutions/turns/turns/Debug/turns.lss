
turns.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000254  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000002c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012d3  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b5  00000000  00000000  00001703  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009a5  00000000  00000000  00001eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000025c  00000000  00000000  00002860  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000080d  00000000  00000000  00002abc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000972  00000000  00000000  000032c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00003c3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 9a 00 	jmp	0x134	; 0x134 <__vector_5>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 c8 00 	call	0x190	; 0x190 <main>
  88:	0c 94 28 01 	jmp	0x250	; 0x250 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <_Z22RegisterInitializationv>:
	OCR0A = 0;
 }// the number we compare to the counter}

void rightMotorForward(uint8_t rightMotorForwardSpeed)//void)
{	OCR1B = 0;
	OCR0B = rightMotorForwardSpeed; 
  90:	87 b1       	in	r24, 0x07	; 7
  92:	88 61       	ori	r24, 0x18	; 24
  94:	87 b9       	out	0x07, r24	; 7
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	83 60       	ori	r24, 0x03	; 3
  9a:	8a b9       	out	0x0a, r24	; 10
  9c:	87 b1       	in	r24, 0x07	; 7
  9e:	87 7d       	andi	r24, 0xD7	; 215
  a0:	87 b9       	out	0x07, r24	; 7
  a2:	52 98       	cbi	0x0a, 2	; 10
  a4:	8a b1       	in	r24, 0x0a	; 10
  a6:	80 66       	ori	r24, 0x60	; 96
  a8:	8a b9       	out	0x0a, r24	; 10
  aa:	84 b1       	in	r24, 0x04	; 4
  ac:	86 60       	ori	r24, 0x06	; 6
  ae:	84 b9       	out	0x04, r24	; 4
  b0:	21 e0       	ldi	r18, 0x01	; 1
  b2:	25 b9       	out	0x05, r18	; 5
  b4:	30 e8       	ldi	r19, 0x80	; 128
  b6:	3b b9       	out	0x0b, r19	; 11
  b8:	83 ea       	ldi	r24, 0xA3	; 163
  ba:	84 bd       	out	0x24, r24	; 36
  bc:	95 e0       	ldi	r25, 0x05	; 5
  be:	95 bd       	out	0x25, r25	; 37
  c0:	81 ea       	ldi	r24, 0xA1	; 161
  c2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  c6:	8d e0       	ldi	r24, 0x0D	; 13
  c8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  cc:	e1 eb       	ldi	r30, 0xB1	; 177
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	87 60       	ori	r24, 0x07	; 7
  d4:	80 83       	st	Z, r24
  d6:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
  da:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  de:	87 e6       	ldi	r24, 0x67	; 103
  e0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  e4:	86 e0       	ldi	r24, 0x06	; 6
  e6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  ea:	84 e8       	ldi	r24, 0x84	; 132
  ec:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  f0:	87 e0       	ldi	r24, 0x07	; 7
  f2:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
  f6:	30 93 6d 00 	sts	0x006D, r19	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
  fa:	20 93 6b 00 	sts	0x006B, r18	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
  fe:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
 102:	78 94       	sei
 104:	08 95       	ret

00000106 <__vector_3>:
 106:	1f 92       	push	r1
 108:	0f 92       	push	r0
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	0f 92       	push	r0
 10e:	11 24       	eor	r1, r1
 110:	8f 93       	push	r24
 112:	9f 93       	push	r25
 114:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <rightEncoderAPos>
 118:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <rightEncoderAPos+0x1>
 11c:	01 96       	adiw	r24, 0x01	; 1
 11e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <rightEncoderAPos+0x1>
 122:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <rightEncoderAPos>
 126:	9f 91       	pop	r25
 128:	8f 91       	pop	r24
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <__vector_5>:
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <rightEncoderAPos>
 146:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <rightEncoderAPos+0x1>
 14a:	01 96       	adiw	r24, 0x01	; 1
 14c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <rightEncoderAPos+0x1>
 150:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <rightEncoderAPos>
 154:	9f 91       	pop	r25
 156:	8f 91       	pop	r24
 158:	0f 90       	pop	r0
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	0f 90       	pop	r0
 15e:	1f 90       	pop	r1
 160:	18 95       	reti

00000162 <_Z18startADCConversionv>:
uint16_t startADCConversion()
{
	uint8_t theLow; // ADC lower value
	uint16_t gyroValue;// ADC higher value

	ADCSRA |= (1 << ADSC);    // Start the ADC conversion
 162:	ea e7       	ldi	r30, 0x7A	; 122
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	80 64       	ori	r24, 0x40	; 64
 16a:	80 83       	st	Z, r24
	while(ADCSRA & (1 << ADSC));      // Thanks T, this line waits for the ADC to finish
 16c:	80 81       	ld	r24, Z
 16e:	86 fd       	sbrc	r24, 6
 170:	fd cf       	rjmp	.-6      	; 0x16c <_Z18startADCConversionv+0xa>
	ADCSRA |= (1 << ADSC);    // Start the ADC conversion
 172:	ea e7       	ldi	r30, 0x7A	; 122
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	80 64       	ori	r24, 0x40	; 64
 17a:	80 83       	st	Z, r24
	while(ADCSRA & (1 << ADSC));      // Thanks T, this line waits for the ADC to finish
 17c:	80 81       	ld	r24, Z
 17e:	86 fd       	sbrc	r24, 6
 180:	fd cf       	rjmp	.-6      	; 0x17c <_Z18startADCConversionv+0x1a>

	theLow = ADCL; // ADC lower value
 182:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	gyroValue = ADCH <<8 | theLow;// ADC higher value
 186:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>

	return gyroValue;
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	92 2b       	or	r25, r18
 18e:	08 95       	ret

00000190 <main>:
volatile uint16_t gyroValue;// ADC higher value

uint16_t startADCConversion(void);

int main(void)
{
 190:	cf 92       	push	r12
 192:	df 92       	push	r13
 194:	ef 92       	push	r14
 196:	ff 92       	push	r15
 198:	0f 93       	push	r16
 19a:	1f 93       	push	r17
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29

	RegisterInitialization();
 1a0:	0e 94 48 00 	call	0x90	; 0x90 <_Z22RegisterInitializationv>
    while (1) 
    {
		// check if the timer count reaches 124
		for(long unsigned int oneSecond =0; oneSecond  <= 10;oneSecond++)//(oneSecond  <= 10) and (TCNT2 <= 160) is 0.001 second
		{
			while (TCNT2 <= 160)
 1a4:	c2 eb       	ldi	r28, 0xB2	; 178
 1a6:	d0 e0       	ldi	r29, 0x00	; 0
#include <util/delay.h>

//#include "Motor.cpp" //include by adding path by right clicking project main(TestMain)->Properties->Toolchain->AVR/GNU C++ Compiler->Directories->Add Item

void leftMotorForward(uint8_t leftMotorForwardSpeed)//void)
{	OCR1A = 0;
 1a8:	0f 2e       	mov	r0, r31
 1aa:	f8 e8       	ldi	r31, 0x88	; 136
 1ac:	ef 2e       	mov	r14, r31
 1ae:	f1 2c       	mov	r15, r1
 1b0:	f0 2d       	mov	r31, r0
	OCR0A = leftMotorForwardSpeed; 
 1b2:	0f 2e       	mov	r0, r31
 1b4:	f2 e3       	ldi	r31, 0x32	; 50
 1b6:	cf 2e       	mov	r12, r31
 1b8:	f0 2d       	mov	r31, r0
{	OCR1A = leftMotorRearwardSpeed;
	OCR0A = 0;
 }// the number we compare to the counter}

void rightMotorForward(uint8_t rightMotorForwardSpeed)//void)
{	OCR1B = 0;
 1ba:	0a e8       	ldi	r16, 0x8A	; 138
 1bc:	10 e0       	ldi	r17, 0x00	; 0
	OCR0B = rightMotorForwardSpeed; 
 1be:	0f 2e       	mov	r0, r31
 1c0:	f4 e6       	ldi	r31, 0x64	; 100
 1c2:	df 2e       	mov	r13, r31
 1c4:	f0 2d       	mov	r31, r0
volatile uint16_t gyroValue;// ADC higher value

uint16_t startADCConversion(void);

int main(void)
{
 1c6:	20 e0       	ldi	r18, 0x00	; 0
 1c8:	30 e0       	ldi	r19, 0x00	; 0
    while (1) 
    {
		// check if the timer count reaches 124
		for(long unsigned int oneSecond =0; oneSecond  <= 10;oneSecond++)//(oneSecond  <= 10) and (TCNT2 <= 160) is 0.001 second
		{
			while (TCNT2 <= 160)
 1ca:	88 81       	ld	r24, Y
 1cc:	81 3a       	cpi	r24, 0xA1	; 161
 1ce:	30 f4       	brcc	.+12     	; 0x1dc <main+0x4c>
			{
				TCNT2++;// reset counter
 1d0:	88 81       	ld	r24, Y
 1d2:	8f 5f       	subi	r24, 0xFF	; 255
 1d4:	88 83       	st	Y, r24
    while (1) 
    {
		// check if the timer count reaches 124
		for(long unsigned int oneSecond =0; oneSecond  <= 10;oneSecond++)//(oneSecond  <= 10) and (TCNT2 <= 160) is 0.001 second
		{
			while (TCNT2 <= 160)
 1d6:	88 81       	ld	r24, Y
 1d8:	81 3a       	cpi	r24, 0xA1	; 161
 1da:	d0 f3       	brcs	.-12     	; 0x1d0 <main+0x40>
			{
				TCNT2++;// reset counter
			}
			TCNT2 = 0;// reset counter
 1dc:	18 82       	st	Y, r1
 1de:	2f 5f       	subi	r18, 0xFF	; 255
 1e0:	3f 4f       	sbci	r19, 0xFF	; 255

    /* Replace with your application code */
    while (1) 
    {
		// check if the timer count reaches 124
		for(long unsigned int oneSecond =0; oneSecond  <= 10;oneSecond++)//(oneSecond  <= 10) and (TCNT2 <= 160) is 0.001 second
 1e2:	2b 30       	cpi	r18, 0x0B	; 11
 1e4:	31 05       	cpc	r19, r1
 1e6:	89 f7       	brne	.-30     	; 0x1ca <main+0x3a>
#include <util/delay.h>

//#include "Motor.cpp" //include by adding path by right clicking project main(TestMain)->Properties->Toolchain->AVR/GNU C++ Compiler->Directories->Add Item

void leftMotorForward(uint8_t leftMotorForwardSpeed)//void)
{	OCR1A = 0;
 1e8:	f7 01       	movw	r30, r14
 1ea:	11 82       	std	Z+1, r1	; 0x01
 1ec:	10 82       	st	Z, r1
	OCR0A = leftMotorForwardSpeed; 
 1ee:	c7 bc       	out	0x27, r12	; 39
{	OCR1A = leftMotorRearwardSpeed;
	OCR0A = 0;
 }// the number we compare to the counter}

void rightMotorForward(uint8_t rightMotorForwardSpeed)//void)
{	OCR1B = 0;
 1f0:	f8 01       	movw	r30, r16
 1f2:	11 82       	std	Z+1, r1	; 0x01
 1f4:	10 82       	st	Z, r1
	OCR0B = rightMotorForwardSpeed; 
 1f6:	d8 bc       	out	0x28, r13	; 40
			}
			TCNT2 = 0;// reset counter
		};
		leftMotorForward(50);
		rightMotorForward(100);
		gyroValue += startADCConversion();
 1f8:	0e 94 b1 00 	call	0x162	; 0x162 <_Z18startADCConversionv>
 1fc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 200:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 204:	82 0f       	add	r24, r18
 206:	93 1f       	adc	r25, r19
 208:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 20c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		if (gyroValue > 900) //1700 one block
 210:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 214:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 218:	85 38       	cpi	r24, 0x85	; 133
 21a:	93 40       	sbci	r25, 0x03	; 3
 21c:	a0 f2       	brcs	.-88     	; 0x1c6 <main+0x36>
		{
			gyroValue = 0;
 21e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 222:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
#include <util/delay.h>

//#include "Motor.cpp" //include by adding path by right clicking project main(TestMain)->Properties->Toolchain->AVR/GNU C++ Compiler->Directories->Add Item

void leftMotorForward(uint8_t leftMotorForwardSpeed)//void)
{	OCR1A = 0;
 226:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 22a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR0A = leftMotorForwardSpeed; 
 22e:	17 bc       	out	0x27, r1	; 39
{	OCR1A = leftMotorRearwardSpeed;
	OCR0A = 0;
 }// the number we compare to the counter}

void rightMotorForward(uint8_t rightMotorForwardSpeed)//void)
{	OCR1B = 0;
 230:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 234:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	OCR0B = rightMotorForwardSpeed; 
 238:	18 bc       	out	0x28, r1	; 40
		}

	}
	leftMotorForward(0);
	rightMotorForward(0);
}
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	1f 91       	pop	r17
 244:	0f 91       	pop	r16
 246:	ff 90       	pop	r15
 248:	ef 90       	pop	r14
 24a:	df 90       	pop	r13
 24c:	cf 90       	pop	r12
 24e:	08 95       	ret

00000250 <_exit>:
 250:	f8 94       	cli

00000252 <__stop_program>:
 252:	ff cf       	rjmp	.-2      	; 0x252 <__stop_program>
