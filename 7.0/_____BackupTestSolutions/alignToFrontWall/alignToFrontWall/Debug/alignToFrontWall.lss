
alignToFrontWall.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000005c4  00000658  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080010c  0080010c  00000664  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000664  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000694  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  000006d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023cb  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c4  00000000  00000000  00002c2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016c3  00000000  00000000  000035f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b0  00000000  00000000  00004cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000da1  00000000  00000000  00005168  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000119f  00000000  00000000  00005f09  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000468  00000000  00000000  000070a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__vector_3>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_5>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	b2 02       	muls	r27, r18

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	e4 ec       	ldi	r30, 0xC4	; 196
  7e:	f5 e0       	ldi	r31, 0x05	; 5
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	ac 30       	cpi	r26, 0x0C	; 12
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	ac e0       	ldi	r26, 0x0C	; 12
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	aa 31       	cpi	r26, 0x1A	; 26
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 da 02 	call	0x5b4	; 0x5b4 <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 ae 02 	call	0x55c	; 0x55c <main>
  b6:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <_Z22RegisterInitializationv>:
		UDR0 = 0x0D;
		timerInMilliseconds(1000);
		
		UCSR0B = 0x0D;//(1 << TXEN0);//  | (1 << TXCIE0);// TXEN0 enables transmit of UART 0; TXCIE0 trips the USART_TX_vect interupt when the UDR0 register empties	
		
  be:	87 b1       	in	r24, 0x07	; 7
  c0:	88 61       	ori	r24, 0x18	; 24
  c2:	87 b9       	out	0x07, r24	; 7
  c4:	83 e6       	ldi	r24, 0x63	; 99
  c6:	8a b9       	out	0x0a, r24	; 10
  c8:	87 b1       	in	r24, 0x07	; 7
  ca:	87 7d       	andi	r24, 0xD7	; 215
  cc:	87 b9       	out	0x07, r24	; 7
  ce:	84 b1       	in	r24, 0x04	; 4
  d0:	86 60       	ori	r24, 0x06	; 6
  d2:	84 b9       	out	0x04, r24	; 4
  d4:	21 e0       	ldi	r18, 0x01	; 1
  d6:	25 b9       	out	0x05, r18	; 5
  d8:	30 e8       	ldi	r19, 0x80	; 128
  da:	3b b9       	out	0x0b, r19	; 11
  dc:	83 ea       	ldi	r24, 0xA3	; 163
  de:	84 bd       	out	0x24, r24	; 36
  e0:	95 e0       	ldi	r25, 0x05	; 5
  e2:	95 bd       	out	0x25, r25	; 37
  e4:	81 ea       	ldi	r24, 0xA1	; 161
  e6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  ea:	8d e0       	ldi	r24, 0x0D	; 13
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f0:	e1 eb       	ldi	r30, 0xB1	; 177
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	87 60       	ori	r24, 0x07	; 7
  f8:	80 83       	st	Z, r24
  fa:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
  fe:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 102:	87 e6       	ldi	r24, 0x67	; 103
 104:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 108:	86 e0       	ldi	r24, 0x06	; 6
 10a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 10e:	84 e8       	ldi	r24, 0x84	; 132
 110:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 114:	87 e0       	ldi	r24, 0x07	; 7
 116:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
 11a:	30 93 6d 00 	sts	0x006D, r19	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
 11e:	20 93 6b 00 	sts	0x006B, r18	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
 122:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
 126:	78 94       	sei
 128:	08 95       	ret

0000012a <__vector_3>:
 12a:	1f 92       	push	r1
 12c:	0f 92       	push	r0
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	0f 92       	push	r0
 132:	11 24       	eor	r1, r1
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
 138:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <rightEncoderAPos>
 13c:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <rightEncoderAPos+0x1>
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <rightEncoderAPos+0x1>
 146:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <rightEncoderAPos>
 14a:	9f 91       	pop	r25
 14c:	8f 91       	pop	r24
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <__vector_5>:
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
 166:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <rightEncoderAPos>
 16a:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <rightEncoderAPos+0x1>
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <rightEncoderAPos+0x1>
 174:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <rightEncoderAPos>
 178:	9f 91       	pop	r25
 17a:	8f 91       	pop	r24
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <_Z19timerInMillisecondsj>:
 186:	0f 93       	push	r16
 188:	1f 93       	push	r17
 18a:	8c 01       	movw	r16, r24
 18c:	00 0f       	add	r16, r16
 18e:	11 1f       	adc	r17, r17
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	08 0f       	add	r16, r24
 19e:	19 1f       	adc	r17, r25
 1a0:	20 e0       	ldi	r18, 0x00	; 0
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	40 e0       	ldi	r20, 0x00	; 0
 1a6:	50 e0       	ldi	r21, 0x00	; 0
 1a8:	ba 01       	movw	r22, r20
 1aa:	e2 eb       	ldi	r30, 0xB2	; 178
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	81 3a       	cpi	r24, 0xA1	; 161
 1b2:	30 f4       	brcc	.+12     	; 0x1c0 <_Z19timerInMillisecondsj+0x3a>
 1b4:	80 81       	ld	r24, Z
 1b6:	8f 5f       	subi	r24, 0xFF	; 255
 1b8:	80 83       	st	Z, r24
 1ba:	80 81       	ld	r24, Z
 1bc:	81 3a       	cpi	r24, 0xA1	; 161
 1be:	d0 f3       	brcs	.-12     	; 0x1b4 <_Z19timerInMillisecondsj+0x2e>
 1c0:	10 82       	st	Z, r1
 1c2:	4f 5f       	subi	r20, 0xFF	; 255
 1c4:	5f 4f       	sbci	r21, 0xFF	; 255
 1c6:	6f 4f       	sbci	r22, 0xFF	; 255
 1c8:	7f 4f       	sbci	r23, 0xFF	; 255
 1ca:	04 17       	cp	r16, r20
 1cc:	15 07       	cpc	r17, r21
 1ce:	26 07       	cpc	r18, r22
 1d0:	37 07       	cpc	r19, r23
 1d2:	68 f7       	brcc	.-38     	; 0x1ae <_Z19timerInMillisecondsj+0x28>
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	1f 91       	pop	r17
 1da:	0f 91       	pop	r16
 1dc:	08 95       	ret

000001de <_Z10frontLEDOnv>:
 1de:	43 9a       	sbi	0x08, 3	; 8
 1e0:	08 95       	ret

000001e2 <_Z11frontLEDOffv>:
 1e2:	43 98       	cbi	0x08, 3	; 8
 1e4:	08 95       	ret

000001e6 <_Z17IRSensorFrontLeftv>:
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
 1f2:	82 e4       	ldi	r24, 0x42	; 66
 1f4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 1f8:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z11frontLEDOffv>
 1fc:	ea e7       	ldi	r30, 0x7A	; 122
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	80 64       	ori	r24, 0x40	; 64
 204:	80 83       	st	Z, r24
 206:	80 81       	ld	r24, Z
 208:	86 fd       	sbrc	r24, 6
 20a:	fd cf       	rjmp	.-6      	; 0x206 <_Z17IRSensorFrontLeftv+0x20>
 20c:	ea e7       	ldi	r30, 0x7A	; 122
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	80 64       	ori	r24, 0x40	; 64
 214:	80 83       	st	Z, r24
 216:	80 81       	ld	r24, Z
 218:	86 fd       	sbrc	r24, 6
 21a:	fd cf       	rjmp	.-6      	; 0x216 <_Z17IRSensorFrontLeftv+0x30>
 21c:	c0 91 78 00 	lds	r28, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 220:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 224:	d0 e0       	ldi	r29, 0x00	; 0
 226:	d8 2b       	or	r29, r24
 228:	0e 94 ef 00 	call	0x1de	; 0x1de <_Z10frontLEDOnv>
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
 234:	ea e7       	ldi	r30, 0x7A	; 122
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	80 81       	ld	r24, Z
 23a:	80 64       	ori	r24, 0x40	; 64
 23c:	80 83       	st	Z, r24
 23e:	80 81       	ld	r24, Z
 240:	86 fd       	sbrc	r24, 6
 242:	fd cf       	rjmp	.-6      	; 0x23e <_Z17IRSensorFrontLeftv+0x58>
 244:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z11frontLEDOffv>
 248:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 24c:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	92 2b       	or	r25, r18
 254:	8c 1b       	sub	r24, r28
 256:	9d 0b       	sbc	r25, r29
 258:	df 91       	pop	r29
 25a:	cf 91       	pop	r28
 25c:	08 95       	ret

0000025e <_Z18IRSensorFrontRightv>:
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
 26a:	86 e4       	ldi	r24, 0x46	; 70
 26c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 270:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z11frontLEDOffv>
 274:	ea e7       	ldi	r30, 0x7A	; 122
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	80 64       	ori	r24, 0x40	; 64
 27c:	80 83       	st	Z, r24
 27e:	80 81       	ld	r24, Z
 280:	86 fd       	sbrc	r24, 6
 282:	fd cf       	rjmp	.-6      	; 0x27e <_Z18IRSensorFrontRightv+0x20>
 284:	ea e7       	ldi	r30, 0x7A	; 122
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	80 81       	ld	r24, Z
 28a:	80 64       	ori	r24, 0x40	; 64
 28c:	80 83       	st	Z, r24
 28e:	80 81       	ld	r24, Z
 290:	86 fd       	sbrc	r24, 6
 292:	fd cf       	rjmp	.-6      	; 0x28e <_Z18IRSensorFrontRightv+0x30>
 294:	c0 91 78 00 	lds	r28, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 298:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 29c:	d0 e0       	ldi	r29, 0x00	; 0
 29e:	d8 2b       	or	r29, r24
 2a0:	0e 94 ef 00 	call	0x1de	; 0x1de <_Z10frontLEDOnv>
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
 2ac:	ea e7       	ldi	r30, 0x7A	; 122
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	80 81       	ld	r24, Z
 2b2:	80 64       	ori	r24, 0x40	; 64
 2b4:	80 83       	st	Z, r24
 2b6:	80 81       	ld	r24, Z
 2b8:	86 fd       	sbrc	r24, 6
 2ba:	fd cf       	rjmp	.-6      	; 0x2b6 <_Z18IRSensorFrontRightv+0x58>
 2bc:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z11frontLEDOffv>
 2c0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 2c4:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	92 2b       	or	r25, r18
 2cc:	8c 1b       	sub	r24, r28
 2ce:	9d 0b       	sbc	r25, r29
 2d0:	df 91       	pop	r29
 2d2:	cf 91       	pop	r28
 2d4:	08 95       	ret

000002d6 <_Z20alignToFrontWallDEMOv>:

		leftMotorRearward(leftMotorSpeed);
		//PIND = (1<<PORTD1);  // Pin changed - toggle an LED on PD0 ===green
		}
	else//(	 leftIRDiff < 942) //farther than
		{leftIRDiff = (942 - leftIRDiff);
 2d6:	0f 2e       	mov	r0, r31
 2d8:	fe ea       	ldi	r31, 0xAE	; 174
 2da:	cf 2e       	mov	r12, r31
 2dc:	f3 e0       	ldi	r31, 0x03	; 3
 2de:	df 2e       	mov	r13, r31
 2e0:	f0 2d       	mov	r31, r0




void leftMotorForward(uint8_t leftMotorForwardSpeed)//void)
{	OCR1A = 0;
 2e2:	0f 2e       	mov	r0, r31
 2e4:	f8 e8       	ldi	r31, 0x88	; 136
 2e6:	ef 2e       	mov	r14, r31
 2e8:	f1 2c       	mov	r15, r1
 2ea:	f0 2d       	mov	r31, r0
			if (leftIRDiff < 20) // we are close enough... just stop
					{leftIRDiff = 0;
					 oldLeftIRDiff = 0;
					 };//breakWhileLoopCounter++;};//if oldLeftIRDiff is bigger than leftIRDiff, it puts a negative number into errorLeftIRDiff below
			if(leftIRDiff  > 50)
					leftIRDiff = 50;
 2ec:	02 e3       	ldi	r16, 0x32	; 50
 2ee:	10 e0       	ldi	r17, 0x00	; 0
{	OCR1A = leftMotorRearwardSpeed;
	OCR0A = 0;
 }// the number we compare to the counter}

void rightMotorForward(uint8_t rightMotorForwardSpeed)//void)
{	OCR1B = 0;
 2f0:	ca e8       	ldi	r28, 0x8A	; 138
 2f2:	d0 e0       	ldi	r29, 0x00	; 0
//
void alignToFrontWallDEMO(void)
{
    while (1)
    {
	timerInMilliseconds(1);
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>

	leftIRDiff = IRSensorFrontLeft();
 2fc:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_Z17IRSensorFrontLeftv>
	//intToCharUart(leftIRDiff);

	if(	 leftIRDiff >= 942) //closer than
 300:	8e 3a       	cpi	r24, 0xAE	; 174
 302:	23 e0       	ldi	r18, 0x03	; 3
 304:	92 07       	cpc	r25, r18
 306:	08 f4       	brcc	.+2      	; 0x30a <_Z20alignToFrontWallDEMOv+0x34>
 308:	48 c0       	rjmp	.+144    	; 0x39a <_Z20alignToFrontWallDEMOv+0xc4>
		{leftIRDiff = (leftIRDiff - 942);
 30a:	8e 5a       	subi	r24, 0xAE	; 174
 30c:	93 40       	sbci	r25, 0x03	; 3
 30e:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <leftIRDiff+0x1>
 312:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <leftIRDiff>

			if(leftIRDiff < 20) // we are close enough... just stop
 316:	84 31       	cpi	r24, 0x14	; 20
 318:	91 05       	cpc	r25, r1
 31a:	48 f4       	brcc	.+18     	; 0x32e <_Z20alignToFrontWallDEMOv+0x58>
				{leftIRDiff = 0;
 31c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <leftIRDiff+0x1>
 320:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <leftIRDiff>
				oldLeftIRDiff = 0;
 324:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <oldLeftIRDiff+0x1>
 328:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <oldLeftIRDiff>
 32c:	06 c0       	rjmp	.+12     	; 0x33a <_Z20alignToFrontWallDEMOv+0x64>
				};//breakWhileLoopCounter++;};//if oldLeftIRDiff is bigger than leftIRDiff, it puts a negative number into errorLeftIRDiff below

			if(leftIRDiff  > 50)// to fast... slow down
 32e:	c3 97       	sbiw	r24, 0x33	; 51
 330:	20 f0       	brcs	.+8      	; 0x33a <_Z20alignToFrontWallDEMOv+0x64>
				leftIRDiff = 50;	
 332:	10 93 0a 01 	sts	0x010A, r17	; 0x80010a <leftIRDiff+0x1>
 336:	00 93 09 01 	sts	0x0109, r16	; 0x800109 <leftIRDiff>

		errorLeftIRDiff = leftIRDiff - oldLeftIRDiff; //our differential, (Change of error distance )/(time between measurements)
 33a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <leftIRDiff>
 33e:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <leftIRDiff+0x1>
 342:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <oldLeftIRDiff>
 346:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <oldLeftIRDiff+0x1>
 34a:	ac 01       	movw	r20, r24
 34c:	42 1b       	sub	r20, r18
 34e:	53 0b       	sbc	r21, r19
 350:	9a 01       	movw	r18, r20
 352:	50 93 11 01 	sts	0x0111, r21	; 0x800111 <errorLeftIRDiff+0x1>
 356:	40 93 10 01 	sts	0x0110, r20	; 0x800110 <errorLeftIRDiff>
		leftIRDiff =  (leftIRDiff/PFrontwallAlign) + (errorLeftIRDiff/DFrontwallAlign);
 35a:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <PFrontwallAlign>
 35e:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <PFrontwallAlign+0x1>
 362:	0e 94 c6 02 	call	0x58c	; 0x58c <__udivmodhi4>
 366:	fb 01       	movw	r30, r22
 368:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <DFrontwallAlign>
 36c:	70 91 04 01 	lds	r23, 0x0104	; 0x800104 <DFrontwallAlign+0x1>
 370:	c9 01       	movw	r24, r18
 372:	0e 94 c6 02 	call	0x58c	; 0x58c <__udivmodhi4>
 376:	6e 0f       	add	r22, r30
 378:	7f 1f       	adc	r23, r31
 37a:	70 93 0a 01 	sts	0x010A, r23	; 0x80010a <leftIRDiff+0x1>
 37e:	60 93 09 01 	sts	0x0109, r22	; 0x800109 <leftIRDiff>
		oldLeftIRDiff = leftIRDiff;// for the next dx/dt
 382:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <oldLeftIRDiff+0x1>
 386:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <oldLeftIRDiff>
		leftMotorSpeed = 0xFF &  leftIRDiff; // make this an 8-bit for our PWM register 	
 38a:	60 93 17 01 	sts	0x0117, r22	; 0x800117 <leftMotorSpeed>
 38e:	77 27       	eor	r23, r23
{	OCR1A = 0;
	OCR0A = leftMotorForwardSpeed; 
}// the number we compare to the counter}

void leftMotorRearward(uint8_t leftMotorRearwardSpeed)//void)
{	OCR1A = leftMotorRearwardSpeed;
 390:	f7 01       	movw	r30, r14
 392:	71 83       	std	Z+1, r23	; 0x01
 394:	60 83       	st	Z, r22
	OCR0A = 0;
 396:	17 bc       	out	0x27, r1	; 39
 398:	48 c0       	rjmp	.+144    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>

		leftMotorRearward(leftMotorSpeed);
		//PIND = (1<<PORTD1);  // Pin changed - toggle an LED on PD0 ===green
		}
	else//(	 leftIRDiff < 942) //farther than
		{leftIRDiff = (942 - leftIRDiff);
 39a:	96 01       	movw	r18, r12
 39c:	28 1b       	sub	r18, r24
 39e:	39 0b       	sbc	r19, r25
 3a0:	30 93 0a 01 	sts	0x010A, r19	; 0x80010a <leftIRDiff+0x1>
 3a4:	20 93 09 01 	sts	0x0109, r18	; 0x800109 <leftIRDiff>
			if (leftIRDiff < 20) // we are close enough... just stop
 3a8:	24 31       	cpi	r18, 0x14	; 20
 3aa:	31 05       	cpc	r19, r1
 3ac:	48 f4       	brcc	.+18     	; 0x3c0 <_Z20alignToFrontWallDEMOv+0xea>
					{leftIRDiff = 0;
 3ae:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <leftIRDiff+0x1>
 3b2:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <leftIRDiff>
					 oldLeftIRDiff = 0;
 3b6:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <oldLeftIRDiff+0x1>
 3ba:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <oldLeftIRDiff>
 3be:	07 c0       	rjmp	.+14     	; 0x3ce <_Z20alignToFrontWallDEMOv+0xf8>
					 };//breakWhileLoopCounter++;};//if oldLeftIRDiff is bigger than leftIRDiff, it puts a negative number into errorLeftIRDiff below
			if(leftIRDiff  > 50)
 3c0:	23 33       	cpi	r18, 0x33	; 51
 3c2:	31 05       	cpc	r19, r1
 3c4:	20 f0       	brcs	.+8      	; 0x3ce <_Z20alignToFrontWallDEMOv+0xf8>
					leftIRDiff = 50;
 3c6:	10 93 0a 01 	sts	0x010A, r17	; 0x80010a <leftIRDiff+0x1>
 3ca:	00 93 09 01 	sts	0x0109, r16	; 0x800109 <leftIRDiff>
			errorLeftIRDiff = leftIRDiff - oldLeftIRDiff; //our differential, (Change of error distance )/(time between measurements)
 3ce:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <leftIRDiff>
 3d2:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <leftIRDiff+0x1>
 3d6:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <oldLeftIRDiff>
 3da:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <oldLeftIRDiff+0x1>
 3de:	ac 01       	movw	r20, r24
 3e0:	42 1b       	sub	r20, r18
 3e2:	53 0b       	sbc	r21, r19
 3e4:	9a 01       	movw	r18, r20
 3e6:	50 93 11 01 	sts	0x0111, r21	; 0x800111 <errorLeftIRDiff+0x1>
 3ea:	40 93 10 01 	sts	0x0110, r20	; 0x800110 <errorLeftIRDiff>
			leftIRDiff =  (leftIRDiff/PFrontwallAlign) + (errorLeftIRDiff/DFrontwallAlign);
 3ee:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <PFrontwallAlign>
 3f2:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <PFrontwallAlign+0x1>
 3f6:	0e 94 c6 02 	call	0x58c	; 0x58c <__udivmodhi4>
 3fa:	fb 01       	movw	r30, r22
 3fc:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <DFrontwallAlign>
 400:	70 91 04 01 	lds	r23, 0x0104	; 0x800104 <DFrontwallAlign+0x1>
 404:	c9 01       	movw	r24, r18
 406:	0e 94 c6 02 	call	0x58c	; 0x58c <__udivmodhi4>
 40a:	6e 0f       	add	r22, r30
 40c:	7f 1f       	adc	r23, r31
 40e:	70 93 0a 01 	sts	0x010A, r23	; 0x80010a <leftIRDiff+0x1>
 412:	60 93 09 01 	sts	0x0109, r22	; 0x800109 <leftIRDiff>
			oldLeftIRDiff = leftIRDiff;// for the next dx/dt
 416:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <oldLeftIRDiff+0x1>
 41a:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <oldLeftIRDiff>
			leftMotorSpeed = 0xFF &  leftIRDiff;// this is supposed to move the lower 8 bits into this uint_8
 41e:	60 93 17 01 	sts	0x0117, r22	; 0x800117 <leftMotorSpeed>




void leftMotorForward(uint8_t leftMotorForwardSpeed)//void)
{	OCR1A = 0;
 422:	f7 01       	movw	r30, r14
 424:	11 82       	std	Z+1, r1	; 0x01
 426:	10 82       	st	Z, r1
	OCR0A = leftMotorForwardSpeed; 
 428:	67 bd       	out	0x27, r22	; 39
			leftMotorForward(leftMotorSpeed);
			//PIND = (1<<PORTD0);  // Pin changed - toggle an LED on PD0 ===blue
		};

		timerInMilliseconds(1);
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>

		rightIRDiff = IRSensorFrontRight();
 432:	0e 94 2f 01 	call	0x25e	; 0x25e <_Z18IRSensorFrontRightv>
		//intToCharUart(rightIRDiff);

	if(	 rightIRDiff >= 942) //closer than
 436:	8e 3a       	cpi	r24, 0xAE	; 174
 438:	f3 e0       	ldi	r31, 0x03	; 3
 43a:	9f 07       	cpc	r25, r31
 43c:	08 f4       	brcc	.+2      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 43e:	47 c0       	rjmp	.+142    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
		{rightIRDiff = (rightIRDiff - 942);
 440:	8e 5a       	subi	r24, 0xAE	; 174
 442:	93 40       	sbci	r25, 0x03	; 3
 444:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <rightIRDiff+0x1>
 448:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <rightIRDiff>

			if(rightIRDiff < 20) // we are close enough... just stop
 44c:	84 31       	cpi	r24, 0x14	; 20
 44e:	91 05       	cpc	r25, r1
 450:	48 f4       	brcc	.+18     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
				{rightIRDiff = 0;
 452:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <rightIRDiff+0x1>
 456:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <rightIRDiff>
				 oldRightIRDiff = 0;
 45a:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <oldRightIRDiff+0x1>
 45e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <oldRightIRDiff>
 462:	06 c0       	rjmp	.+12     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
				 };//breakWhileLoopCounter++;};//if oldRightIRDiff is bigger than RightIRDiff, it puts a negative number into errorRightIRDiff below
			if(rightIRDiff  > 50)// to fast... slow down
 464:	c3 97       	sbiw	r24, 0x33	; 51
 466:	20 f0       	brcs	.+8      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
			rightIRDiff = 50;
 468:	10 93 08 01 	sts	0x0108, r17	; 0x800108 <rightIRDiff+0x1>
 46c:	00 93 07 01 	sts	0x0107, r16	; 0x800107 <rightIRDiff>

			errorRightIRDiff = rightIRDiff - oldRightIRDiff; //our differential, (Change of error distance )/(time between measurements)
 470:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <rightIRDiff>
 474:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <rightIRDiff+0x1>
 478:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <oldRightIRDiff>
 47c:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <oldRightIRDiff+0x1>
 480:	ac 01       	movw	r20, r24
 482:	42 1b       	sub	r20, r18
 484:	53 0b       	sbc	r21, r19
 486:	9a 01       	movw	r18, r20
 488:	50 93 0f 01 	sts	0x010F, r21	; 0x80010f <errorRightIRDiff+0x1>
 48c:	40 93 0e 01 	sts	0x010E, r20	; 0x80010e <errorRightIRDiff>
			rightIRDiff =  (rightIRDiff/PFrontwallAlign) + (errorRightIRDiff/DFrontwallAlign);
 490:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <PFrontwallAlign>
 494:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <PFrontwallAlign+0x1>
 498:	0e 94 c6 02 	call	0x58c	; 0x58c <__udivmodhi4>
 49c:	fb 01       	movw	r30, r22
 49e:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <DFrontwallAlign>
 4a2:	70 91 04 01 	lds	r23, 0x0104	; 0x800104 <DFrontwallAlign+0x1>
 4a6:	c9 01       	movw	r24, r18
 4a8:	0e 94 c6 02 	call	0x58c	; 0x58c <__udivmodhi4>
 4ac:	6e 0f       	add	r22, r30
 4ae:	7f 1f       	adc	r23, r31
 4b0:	70 93 08 01 	sts	0x0108, r23	; 0x800108 <rightIRDiff+0x1>
 4b4:	60 93 07 01 	sts	0x0107, r22	; 0x800107 <rightIRDiff>
			oldRightIRDiff = rightIRDiff;// for the next dx/dt
 4b8:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <oldRightIRDiff+0x1>
 4bc:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <oldRightIRDiff>
			rightMotorSpeed = 0xFF &  rightIRDiff;// this is supposed to move the lower 8 bits into this uint_8
 4c0:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <rightMotorSpeed>
 4c4:	77 27       	eor	r23, r23
{	OCR1B = 0;
	OCR0B = rightMotorForwardSpeed; 
}// the number we compare to the counter}

void rightMotorRearward(uint8_t rightMotorRearwardSpeed)//void)
{	OCR1B = rightMotorRearwardSpeed; // the number we compare to the counter
 4c6:	79 83       	std	Y+1, r23	; 0x01
 4c8:	68 83       	st	Y, r22
	OCR0B = 0;
 4ca:	18 bc       	out	0x28, r1	; 40
 4cc:	13 cf       	rjmp	.-474    	; 0x2f4 <_Z20alignToFrontWallDEMOv+0x1e>

			rightMotorRearward(rightMotorSpeed);
			//PIND = (1<<PORTD1);  // Pin changed - toggle an LED on PD0 ===green
		}
		else//(	 rightIRDiff < 942) //farther than
		{rightIRDiff = (942 - rightIRDiff);
 4ce:	f6 01       	movw	r30, r12
 4d0:	e8 1b       	sub	r30, r24
 4d2:	f9 0b       	sbc	r31, r25
 4d4:	f0 93 08 01 	sts	0x0108, r31	; 0x800108 <rightIRDiff+0x1>
 4d8:	e0 93 07 01 	sts	0x0107, r30	; 0x800107 <rightIRDiff>
			if (rightIRDiff < 20) // we are close enough... just stop
 4dc:	e4 31       	cpi	r30, 0x14	; 20
 4de:	f1 05       	cpc	r31, r1
 4e0:	48 f4       	brcc	.+18     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
				{rightIRDiff = 0;
 4e2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <rightIRDiff+0x1>
 4e6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <rightIRDiff>
				 oldRightIRDiff = 0;
 4ea:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <oldRightIRDiff+0x1>
 4ee:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <oldRightIRDiff>
 4f2:	06 c0       	rjmp	.+12     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
				 };//breakWhileLoopCounter++;};
			if(rightIRDiff  > 50)
 4f4:	f3 97       	sbiw	r30, 0x33	; 51
 4f6:	20 f0       	brcs	.+8      	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
				rightIRDiff = 50;
 4f8:	10 93 08 01 	sts	0x0108, r17	; 0x800108 <rightIRDiff+0x1>
 4fc:	00 93 07 01 	sts	0x0107, r16	; 0x800107 <rightIRDiff>
			errorRightIRDiff = rightIRDiff - oldRightIRDiff;
 500:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <rightIRDiff>
 504:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <rightIRDiff+0x1>
 508:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <oldRightIRDiff>
 50c:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <oldRightIRDiff+0x1>
 510:	ac 01       	movw	r20, r24
 512:	42 1b       	sub	r20, r18
 514:	53 0b       	sbc	r21, r19
 516:	9a 01       	movw	r18, r20
 518:	50 93 0f 01 	sts	0x010F, r21	; 0x80010f <errorRightIRDiff+0x1>
 51c:	40 93 0e 01 	sts	0x010E, r20	; 0x80010e <errorRightIRDiff>
			rightIRDiff =  (rightIRDiff/PFrontwallAlign) + (errorRightIRDiff/DFrontwallAlign);
 520:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <PFrontwallAlign>
 524:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <PFrontwallAlign+0x1>
 528:	0e 94 c6 02 	call	0x58c	; 0x58c <__udivmodhi4>
 52c:	fb 01       	movw	r30, r22
 52e:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <DFrontwallAlign>
 532:	70 91 04 01 	lds	r23, 0x0104	; 0x800104 <DFrontwallAlign+0x1>
 536:	c9 01       	movw	r24, r18
 538:	0e 94 c6 02 	call	0x58c	; 0x58c <__udivmodhi4>
 53c:	6e 0f       	add	r22, r30
 53e:	7f 1f       	adc	r23, r31
 540:	70 93 08 01 	sts	0x0108, r23	; 0x800108 <rightIRDiff+0x1>
 544:	60 93 07 01 	sts	0x0107, r22	; 0x800107 <rightIRDiff>
			oldRightIRDiff = rightIRDiff;
 548:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <oldRightIRDiff+0x1>
 54c:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <oldRightIRDiff>
			rightMotorSpeed = 0xFF &  rightIRDiff;// this is supposed to move the lower 8 bits into this uint_8
 550:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <rightMotorSpeed>
{	OCR1A = leftMotorRearwardSpeed;
	OCR0A = 0;
 }// the number we compare to the counter}

void rightMotorForward(uint8_t rightMotorForwardSpeed)//void)
{	OCR1B = 0;
 554:	19 82       	std	Y+1, r1	; 0x01
 556:	18 82       	st	Y, r1
	OCR0B = rightMotorForwardSpeed; 
 558:	68 bd       	out	0x28, r22	; 40
 55a:	cc ce       	rjmp	.-616    	; 0x2f4 <_Z20alignToFrontWallDEMOv+0x1e>

0000055c <main>:
void alignToFrontWallDEMO(void);


int main(void)
{ 
	RegisterInitialization();
 55c:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z22RegisterInitializationv>
	//uint16_t oldRightIRDiff = 0;
	//uint16_t errorLeftIRDiff = 0;
	//uint16_t errorRightIRDiff = 0;
	//uint16_t PFrontwallAlign = 4;
	//uint16_t DFrontwallAlign = 4;
	alignToFrontWallDEMO();
 560:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <_Z20alignToFrontWallDEMOv>

00000564 <_GLOBAL__sub_I_recievedChar>:
uint8_t leftBaseSpeed = 50;
uint8_t rightBaseSpeed = 50;
uint16_t Paway = 10;// P coefficient
uint16_t Ptoward = 5;
uint16_t D = 1;
uint16_t errorMax = ((rightBaseSpeed - 5) * Paway);//this is the max difference between 255 or 0 and Base speed, * the Propotional divider
 564:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <rightBaseSpeed>
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	05 97       	sbiw	r24, 0x05	; 5
 56c:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <Paway>
 570:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <Paway+0x1>
 574:	84 9f       	mul	r24, r20
 576:	90 01       	movw	r18, r0
 578:	85 9f       	mul	r24, r21
 57a:	30 0d       	add	r19, r0
 57c:	94 9f       	mul	r25, r20
 57e:	30 0d       	add	r19, r0
 580:	11 24       	eor	r1, r1
 582:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <__data_end+0x1>
 586:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <__data_end>
 58a:	08 95       	ret

0000058c <__udivmodhi4>:
 58c:	aa 1b       	sub	r26, r26
 58e:	bb 1b       	sub	r27, r27
 590:	51 e1       	ldi	r21, 0x11	; 17
 592:	07 c0       	rjmp	.+14     	; 0x5a2 <__udivmodhi4_ep>

00000594 <__udivmodhi4_loop>:
 594:	aa 1f       	adc	r26, r26
 596:	bb 1f       	adc	r27, r27
 598:	a6 17       	cp	r26, r22
 59a:	b7 07       	cpc	r27, r23
 59c:	10 f0       	brcs	.+4      	; 0x5a2 <__udivmodhi4_ep>
 59e:	a6 1b       	sub	r26, r22
 5a0:	b7 0b       	sbc	r27, r23

000005a2 <__udivmodhi4_ep>:
 5a2:	88 1f       	adc	r24, r24
 5a4:	99 1f       	adc	r25, r25
 5a6:	5a 95       	dec	r21
 5a8:	a9 f7       	brne	.-22     	; 0x594 <__udivmodhi4_loop>
 5aa:	80 95       	com	r24
 5ac:	90 95       	com	r25
 5ae:	bc 01       	movw	r22, r24
 5b0:	cd 01       	movw	r24, r26
 5b2:	08 95       	ret

000005b4 <__tablejump2__>:
 5b4:	ee 0f       	add	r30, r30
 5b6:	ff 1f       	adc	r31, r31
 5b8:	05 90       	lpm	r0, Z+
 5ba:	f4 91       	lpm	r31, Z
 5bc:	e0 2d       	mov	r30, r0
 5be:	09 94       	ijmp

000005c0 <_exit>:
 5c0:	f8 94       	cli

000005c2 <__stop_program>:
 5c2:	ff cf       	rjmp	.-2      	; 0x5c2 <__stop_program>
