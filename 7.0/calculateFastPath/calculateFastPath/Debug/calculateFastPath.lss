
calculateFastPath.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00001ae4  00001b78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ae4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b9  00800122  00800122  00001b9a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001b9a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001bcc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00001c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003254  00000000  00000000  00001e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000098d  00000000  00000000  00005078  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000222a  00000000  00000000  00005a05  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000728  00000000  00000000  00007c30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001134  00000000  00000000  00008358  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001bd2  00000000  00000000  0000948c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005c8  00000000  00000000  0000b05e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
       4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__vector_3>
      10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      14:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_5>
      18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
      68:	2e 0d       	add	r18, r14

0000006a <__ctors_end>:
      6a:	11 24       	eor	r1, r1
      6c:	1f be       	out	0x3f, r1	; 63
      6e:	cf ef       	ldi	r28, 0xFF	; 255
      70:	d8 e0       	ldi	r29, 0x08	; 8
      72:	de bf       	out	0x3e, r29	; 62
      74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	e4 ee       	ldi	r30, 0xE4	; 228
      7e:	fa e1       	ldi	r31, 0x1A	; 26
      80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
      82:	05 90       	lpm	r0, Z+
      84:	0d 92       	st	X+, r0
      86:	a2 32       	cpi	r26, 0x22	; 34
      88:	b1 07       	cpc	r27, r17
      8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
      8c:	21 e0       	ldi	r18, 0x01	; 1
      8e:	a2 e2       	ldi	r26, 0x22	; 34
      90:	b1 e0       	ldi	r27, 0x01	; 1
      92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
      94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
      96:	ab 3d       	cpi	r26, 0xDB	; 219
      98:	b2 07       	cpc	r27, r18
      9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
      9c:	10 e0       	ldi	r17, 0x00	; 0
      9e:	c5 e3       	ldi	r28, 0x35	; 53
      a0:	d0 e0       	ldi	r29, 0x00	; 0
      a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
      a4:	21 97       	sbiw	r28, 0x01	; 1
      a6:	fe 01       	movw	r30, r28
      a8:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <__tablejump2__>
      ac:	c4 33       	cpi	r28, 0x34	; 52
      ae:	d1 07       	cpc	r29, r17
      b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
      b2:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <main>
      b6:	0c 94 70 0d 	jmp	0x1ae0	; 0x1ae0 <_exit>

000000ba <__bad_interrupt>:
      ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <_Z22RegisterInitializationv>:


}

void findClosestUnexploredPath(void)//
{
      be:	87 b1       	in	r24, 0x07	; 7
      c0:	88 61       	ori	r24, 0x18	; 24
      c2:	87 b9       	out	0x07, r24	; 7
      c4:	83 e6       	ldi	r24, 0x63	; 99
      c6:	8a b9       	out	0x0a, r24	; 10
      c8:	87 b1       	in	r24, 0x07	; 7
      ca:	87 7d       	andi	r24, 0xD7	; 215
      cc:	87 b9       	out	0x07, r24	; 7
      ce:	84 b1       	in	r24, 0x04	; 4
      d0:	86 60       	ori	r24, 0x06	; 6
      d2:	84 b9       	out	0x04, r24	; 4
      d4:	21 e0       	ldi	r18, 0x01	; 1
      d6:	25 b9       	out	0x05, r18	; 5
      d8:	30 e8       	ldi	r19, 0x80	; 128
      da:	3b b9       	out	0x0b, r19	; 11
      dc:	83 ea       	ldi	r24, 0xA3	; 163
      de:	84 bd       	out	0x24, r24	; 36
      e0:	95 e0       	ldi	r25, 0x05	; 5
      e2:	95 bd       	out	0x25, r25	; 37
      e4:	81 ea       	ldi	r24, 0xA1	; 161
      e6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
      ea:	8d e0       	ldi	r24, 0x0D	; 13
      ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
      f0:	e1 eb       	ldi	r30, 0xB1	; 177
      f2:	f0 e0       	ldi	r31, 0x00	; 0
      f4:	80 81       	ld	r24, Z
      f6:	87 60       	ori	r24, 0x07	; 7
      f8:	80 83       	st	Z, r24
      fa:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
      fe:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     102:	87 e6       	ldi	r24, 0x67	; 103
     104:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     108:	86 e0       	ldi	r24, 0x06	; 6
     10a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     10e:	84 e8       	ldi	r24, 0x84	; 132
     110:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     114:	87 e0       	ldi	r24, 0x07	; 7
     116:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
     11a:	30 93 6d 00 	sts	0x006D, r19	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
     11e:	20 93 6b 00 	sts	0x006B, r18	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
     122:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     126:	78 94       	sei
     128:	08 95       	ret

0000012a <__vector_3>:
     12a:	1f 92       	push	r1
     12c:	0f 92       	push	r0
     12e:	0f b6       	in	r0, 0x3f	; 63
     130:	0f 92       	push	r0
     132:	11 24       	eor	r1, r1
     134:	8f 93       	push	r24
     136:	9f 93       	push	r25
     138:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <rightEncoderAPos>
     13c:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <rightEncoderAPos+0x1>
     140:	01 96       	adiw	r24, 0x01	; 1
     142:	90 93 d9 01 	sts	0x01D9, r25	; 0x8001d9 <rightEncoderAPos+0x1>
     146:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <rightEncoderAPos>
     14a:	9f 91       	pop	r25
     14c:	8f 91       	pop	r24
     14e:	0f 90       	pop	r0
     150:	0f be       	out	0x3f, r0	; 63
     152:	0f 90       	pop	r0
     154:	1f 90       	pop	r1
     156:	18 95       	reti

00000158 <__vector_5>:
     158:	1f 92       	push	r1
     15a:	0f 92       	push	r0
     15c:	0f b6       	in	r0, 0x3f	; 63
     15e:	0f 92       	push	r0
     160:	11 24       	eor	r1, r1
     162:	8f 93       	push	r24
     164:	9f 93       	push	r25
     166:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <rightEncoderAPos>
     16a:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <rightEncoderAPos+0x1>
     16e:	01 96       	adiw	r24, 0x01	; 1
     170:	90 93 d9 01 	sts	0x01D9, r25	; 0x8001d9 <rightEncoderAPos+0x1>
     174:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <rightEncoderAPos>
     178:	9f 91       	pop	r25
     17a:	8f 91       	pop	r24
     17c:	0f 90       	pop	r0
     17e:	0f be       	out	0x3f, r0	; 63
     180:	0f 90       	pop	r0
     182:	1f 90       	pop	r1
     184:	18 95       	reti

00000186 <_Z19timerInMillisecondsj>:
     186:	0f 93       	push	r16
     188:	1f 93       	push	r17
     18a:	8c 01       	movw	r16, r24
     18c:	00 0f       	add	r16, r16
     18e:	11 1f       	adc	r17, r17
     190:	88 0f       	add	r24, r24
     192:	99 1f       	adc	r25, r25
     194:	88 0f       	add	r24, r24
     196:	99 1f       	adc	r25, r25
     198:	88 0f       	add	r24, r24
     19a:	99 1f       	adc	r25, r25
     19c:	08 0f       	add	r16, r24
     19e:	19 1f       	adc	r17, r25
     1a0:	20 e0       	ldi	r18, 0x00	; 0
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	40 e0       	ldi	r20, 0x00	; 0
     1a6:	50 e0       	ldi	r21, 0x00	; 0
     1a8:	ba 01       	movw	r22, r20
     1aa:	e2 eb       	ldi	r30, 0xB2	; 178
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	80 81       	ld	r24, Z
     1b0:	81 3a       	cpi	r24, 0xA1	; 161
     1b2:	30 f4       	brcc	.+12     	; 0x1c0 <_Z19timerInMillisecondsj+0x3a>
     1b4:	80 81       	ld	r24, Z
     1b6:	8f 5f       	subi	r24, 0xFF	; 255
     1b8:	80 83       	st	Z, r24
     1ba:	80 81       	ld	r24, Z
     1bc:	81 3a       	cpi	r24, 0xA1	; 161
     1be:	d0 f3       	brcs	.-12     	; 0x1b4 <_Z19timerInMillisecondsj+0x2e>
     1c0:	10 82       	st	Z, r1
     1c2:	4f 5f       	subi	r20, 0xFF	; 255
     1c4:	5f 4f       	sbci	r21, 0xFF	; 255
     1c6:	6f 4f       	sbci	r22, 0xFF	; 255
     1c8:	7f 4f       	sbci	r23, 0xFF	; 255
     1ca:	04 17       	cp	r16, r20
     1cc:	15 07       	cpc	r17, r21
     1ce:	26 07       	cpc	r18, r22
     1d0:	37 07       	cpc	r19, r23
     1d2:	68 f7       	brcc	.-38     	; 0x1ae <_Z19timerInMillisecondsj+0x28>
     1d4:	80 e0       	ldi	r24, 0x00	; 0
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	1f 91       	pop	r17
     1da:	0f 91       	pop	r16
     1dc:	08 95       	ret

000001de <_Z13diagonalLEDOnv>:
     1de:	44 9a       	sbi	0x08, 4	; 8
     1e0:	08 95       	ret

000001e2 <_Z14diagonalLEDOffv>:
     1e2:	44 98       	cbi	0x08, 4	; 8
     1e4:	08 95       	ret

000001e6 <_Z10frontLEDOnv>:
     1e6:	43 9a       	sbi	0x08, 3	; 8
     1e8:	08 95       	ret

000001ea <_Z11frontLEDOffv>:
     1ea:	43 98       	cbi	0x08, 3	; 8
     1ec:	08 95       	ret

000001ee <_Z17IRSensorFrontLeftv>:
     1ee:	cf 93       	push	r28
     1f0:	df 93       	push	r29
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     1fa:	82 e4       	ldi	r24, 0x42	; 66
     1fc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     200:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_Z11frontLEDOffv>
     204:	ea e7       	ldi	r30, 0x7A	; 122
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	80 81       	ld	r24, Z
     20a:	80 64       	ori	r24, 0x40	; 64
     20c:	80 83       	st	Z, r24
     20e:	80 81       	ld	r24, Z
     210:	86 fd       	sbrc	r24, 6
     212:	fd cf       	rjmp	.-6      	; 0x20e <_Z17IRSensorFrontLeftv+0x20>
     214:	81 e0       	ldi	r24, 0x01	; 1
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     21c:	ea e7       	ldi	r30, 0x7A	; 122
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	80 64       	ori	r24, 0x40	; 64
     224:	80 83       	st	Z, r24
     226:	80 81       	ld	r24, Z
     228:	86 fd       	sbrc	r24, 6
     22a:	fd cf       	rjmp	.-6      	; 0x226 <_Z17IRSensorFrontLeftv+0x38>
     22c:	c0 91 78 00 	lds	r28, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     230:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     234:	d0 e0       	ldi	r29, 0x00	; 0
     236:	d8 2b       	or	r29, r24
     238:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_Z10frontLEDOnv>
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     244:	ea e7       	ldi	r30, 0x7A	; 122
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	80 81       	ld	r24, Z
     24a:	80 64       	ori	r24, 0x40	; 64
     24c:	80 83       	st	Z, r24
     24e:	80 81       	ld	r24, Z
     250:	86 fd       	sbrc	r24, 6
     252:	fd cf       	rjmp	.-6      	; 0x24e <_Z17IRSensorFrontLeftv+0x60>
     254:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_Z11frontLEDOffv>
     258:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     25c:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	92 2b       	or	r25, r18
     264:	8c 1b       	sub	r24, r28
     266:	9d 0b       	sbc	r25, r29
     268:	df 91       	pop	r29
     26a:	cf 91       	pop	r28
     26c:	08 95       	ret

0000026e <_Z18IRSensorFrontRightv>:
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     27a:	86 e4       	ldi	r24, 0x46	; 70
     27c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     280:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_Z11frontLEDOffv>
     284:	ea e7       	ldi	r30, 0x7A	; 122
     286:	f0 e0       	ldi	r31, 0x00	; 0
     288:	80 81       	ld	r24, Z
     28a:	80 64       	ori	r24, 0x40	; 64
     28c:	80 83       	st	Z, r24
     28e:	80 81       	ld	r24, Z
     290:	86 fd       	sbrc	r24, 6
     292:	fd cf       	rjmp	.-6      	; 0x28e <_Z18IRSensorFrontRightv+0x20>
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     29c:	ea e7       	ldi	r30, 0x7A	; 122
     29e:	f0 e0       	ldi	r31, 0x00	; 0
     2a0:	80 81       	ld	r24, Z
     2a2:	80 64       	ori	r24, 0x40	; 64
     2a4:	80 83       	st	Z, r24
     2a6:	80 81       	ld	r24, Z
     2a8:	86 fd       	sbrc	r24, 6
     2aa:	fd cf       	rjmp	.-6      	; 0x2a6 <_Z18IRSensorFrontRightv+0x38>
     2ac:	c0 91 78 00 	lds	r28, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     2b0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     2b4:	d0 e0       	ldi	r29, 0x00	; 0
     2b6:	d8 2b       	or	r29, r24
     2b8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_Z10frontLEDOnv>
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     2c4:	ea e7       	ldi	r30, 0x7A	; 122
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	80 81       	ld	r24, Z
     2ca:	80 64       	ori	r24, 0x40	; 64
     2cc:	80 83       	st	Z, r24
     2ce:	80 81       	ld	r24, Z
     2d0:	86 fd       	sbrc	r24, 6
     2d2:	fd cf       	rjmp	.-6      	; 0x2ce <_Z18IRSensorFrontRightv+0x60>
     2d4:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_Z11frontLEDOffv>
     2d8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     2dc:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	92 2b       	or	r25, r18
     2e4:	8c 1b       	sub	r24, r28
     2e6:	9d 0b       	sbc	r25, r29
     2e8:	df 91       	pop	r29
     2ea:	cf 91       	pop	r28
     2ec:	08 95       	ret

000002ee <_Z17IRSensorAngleLeftv>:
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     2fa:	81 e4       	ldi	r24, 0x41	; 65
     2fc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     300:	ea e7       	ldi	r30, 0x7A	; 122
     302:	f0 e0       	ldi	r31, 0x00	; 0
     304:	80 81       	ld	r24, Z
     306:	80 64       	ori	r24, 0x40	; 64
     308:	80 83       	st	Z, r24
     30a:	80 81       	ld	r24, Z
     30c:	86 fd       	sbrc	r24, 6
     30e:	fd cf       	rjmp	.-6      	; 0x30a <_Z17IRSensorAngleLeftv+0x1c>
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     318:	ea e7       	ldi	r30, 0x7A	; 122
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	80 81       	ld	r24, Z
     31e:	80 64       	ori	r24, 0x40	; 64
     320:	80 83       	st	Z, r24
     322:	80 81       	ld	r24, Z
     324:	86 fd       	sbrc	r24, 6
     326:	fd cf       	rjmp	.-6      	; 0x322 <_Z17IRSensorAngleLeftv+0x34>
     328:	c0 91 78 00 	lds	r28, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     32c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     330:	d0 e0       	ldi	r29, 0x00	; 0
     332:	d8 2b       	or	r29, r24
     334:	0e 94 ef 00 	call	0x1de	; 0x1de <_Z13diagonalLEDOnv>
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     340:	ea e7       	ldi	r30, 0x7A	; 122
     342:	f0 e0       	ldi	r31, 0x00	; 0
     344:	80 81       	ld	r24, Z
     346:	80 64       	ori	r24, 0x40	; 64
     348:	80 83       	st	Z, r24
     34a:	80 81       	ld	r24, Z
     34c:	86 fd       	sbrc	r24, 6
     34e:	fd cf       	rjmp	.-6      	; 0x34a <_Z17IRSensorAngleLeftv+0x5c>
     350:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z14diagonalLEDOffv>
     354:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     358:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	92 2b       	or	r25, r18
     360:	8c 1b       	sub	r24, r28
     362:	9d 0b       	sbc	r25, r29
     364:	df 91       	pop	r29
     366:	cf 91       	pop	r28
     368:	08 95       	ret

0000036a <_Z18IRSensorAngleRightv>:
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     376:	87 e4       	ldi	r24, 0x47	; 71
     378:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     37c:	ea e7       	ldi	r30, 0x7A	; 122
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	80 81       	ld	r24, Z
     382:	80 64       	ori	r24, 0x40	; 64
     384:	80 83       	st	Z, r24
     386:	80 81       	ld	r24, Z
     388:	86 fd       	sbrc	r24, 6
     38a:	fd cf       	rjmp	.-6      	; 0x386 <_Z18IRSensorAngleRightv+0x1c>
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     394:	ea e7       	ldi	r30, 0x7A	; 122
     396:	f0 e0       	ldi	r31, 0x00	; 0
     398:	80 81       	ld	r24, Z
     39a:	80 64       	ori	r24, 0x40	; 64
     39c:	80 83       	st	Z, r24
     39e:	80 81       	ld	r24, Z
     3a0:	86 fd       	sbrc	r24, 6
     3a2:	fd cf       	rjmp	.-6      	; 0x39e <_Z18IRSensorAngleRightv+0x34>
     3a4:	c0 91 78 00 	lds	r28, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     3a8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     3ac:	d0 e0       	ldi	r29, 0x00	; 0
     3ae:	d8 2b       	or	r29, r24
     3b0:	0e 94 ef 00 	call	0x1de	; 0x1de <_Z13diagonalLEDOnv>
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     3bc:	ea e7       	ldi	r30, 0x7A	; 122
     3be:	f0 e0       	ldi	r31, 0x00	; 0
     3c0:	80 81       	ld	r24, Z
     3c2:	80 64       	ori	r24, 0x40	; 64
     3c4:	80 83       	st	Z, r24
     3c6:	80 81       	ld	r24, Z
     3c8:	86 fd       	sbrc	r24, 6
     3ca:	fd cf       	rjmp	.-6      	; 0x3c6 <_Z18IRSensorAngleRightv+0x5c>
     3cc:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z14diagonalLEDOffv>
     3d0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     3d4:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	92 2b       	or	r25, r18
     3dc:	8c 1b       	sub	r24, r28
     3de:	9d 0b       	sbc	r25, r29
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	08 95       	ret

000003e6 <_Z21IRSensorFrontRightLEDv>:
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     3ee:	86 e4       	ldi	r24, 0x46	; 70
     3f0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     3f4:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_Z11frontLEDOffv>
     3f8:	ea e7       	ldi	r30, 0x7A	; 122
     3fa:	f0 e0       	ldi	r31, 0x00	; 0
     3fc:	80 81       	ld	r24, Z
     3fe:	80 64       	ori	r24, 0x40	; 64
     400:	80 83       	st	Z, r24
     402:	80 81       	ld	r24, Z
     404:	86 fd       	sbrc	r24, 6
     406:	fd cf       	rjmp	.-6      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     410:	ea e7       	ldi	r30, 0x7A	; 122
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	80 81       	ld	r24, Z
     416:	80 64       	ori	r24, 0x40	; 64
     418:	80 83       	st	Z, r24
     41a:	80 81       	ld	r24, Z
     41c:	86 fd       	sbrc	r24, 6
     41e:	fd cf       	rjmp	.-6      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     420:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_Z10frontLEDOnv>
     424:	81 e0       	ldi	r24, 0x01	; 1
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     42c:	ea e7       	ldi	r30, 0x7A	; 122
     42e:	f0 e0       	ldi	r31, 0x00	; 0
     430:	80 81       	ld	r24, Z
     432:	80 64       	ori	r24, 0x40	; 64
     434:	80 83       	st	Z, r24
     436:	80 81       	ld	r24, Z
     438:	86 fd       	sbrc	r24, 6
     43a:	fd cf       	rjmp	.-6      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     43c:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_Z11frontLEDOffv>
     440:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     444:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	92 2b       	or	r25, r18
     44c:	08 95       	ret

0000044e <_Z20IRSensorAngleLeftLEDv>:
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     456:	81 e4       	ldi	r24, 0x41	; 65
     458:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     45c:	ea e7       	ldi	r30, 0x7A	; 122
     45e:	f0 e0       	ldi	r31, 0x00	; 0
     460:	80 81       	ld	r24, Z
     462:	80 64       	ori	r24, 0x40	; 64
     464:	80 83       	st	Z, r24
     466:	80 81       	ld	r24, Z
     468:	86 fd       	sbrc	r24, 6
     46a:	fd cf       	rjmp	.-6      	; 0x466 <_Z20IRSensorAngleLeftLEDv+0x18>
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     474:	ea e7       	ldi	r30, 0x7A	; 122
     476:	f0 e0       	ldi	r31, 0x00	; 0
     478:	80 81       	ld	r24, Z
     47a:	80 64       	ori	r24, 0x40	; 64
     47c:	80 83       	st	Z, r24
     47e:	80 81       	ld	r24, Z
     480:	86 fd       	sbrc	r24, 6
     482:	fd cf       	rjmp	.-6      	; 0x47e <_Z20IRSensorAngleLeftLEDv+0x30>
     484:	0e 94 ef 00 	call	0x1de	; 0x1de <_Z13diagonalLEDOnv>
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     490:	ea e7       	ldi	r30, 0x7A	; 122
     492:	f0 e0       	ldi	r31, 0x00	; 0
     494:	80 81       	ld	r24, Z
     496:	80 64       	ori	r24, 0x40	; 64
     498:	80 83       	st	Z, r24
     49a:	80 81       	ld	r24, Z
     49c:	86 fd       	sbrc	r24, 6
     49e:	fd cf       	rjmp	.-6      	; 0x49a <_Z20IRSensorAngleLeftLEDv+0x4c>
     4a0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z14diagonalLEDOffv>
     4a4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     4a8:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	92 2b       	or	r25, r18
     4b0:	08 95       	ret

000004b2 <_Z21IRSensorAngleRightLEDv>:
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     4ba:	87 e4       	ldi	r24, 0x47	; 71
     4bc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     4c0:	ea e7       	ldi	r30, 0x7A	; 122
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	80 81       	ld	r24, Z
     4c6:	80 64       	ori	r24, 0x40	; 64
     4c8:	80 83       	st	Z, r24
     4ca:	80 81       	ld	r24, Z
     4cc:	86 fd       	sbrc	r24, 6
     4ce:	fd cf       	rjmp	.-6      	; 0x4ca <_Z21IRSensorAngleRightLEDv+0x18>
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     4d8:	ea e7       	ldi	r30, 0x7A	; 122
     4da:	f0 e0       	ldi	r31, 0x00	; 0
     4dc:	80 81       	ld	r24, Z
     4de:	80 64       	ori	r24, 0x40	; 64
     4e0:	80 83       	st	Z, r24
     4e2:	80 81       	ld	r24, Z
     4e4:	86 fd       	sbrc	r24, 6
     4e6:	fd cf       	rjmp	.-6      	; 0x4e2 <_Z21IRSensorAngleRightLEDv+0x30>
     4e8:	0e 94 ef 00 	call	0x1de	; 0x1de <_Z13diagonalLEDOnv>
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     4f4:	ea e7       	ldi	r30, 0x7A	; 122
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	80 81       	ld	r24, Z
     4fa:	80 64       	ori	r24, 0x40	; 64
     4fc:	80 83       	st	Z, r24
     4fe:	80 81       	ld	r24, Z
     500:	86 fd       	sbrc	r24, 6
     502:	fd cf       	rjmp	.-6      	; 0x4fe <_Z21IRSensorAngleRightLEDv+0x4c>
     504:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z14diagonalLEDOffv>
     508:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     50c:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	92 2b       	or	r25, r18
     514:	08 95       	ret

00000516 <_Z10checkWallsv>:
     516:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <cellWalls>
     51a:	0e 94 77 01 	call	0x2ee	; 0x2ee <_Z17IRSensorAngleLeftv>
     51e:	80 3b       	cpi	r24, 0xB0	; 176
     520:	91 05       	cpc	r25, r1
     522:	28 f0       	brcs	.+10     	; 0x52e <_Z10checkWallsv+0x18>
     524:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <cellWalls>
     528:	81 60       	ori	r24, 0x01	; 1
     52a:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <cellWalls>
     52e:	0e 94 37 01 	call	0x26e	; 0x26e <_Z18IRSensorFrontRightv>
     532:	4f 97       	sbiw	r24, 0x1f	; 31
     534:	28 f0       	brcs	.+10     	; 0x540 <_Z10checkWallsv+0x2a>
     536:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <cellWalls>
     53a:	82 60       	ori	r24, 0x02	; 2
     53c:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <cellWalls>
     540:	0e 94 b5 01 	call	0x36a	; 0x36a <_Z18IRSensorAngleRightv>
     544:	80 3b       	cpi	r24, 0xB0	; 176
     546:	91 05       	cpc	r25, r1
     548:	28 f0       	brcs	.+10     	; 0x554 <_Z10checkWallsv+0x3e>
     54a:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <cellWalls>
     54e:	84 60       	ori	r24, 0x04	; 4
     550:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <cellWalls>
     554:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <cellWalls>
     558:	08 95       	ret

0000055a <_Z15rightEncoder180v>:
     55a:	ef 92       	push	r14
     55c:	ff 92       	push	r15
     55e:	0f 93       	push	r16
     560:	1f 93       	push	r17
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	ca e0       	ldi	r28, 0x0A	; 10
     568:	d0 e0       	ldi	r29, 0x00	; 0
     56a:	0f 2e       	mov	r0, r31
     56c:	f8 e8       	ldi	r31, 0x88	; 136
     56e:	ef 2e       	mov	r14, r31
     570:	f1 2c       	mov	r15, r1
     572:	f0 2d       	mov	r31, r0
     574:	0a e8       	ldi	r16, 0x8A	; 138
     576:	10 e0       	ldi	r17, 0x00	; 0
     578:	f7 01       	movw	r30, r14
     57a:	11 82       	std	Z+1, r1	; 0x01
     57c:	10 82       	st	Z, r1
     57e:	c7 bd       	out	0x27, r28	; 39
     580:	f8 01       	movw	r30, r16
     582:	d1 83       	std	Z+1, r29	; 0x01
     584:	c0 83       	st	Z, r28
     586:	18 bc       	out	0x28, r1	; 40
     588:	84 e1       	ldi	r24, 0x14	; 20
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     590:	2a 96       	adiw	r28, 0x0a	; 10
     592:	c2 33       	cpi	r28, 0x32	; 50
     594:	d1 05       	cpc	r29, r1
     596:	81 f7       	brne	.-32     	; 0x578 <_Z15rightEncoder180v+0x1e>
     598:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <rightEncoderAPos+0x1>
     59c:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <rightEncoderAPos>
     5a0:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <rightEncoderAPos>
     5a4:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <rightEncoderAPos+0x1>
     5a8:	82 31       	cpi	r24, 0x12	; 18
     5aa:	92 40       	sbci	r25, 0x02	; 2
     5ac:	78 f5       	brcc	.+94     	; 0x60c <_Z15rightEncoder180v+0xb2>
     5ae:	a8 e8       	ldi	r26, 0x88	; 136
     5b0:	b0 e0       	ldi	r27, 0x00	; 0
     5b2:	42 e3       	ldi	r20, 0x32	; 50
     5b4:	ea e8       	ldi	r30, 0x8A	; 138
     5b6:	f0 e0       	ldi	r31, 0x00	; 0
     5b8:	22 e3       	ldi	r18, 0x32	; 50
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	11 96       	adiw	r26, 0x01	; 1
     5be:	1c 92       	st	X, r1
     5c0:	1e 92       	st	-X, r1
     5c2:	47 bd       	out	0x27, r20	; 39
     5c4:	31 83       	std	Z+1, r19	; 0x01
     5c6:	20 83       	st	Z, r18
     5c8:	18 bc       	out	0x28, r1	; 40
     5ca:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <rightEncoderAPos>
     5ce:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <rightEncoderAPos+0x1>
     5d2:	82 31       	cpi	r24, 0x12	; 18
     5d4:	92 40       	sbci	r25, 0x02	; 2
     5d6:	90 f3       	brcs	.-28     	; 0x5bc <_Z15rightEncoder180v+0x62>
     5d8:	19 c0       	rjmp	.+50     	; 0x60c <_Z15rightEncoder180v+0xb2>
     5da:	f7 01       	movw	r30, r14
     5dc:	11 82       	std	Z+1, r1	; 0x01
     5de:	10 82       	st	Z, r1
     5e0:	c7 bd       	out	0x27, r28	; 39
     5e2:	f8 01       	movw	r30, r16
     5e4:	d1 83       	std	Z+1, r29	; 0x01
     5e6:	c0 83       	st	Z, r28
     5e8:	18 bc       	out	0x28, r1	; 40
     5ea:	84 e1       	ldi	r24, 0x14	; 20
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     5f2:	2a 97       	sbiw	r28, 0x0a	; 10
     5f4:	91 f7       	brne	.-28     	; 0x5da <_Z15rightEncoder180v+0x80>
     5f6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     5fa:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     5fe:	17 bc       	out	0x27, r1	; 39
     600:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     604:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     608:	18 bc       	out	0x28, r1	; 40
     60a:	08 c0       	rjmp	.+16     	; 0x61c <_Z15rightEncoder180v+0xc2>
     60c:	0f 2e       	mov	r0, r31
     60e:	f8 e8       	ldi	r31, 0x88	; 136
     610:	ef 2e       	mov	r14, r31
     612:	f1 2c       	mov	r15, r1
     614:	f0 2d       	mov	r31, r0
     616:	0a e8       	ldi	r16, 0x8A	; 138
     618:	10 e0       	ldi	r17, 0x00	; 0
     61a:	df cf       	rjmp	.-66     	; 0x5da <_Z15rightEncoder180v+0x80>
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	1f 91       	pop	r17
     622:	0f 91       	pop	r16
     624:	ff 90       	pop	r15
     626:	ef 90       	pop	r14
     628:	08 95       	ret

0000062a <_Z22startGyroADCConversionv>:
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     632:	80 e4       	ldi	r24, 0x40	; 64
     634:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     638:	ea e7       	ldi	r30, 0x7A	; 122
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	80 81       	ld	r24, Z
     63e:	80 64       	ori	r24, 0x40	; 64
     640:	80 83       	st	Z, r24
     642:	80 81       	ld	r24, Z
     644:	86 fd       	sbrc	r24, 6
     646:	fd cf       	rjmp	.-6      	; 0x642 <_Z22startGyroADCConversionv+0x18>
     648:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     64c:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	92 2b       	or	r25, r18
     654:	08 95       	ret

00000656 <_Z12leftGyroTurnv>:
     656:	df 92       	push	r13
     658:	ef 92       	push	r14
     65a:	ff 92       	push	r15
     65c:	0f 93       	push	r16
     65e:	1f 93       	push	r17
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <gyroBreakWhileLoopCounter+0x1>
     668:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <gyroBreakWhileLoopCounter>
     66c:	84 e3       	ldi	r24, 0x34	; 52
     66e:	98 e0       	ldi	r25, 0x08	; 8
     670:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <leftTurnValue+0x1>
     674:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <leftTurnValue>
     678:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     67c:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     680:	82 e3       	ldi	r24, 0x32	; 50
     682:	88 bd       	out	0x28, r24	; 40
     684:	82 e3       	ldi	r24, 0x32	; 50
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     68c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     690:	17 bc       	out	0x27, r1	; 39
     692:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <gyroBreakWhileLoopCounter>
     696:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <gyroBreakWhileLoopCounter+0x1>
     69a:	84 36       	cpi	r24, 0x64	; 100
     69c:	91 05       	cpc	r25, r1
     69e:	08 f0       	brcs	.+2      	; 0x6a2 <_Z12leftGyroTurnv+0x4c>
     6a0:	bc c0       	rjmp	.+376    	; 0x81a <_Z12leftGyroTurnv+0x1c4>
     6a2:	0f 2e       	mov	r0, r31
     6a4:	f2 e3       	ldi	r31, 0x32	; 50
     6a6:	ef 2e       	mov	r14, r31
     6a8:	f1 2c       	mov	r15, r1
     6aa:	f0 2d       	mov	r31, r0
     6ac:	0f 2e       	mov	r0, r31
     6ae:	f2 e3       	ldi	r31, 0x32	; 50
     6b0:	df 2e       	mov	r13, r31
     6b2:	f0 2d       	mov	r31, r0
     6b4:	0a e8       	ldi	r16, 0x8A	; 138
     6b6:	10 e0       	ldi	r17, 0x00	; 0
     6b8:	c8 e8       	ldi	r28, 0x88	; 136
     6ba:	d0 e0       	ldi	r29, 0x00	; 0
     6bc:	0e 94 15 03 	call	0x62a	; 0x62a <_Z22startGyroADCConversionv>
     6c0:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <gyroValue+0x1>
     6c4:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <gyroValue>
     6c8:	82 33       	cpi	r24, 0x32	; 50
     6ca:	21 e0       	ldi	r18, 0x01	; 1
     6cc:	92 07       	cpc	r25, r18
     6ce:	60 f0       	brcs	.+24     	; 0x6e8 <_Z12leftGyroTurnv+0x92>
     6d0:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <leftTurnValue>
     6d4:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <leftTurnValue+0x1>
     6d8:	23 5d       	subi	r18, 0xD3	; 211
     6da:	3e 4f       	sbci	r19, 0xFE	; 254
     6dc:	28 1b       	sub	r18, r24
     6de:	39 0b       	sbc	r19, r25
     6e0:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <leftTurnValue+0x1>
     6e4:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <leftTurnValue>
     6e8:	89 32       	cpi	r24, 0x29	; 41
     6ea:	41 e0       	ldi	r20, 0x01	; 1
     6ec:	94 07       	cpc	r25, r20
     6ee:	68 f4       	brcc	.+26     	; 0x70a <_Z12leftGyroTurnv+0xb4>
     6f0:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <leftTurnValue>
     6f4:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <leftTurnValue+0x1>
     6f8:	23 5d       	subi	r18, 0xD3	; 211
     6fa:	3e 4f       	sbci	r19, 0xFE	; 254
     6fc:	f9 01       	movw	r30, r18
     6fe:	e8 1b       	sub	r30, r24
     700:	f9 0b       	sbc	r31, r25
     702:	f0 93 1d 01 	sts	0x011D, r31	; 0x80011d <leftTurnValue+0x1>
     706:	e0 93 1c 01 	sts	0x011C, r30	; 0x80011c <leftTurnValue>
     70a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <leftTurnValue>
     70e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <leftTurnValue+0x1>
     712:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <oldmotorSpeed>
     716:	30 91 42 01 	lds	r19, 0x0142	; 0x800142 <oldmotorSpeed+0x1>
     71a:	ac 01       	movw	r20, r24
     71c:	42 1b       	sub	r20, r18
     71e:	53 0b       	sbc	r21, r19
     720:	9a 01       	movw	r18, r20
     722:	50 93 40 01 	sts	0x0140, r21	; 0x800140 <errormotorSpeedDiff+0x1>
     726:	40 93 3f 01 	sts	0x013F, r20	; 0x80013f <errormotorSpeedDiff>
     72a:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <PGyroTurn>
     72e:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <PGyroTurn+0x1>
     732:	0e 94 56 0d 	call	0x1aac	; 0x1aac <__divmodhi4>
     736:	fb 01       	movw	r30, r22
     738:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <DGyroTurn>
     73c:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <DGyroTurn+0x1>
     740:	c9 01       	movw	r24, r18
     742:	0e 94 56 0d 	call	0x1aac	; 0x1aac <__divmodhi4>
     746:	6e 0f       	add	r22, r30
     748:	7f 1f       	adc	r23, r31
     74a:	70 93 44 01 	sts	0x0144, r23	; 0x800144 <motorSpeed16Bit+0x1>
     74e:	60 93 43 01 	sts	0x0143, r22	; 0x800143 <motorSpeed16Bit>
     752:	70 93 42 01 	sts	0x0142, r23	; 0x800142 <oldmotorSpeed+0x1>
     756:	60 93 41 01 	sts	0x0141, r22	; 0x800141 <oldmotorSpeed>
     75a:	63 33       	cpi	r22, 0x33	; 51
     75c:	71 05       	cpc	r23, r1
     75e:	84 f0       	brlt	.+32     	; 0x780 <_Z12leftGyroTurnv+0x12a>
     760:	f0 92 44 01 	sts	0x0144, r15	; 0x800144 <motorSpeed16Bit+0x1>
     764:	e0 92 43 01 	sts	0x0143, r14	; 0x800143 <motorSpeed16Bit>
     768:	d0 92 45 01 	sts	0x0145, r13	; 0x800145 <motorSpeed8Bit>
     76c:	f8 01       	movw	r30, r16
     76e:	11 82       	std	Z+1, r1	; 0x01
     770:	10 82       	st	Z, r1
     772:	d8 bc       	out	0x28, r13	; 40
     774:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <motorSpeed8Bit>
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	99 83       	std	Y+1, r25	; 0x01
     77c:	88 83       	st	Y, r24
     77e:	17 bc       	out	0x27, r1	; 39
     780:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <motorSpeed16Bit>
     784:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <motorSpeed16Bit+0x1>
     788:	8e 3c       	cpi	r24, 0xCE	; 206
     78a:	9f 4f       	sbci	r25, 0xFF	; 255
     78c:	84 f4       	brge	.+32     	; 0x7ae <_Z12leftGyroTurnv+0x158>
     78e:	f0 92 44 01 	sts	0x0144, r15	; 0x800144 <motorSpeed16Bit+0x1>
     792:	e0 92 43 01 	sts	0x0143, r14	; 0x800143 <motorSpeed16Bit>
     796:	d0 92 45 01 	sts	0x0145, r13	; 0x800145 <motorSpeed8Bit>
     79a:	19 82       	std	Y+1, r1	; 0x01
     79c:	18 82       	st	Y, r1
     79e:	d7 bc       	out	0x27, r13	; 39
     7a0:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <motorSpeed8Bit>
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	f8 01       	movw	r30, r16
     7a8:	91 83       	std	Z+1, r25	; 0x01
     7aa:	80 83       	st	Z, r24
     7ac:	18 bc       	out	0x28, r1	; 40
     7ae:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <motorSpeed16Bit>
     7b2:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <motorSpeed16Bit+0x1>
     7b6:	9c 01       	movw	r18, r24
     7b8:	20 5d       	subi	r18, 0xD0	; 208
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	21 36       	cpi	r18, 0x61	; 97
     7be:	31 05       	cpc	r19, r1
     7c0:	80 f4       	brcc	.+32     	; 0x7e2 <_Z12leftGyroTurnv+0x18c>
     7c2:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <motorSpeed8Bit>
     7c6:	22 23       	and	r18, r18
     7c8:	61 f0       	breq	.+24     	; 0x7e2 <_Z12leftGyroTurnv+0x18c>
     7ca:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <motorSpeed8Bit>
     7ce:	f8 01       	movw	r30, r16
     7d0:	11 82       	std	Z+1, r1	; 0x01
     7d2:	10 82       	st	Z, r1
     7d4:	88 bd       	out	0x28, r24	; 40
     7d6:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <motorSpeed8Bit>
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	99 83       	std	Y+1, r25	; 0x01
     7de:	88 83       	st	Y, r24
     7e0:	17 bc       	out	0x27, r1	; 39
     7e2:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <motorSpeed16Bit>
     7e6:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <motorSpeed16Bit+0x1>
     7ea:	0e 96       	adiw	r24, 0x0e	; 14
     7ec:	4d 97       	sbiw	r24, 0x1d	; 29
     7ee:	48 f4       	brcc	.+18     	; 0x802 <_Z12leftGyroTurnv+0x1ac>
     7f0:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <gyroBreakWhileLoopCounter>
     7f4:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <gyroBreakWhileLoopCounter+0x1>
     7f8:	01 96       	adiw	r24, 0x01	; 1
     7fa:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <gyroBreakWhileLoopCounter+0x1>
     7fe:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <gyroBreakWhileLoopCounter>
     802:	87 e0       	ldi	r24, 0x07	; 7
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     80a:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <gyroBreakWhileLoopCounter>
     80e:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <gyroBreakWhileLoopCounter+0x1>
     812:	84 36       	cpi	r24, 0x64	; 100
     814:	91 05       	cpc	r25, r1
     816:	08 f4       	brcc	.+2      	; 0x81a <_Z12leftGyroTurnv+0x1c4>
     818:	51 cf       	rjmp	.-350    	; 0x6bc <_Z12leftGyroTurnv+0x66>
     81a:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     81e:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     822:	18 bc       	out	0x28, r1	; 40
     824:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     828:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     82c:	17 bc       	out	0x27, r1	; 39
     82e:	df 91       	pop	r29
     830:	cf 91       	pop	r28
     832:	1f 91       	pop	r17
     834:	0f 91       	pop	r16
     836:	ff 90       	pop	r15
     838:	ef 90       	pop	r14
     83a:	df 90       	pop	r13
     83c:	08 95       	ret

0000083e <_Z13rightGyroTurnv>:
     83e:	df 92       	push	r13
     840:	ef 92       	push	r14
     842:	ff 92       	push	r15
     844:	0f 93       	push	r16
     846:	1f 93       	push	r17
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <gyroBreakWhileLoopCounter+0x1>
     850:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <gyroBreakWhileLoopCounter>
     854:	88 ed       	ldi	r24, 0xD8	; 216
     856:	95 ef       	ldi	r25, 0xF5	; 245
     858:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <rightTurnValue+0x1>
     85c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <rightTurnValue>
     860:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     864:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     868:	82 e3       	ldi	r24, 0x32	; 50
     86a:	87 bd       	out	0x27, r24	; 39
     86c:	82 e3       	ldi	r24, 0x32	; 50
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     874:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     878:	18 bc       	out	0x28, r1	; 40
     87a:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <gyroBreakWhileLoopCounter>
     87e:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <gyroBreakWhileLoopCounter+0x1>
     882:	84 36       	cpi	r24, 0x64	; 100
     884:	91 05       	cpc	r25, r1
     886:	08 f0       	brcs	.+2      	; 0x88a <_Z13rightGyroTurnv+0x4c>
     888:	d8 c0       	rjmp	.+432    	; 0xa3a <__stack+0x13b>
     88a:	0f 2e       	mov	r0, r31
     88c:	f2 e3       	ldi	r31, 0x32	; 50
     88e:	ef 2e       	mov	r14, r31
     890:	f1 2c       	mov	r15, r1
     892:	f0 2d       	mov	r31, r0
     894:	0f 2e       	mov	r0, r31
     896:	f2 e3       	ldi	r31, 0x32	; 50
     898:	df 2e       	mov	r13, r31
     89a:	f0 2d       	mov	r31, r0
     89c:	0a e8       	ldi	r16, 0x8A	; 138
     89e:	10 e0       	ldi	r17, 0x00	; 0
     8a0:	c8 e8       	ldi	r28, 0x88	; 136
     8a2:	d0 e0       	ldi	r29, 0x00	; 0
     8a4:	0e 94 15 03 	call	0x62a	; 0x62a <_Z22startGyroADCConversionv>
     8a8:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <gyroValue+0x1>
     8ac:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <gyroValue>
     8b0:	82 33       	cpi	r24, 0x32	; 50
     8b2:	21 e0       	ldi	r18, 0x01	; 1
     8b4:	92 07       	cpc	r25, r18
     8b6:	60 f0       	brcs	.+24     	; 0x8d0 <_Z13rightGyroTurnv+0x92>
     8b8:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <rightTurnValue>
     8bc:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <rightTurnValue+0x1>
     8c0:	23 5d       	subi	r18, 0xD3	; 211
     8c2:	3e 4f       	sbci	r19, 0xFE	; 254
     8c4:	28 1b       	sub	r18, r24
     8c6:	39 0b       	sbc	r19, r25
     8c8:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <rightTurnValue+0x1>
     8cc:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <rightTurnValue>
     8d0:	89 32       	cpi	r24, 0x29	; 41
     8d2:	41 e0       	ldi	r20, 0x01	; 1
     8d4:	94 07       	cpc	r25, r20
     8d6:	68 f4       	brcc	.+26     	; 0x8f2 <_Z13rightGyroTurnv+0xb4>
     8d8:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <rightTurnValue>
     8dc:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <rightTurnValue+0x1>
     8e0:	23 5d       	subi	r18, 0xD3	; 211
     8e2:	3e 4f       	sbci	r19, 0xFE	; 254
     8e4:	f9 01       	movw	r30, r18
     8e6:	e8 1b       	sub	r30, r24
     8e8:	f9 0b       	sbc	r31, r25
     8ea:	f0 93 1b 01 	sts	0x011B, r31	; 0x80011b <rightTurnValue+0x1>
     8ee:	e0 93 1a 01 	sts	0x011A, r30	; 0x80011a <rightTurnValue>
     8f2:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <rightTurnValue>
     8f6:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <rightTurnValue+0x1>
     8fa:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <oldmotorSpeed>
     8fe:	30 91 42 01 	lds	r19, 0x0142	; 0x800142 <oldmotorSpeed+0x1>
     902:	ac 01       	movw	r20, r24
     904:	42 1b       	sub	r20, r18
     906:	53 0b       	sbc	r21, r19
     908:	9a 01       	movw	r18, r20
     90a:	50 93 40 01 	sts	0x0140, r21	; 0x800140 <errormotorSpeedDiff+0x1>
     90e:	40 93 3f 01 	sts	0x013F, r20	; 0x80013f <errormotorSpeedDiff>
     912:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <PGyroTurn>
     916:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <PGyroTurn+0x1>
     91a:	0e 94 56 0d 	call	0x1aac	; 0x1aac <__divmodhi4>
     91e:	fb 01       	movw	r30, r22
     920:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <DGyroTurn>
     924:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <DGyroTurn+0x1>
     928:	c9 01       	movw	r24, r18
     92a:	0e 94 56 0d 	call	0x1aac	; 0x1aac <__divmodhi4>
     92e:	6e 0f       	add	r22, r30
     930:	7f 1f       	adc	r23, r31
     932:	70 93 44 01 	sts	0x0144, r23	; 0x800144 <motorSpeed16Bit+0x1>
     936:	60 93 43 01 	sts	0x0143, r22	; 0x800143 <motorSpeed16Bit>
     93a:	70 93 42 01 	sts	0x0142, r23	; 0x800142 <oldmotorSpeed+0x1>
     93e:	60 93 41 01 	sts	0x0141, r22	; 0x800141 <oldmotorSpeed>
     942:	63 33       	cpi	r22, 0x33	; 51
     944:	71 05       	cpc	r23, r1
     946:	84 f0       	brlt	.+32     	; 0x968 <__stack+0x69>
     948:	f0 92 44 01 	sts	0x0144, r15	; 0x800144 <motorSpeed16Bit+0x1>
     94c:	e0 92 43 01 	sts	0x0143, r14	; 0x800143 <motorSpeed16Bit>
     950:	d0 92 45 01 	sts	0x0145, r13	; 0x800145 <motorSpeed8Bit>
     954:	f8 01       	movw	r30, r16
     956:	11 82       	std	Z+1, r1	; 0x01
     958:	10 82       	st	Z, r1
     95a:	d8 bc       	out	0x28, r13	; 40
     95c:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <motorSpeed8Bit>
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	99 83       	std	Y+1, r25	; 0x01
     964:	88 83       	st	Y, r24
     966:	17 bc       	out	0x27, r1	; 39
     968:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <motorSpeed16Bit>
     96c:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <motorSpeed16Bit+0x1>
     970:	8e 3c       	cpi	r24, 0xCE	; 206
     972:	9f 4f       	sbci	r25, 0xFF	; 255
     974:	84 f4       	brge	.+32     	; 0x996 <__stack+0x97>
     976:	f0 92 44 01 	sts	0x0144, r15	; 0x800144 <motorSpeed16Bit+0x1>
     97a:	e0 92 43 01 	sts	0x0143, r14	; 0x800143 <motorSpeed16Bit>
     97e:	d0 92 45 01 	sts	0x0145, r13	; 0x800145 <motorSpeed8Bit>
     982:	19 82       	std	Y+1, r1	; 0x01
     984:	18 82       	st	Y, r1
     986:	d7 bc       	out	0x27, r13	; 39
     988:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <motorSpeed8Bit>
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	f8 01       	movw	r30, r16
     990:	91 83       	std	Z+1, r25	; 0x01
     992:	80 83       	st	Z, r24
     994:	18 bc       	out	0x28, r1	; 40
     996:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <motorSpeed16Bit>
     99a:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <motorSpeed16Bit+0x1>
     99e:	9c 01       	movw	r18, r24
     9a0:	20 5d       	subi	r18, 0xD0	; 208
     9a2:	3f 4f       	sbci	r19, 0xFF	; 255
     9a4:	21 36       	cpi	r18, 0x61	; 97
     9a6:	31 05       	cpc	r19, r1
     9a8:	60 f5       	brcc	.+88     	; 0xa02 <__stack+0x103>
     9aa:	18 16       	cp	r1, r24
     9ac:	19 06       	cpc	r1, r25
     9ae:	64 f4       	brge	.+24     	; 0x9c8 <__stack+0xc9>
     9b0:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <motorSpeed8Bit>
     9b4:	f8 01       	movw	r30, r16
     9b6:	11 82       	std	Z+1, r1	; 0x01
     9b8:	10 82       	st	Z, r1
     9ba:	88 bd       	out	0x28, r24	; 40
     9bc:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <motorSpeed8Bit>
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	99 83       	std	Y+1, r25	; 0x01
     9c4:	88 83       	st	Y, r24
     9c6:	17 bc       	out	0x27, r1	; 39
     9c8:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <motorSpeed16Bit>
     9cc:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <motorSpeed16Bit+0x1>
     9d0:	99 23       	and	r25, r25
     9d2:	bc f4       	brge	.+46     	; 0xa02 <__stack+0x103>
     9d4:	9c 01       	movw	r18, r24
     9d6:	99 23       	and	r25, r25
     9d8:	24 f4       	brge	.+8      	; 0x9e2 <__stack+0xe3>
     9da:	22 27       	eor	r18, r18
     9dc:	33 27       	eor	r19, r19
     9de:	28 1b       	sub	r18, r24
     9e0:	39 0b       	sbc	r19, r25
     9e2:	20 93 43 01 	sts	0x0143, r18	; 0x800143 <motorSpeed16Bit>
     9e6:	30 93 44 01 	sts	0x0144, r19	; 0x800144 <motorSpeed16Bit+0x1>
     9ea:	20 93 45 01 	sts	0x0145, r18	; 0x800145 <motorSpeed8Bit>
     9ee:	19 82       	std	Y+1, r1	; 0x01
     9f0:	18 82       	st	Y, r1
     9f2:	27 bd       	out	0x27, r18	; 39
     9f4:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <motorSpeed8Bit>
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	f8 01       	movw	r30, r16
     9fc:	91 83       	std	Z+1, r25	; 0x01
     9fe:	80 83       	st	Z, r24
     a00:	18 bc       	out	0x28, r1	; 40
     a02:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <motorSpeed16Bit>
     a06:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <motorSpeed16Bit+0x1>
     a0a:	0e 96       	adiw	r24, 0x0e	; 14
     a0c:	4d 97       	sbiw	r24, 0x1d	; 29
     a0e:	48 f4       	brcc	.+18     	; 0xa22 <__stack+0x123>
     a10:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <gyroBreakWhileLoopCounter>
     a14:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <gyroBreakWhileLoopCounter+0x1>
     a18:	01 96       	adiw	r24, 0x01	; 1
     a1a:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <gyroBreakWhileLoopCounter+0x1>
     a1e:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <gyroBreakWhileLoopCounter>
     a22:	87 e0       	ldi	r24, 0x07	; 7
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     a2a:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <gyroBreakWhileLoopCounter>
     a2e:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <gyroBreakWhileLoopCounter+0x1>
     a32:	84 36       	cpi	r24, 0x64	; 100
     a34:	91 05       	cpc	r25, r1
     a36:	08 f4       	brcc	.+2      	; 0xa3a <__stack+0x13b>
     a38:	35 cf       	rjmp	.-406    	; 0x8a4 <_Z13rightGyroTurnv+0x66>
     a3a:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     a3e:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     a42:	18 bc       	out	0x28, r1	; 40
     a44:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     a48:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     a4c:	17 bc       	out	0x27, r1	; 39
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	1f 91       	pop	r17
     a54:	0f 91       	pop	r16
     a56:	ff 90       	pop	r15
     a58:	ef 90       	pop	r14
     a5a:	df 90       	pop	r13
     a5c:	08 95       	ret

00000a5e <_Z16alignToFrontWallv>:
     a5e:	cf 92       	push	r12
     a60:	df 92       	push	r13
     a62:	ef 92       	push	r14
     a64:	ff 92       	push	r15
     a66:	0f 93       	push	r16
     a68:	1f 93       	push	r17
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
     a6e:	0f 2e       	mov	r0, r31
     a70:	fe ea       	ldi	r31, 0xAE	; 174
     a72:	cf 2e       	mov	r12, r31
     a74:	f3 e0       	ldi	r31, 0x03	; 3
     a76:	df 2e       	mov	r13, r31
     a78:	f0 2d       	mov	r31, r0
     a7a:	0f 2e       	mov	r0, r31
     a7c:	f8 e8       	ldi	r31, 0x88	; 136
     a7e:	ef 2e       	mov	r14, r31
     a80:	f1 2c       	mov	r15, r1
     a82:	f0 2d       	mov	r31, r0
     a84:	02 e3       	ldi	r16, 0x32	; 50
     a86:	10 e0       	ldi	r17, 0x00	; 0
     a88:	ca e8       	ldi	r28, 0x8A	; 138
     a8a:	d0 e0       	ldi	r29, 0x00	; 0
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     a94:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_Z17IRSensorFrontLeftv>
     a98:	8e 3a       	cpi	r24, 0xAE	; 174
     a9a:	23 e0       	ldi	r18, 0x03	; 3
     a9c:	92 07       	cpc	r25, r18
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <_Z16alignToFrontWallv+0x44>
     aa0:	51 c0       	rjmp	.+162    	; 0xb44 <_Z16alignToFrontWallv+0xe6>
     aa2:	8e 5a       	subi	r24, 0xAE	; 174
     aa4:	93 40       	sbci	r25, 0x03	; 3
     aa6:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <leftIRDiff+0x1>
     aaa:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <leftIRDiff>
     aae:	84 31       	cpi	r24, 0x14	; 20
     ab0:	91 05       	cpc	r25, r1
     ab2:	90 f4       	brcc	.+36     	; 0xad8 <_Z16alignToFrontWallv+0x7a>
     ab4:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <leftIRDiff+0x1>
     ab8:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <leftIRDiff>
     abc:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <oldLeftIRDiff+0x1>
     ac0:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <oldLeftIRDiff>
     ac4:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <breakWhileLoopCounter>
     ac8:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <breakWhileLoopCounter+0x1>
     acc:	01 96       	adiw	r24, 0x01	; 1
     ace:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <breakWhileLoopCounter+0x1>
     ad2:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <breakWhileLoopCounter>
     ad6:	06 c0       	rjmp	.+12     	; 0xae4 <_Z16alignToFrontWallv+0x86>
     ad8:	c3 97       	sbiw	r24, 0x33	; 51
     ada:	20 f0       	brcs	.+8      	; 0xae4 <_Z16alignToFrontWallv+0x86>
     adc:	10 93 15 01 	sts	0x0115, r17	; 0x800115 <leftIRDiff+0x1>
     ae0:	00 93 14 01 	sts	0x0114, r16	; 0x800114 <leftIRDiff>
     ae4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <leftIRDiff>
     ae8:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <leftIRDiff+0x1>
     aec:	20 91 39 01 	lds	r18, 0x0139	; 0x800139 <oldLeftIRDiff>
     af0:	30 91 3a 01 	lds	r19, 0x013A	; 0x80013a <oldLeftIRDiff+0x1>
     af4:	ac 01       	movw	r20, r24
     af6:	42 1b       	sub	r20, r18
     af8:	53 0b       	sbc	r21, r19
     afa:	9a 01       	movw	r18, r20
     afc:	50 93 36 01 	sts	0x0136, r21	; 0x800136 <errorLeftIRDiff+0x1>
     b00:	40 93 35 01 	sts	0x0135, r20	; 0x800135 <errorLeftIRDiff>
     b04:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <PFrontwallAlign>
     b08:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <PFrontwallAlign+0x1>
     b0c:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__udivmodhi4>
     b10:	fb 01       	movw	r30, r22
     b12:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <DFrontwallAlign>
     b16:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <DFrontwallAlign+0x1>
     b1a:	c9 01       	movw	r24, r18
     b1c:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__udivmodhi4>
     b20:	6e 0f       	add	r22, r30
     b22:	7f 1f       	adc	r23, r31
     b24:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <leftIRDiff+0x1>
     b28:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <leftIRDiff>
     b2c:	70 93 3a 01 	sts	0x013A, r23	; 0x80013a <oldLeftIRDiff+0x1>
     b30:	60 93 39 01 	sts	0x0139, r22	; 0x800139 <oldLeftIRDiff>
     b34:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <leftMotorSpeed>
     b38:	77 27       	eor	r23, r23
     b3a:	f7 01       	movw	r30, r14
     b3c:	71 83       	std	Z+1, r23	; 0x01
     b3e:	60 83       	st	Z, r22
     b40:	17 bc       	out	0x27, r1	; 39
     b42:	51 c0       	rjmp	.+162    	; 0xbe6 <_Z16alignToFrontWallv+0x188>
     b44:	96 01       	movw	r18, r12
     b46:	28 1b       	sub	r18, r24
     b48:	39 0b       	sbc	r19, r25
     b4a:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <leftIRDiff+0x1>
     b4e:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <leftIRDiff>
     b52:	24 31       	cpi	r18, 0x14	; 20
     b54:	31 05       	cpc	r19, r1
     b56:	90 f4       	brcc	.+36     	; 0xb7c <_Z16alignToFrontWallv+0x11e>
     b58:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <leftIRDiff+0x1>
     b5c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <leftIRDiff>
     b60:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <oldLeftIRDiff+0x1>
     b64:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <oldLeftIRDiff>
     b68:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <breakWhileLoopCounter>
     b6c:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <breakWhileLoopCounter+0x1>
     b70:	01 96       	adiw	r24, 0x01	; 1
     b72:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <breakWhileLoopCounter+0x1>
     b76:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <breakWhileLoopCounter>
     b7a:	07 c0       	rjmp	.+14     	; 0xb8a <_Z16alignToFrontWallv+0x12c>
     b7c:	23 33       	cpi	r18, 0x33	; 51
     b7e:	31 05       	cpc	r19, r1
     b80:	20 f0       	brcs	.+8      	; 0xb8a <_Z16alignToFrontWallv+0x12c>
     b82:	10 93 15 01 	sts	0x0115, r17	; 0x800115 <leftIRDiff+0x1>
     b86:	00 93 14 01 	sts	0x0114, r16	; 0x800114 <leftIRDiff>
     b8a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <leftIRDiff>
     b8e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <leftIRDiff+0x1>
     b92:	20 91 39 01 	lds	r18, 0x0139	; 0x800139 <oldLeftIRDiff>
     b96:	30 91 3a 01 	lds	r19, 0x013A	; 0x80013a <oldLeftIRDiff+0x1>
     b9a:	ac 01       	movw	r20, r24
     b9c:	42 1b       	sub	r20, r18
     b9e:	53 0b       	sbc	r21, r19
     ba0:	9a 01       	movw	r18, r20
     ba2:	50 93 36 01 	sts	0x0136, r21	; 0x800136 <errorLeftIRDiff+0x1>
     ba6:	40 93 35 01 	sts	0x0135, r20	; 0x800135 <errorLeftIRDiff>
     baa:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <PFrontwallAlign>
     bae:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <PFrontwallAlign+0x1>
     bb2:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__udivmodhi4>
     bb6:	fb 01       	movw	r30, r22
     bb8:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <DFrontwallAlign>
     bbc:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <DFrontwallAlign+0x1>
     bc0:	c9 01       	movw	r24, r18
     bc2:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__udivmodhi4>
     bc6:	6e 0f       	add	r22, r30
     bc8:	7f 1f       	adc	r23, r31
     bca:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <leftIRDiff+0x1>
     bce:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <leftIRDiff>
     bd2:	70 93 3a 01 	sts	0x013A, r23	; 0x80013a <oldLeftIRDiff+0x1>
     bd6:	60 93 39 01 	sts	0x0139, r22	; 0x800139 <oldLeftIRDiff>
     bda:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <leftMotorSpeed>
     bde:	f7 01       	movw	r30, r14
     be0:	11 82       	std	Z+1, r1	; 0x01
     be2:	10 82       	st	Z, r1
     be4:	67 bd       	out	0x27, r22	; 39
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
     bee:	0e 94 37 01 	call	0x26e	; 0x26e <_Z18IRSensorFrontRightv>
     bf2:	8e 3a       	cpi	r24, 0xAE	; 174
     bf4:	f3 e0       	ldi	r31, 0x03	; 3
     bf6:	9f 07       	cpc	r25, r31
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <_Z16alignToFrontWallv+0x19e>
     bfa:	50 c0       	rjmp	.+160    	; 0xc9c <_Z16alignToFrontWallv+0x23e>
     bfc:	8e 5a       	subi	r24, 0xAE	; 174
     bfe:	93 40       	sbci	r25, 0x03	; 3
     c00:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <rightIRDiff+0x1>
     c04:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <rightIRDiff>
     c08:	84 31       	cpi	r24, 0x14	; 20
     c0a:	91 05       	cpc	r25, r1
     c0c:	90 f4       	brcc	.+36     	; 0xc32 <_Z16alignToFrontWallv+0x1d4>
     c0e:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <rightIRDiff+0x1>
     c12:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <rightIRDiff>
     c16:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <oldRightIRDiff+0x1>
     c1a:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <oldRightIRDiff>
     c1e:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <breakWhileLoopCounter>
     c22:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <breakWhileLoopCounter+0x1>
     c26:	01 96       	adiw	r24, 0x01	; 1
     c28:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <breakWhileLoopCounter+0x1>
     c2c:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <breakWhileLoopCounter>
     c30:	06 c0       	rjmp	.+12     	; 0xc3e <_Z16alignToFrontWallv+0x1e0>
     c32:	c3 97       	sbiw	r24, 0x33	; 51
     c34:	20 f0       	brcs	.+8      	; 0xc3e <_Z16alignToFrontWallv+0x1e0>
     c36:	10 93 13 01 	sts	0x0113, r17	; 0x800113 <rightIRDiff+0x1>
     c3a:	00 93 12 01 	sts	0x0112, r16	; 0x800112 <rightIRDiff>
     c3e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rightIRDiff>
     c42:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <rightIRDiff+0x1>
     c46:	20 91 37 01 	lds	r18, 0x0137	; 0x800137 <oldRightIRDiff>
     c4a:	30 91 38 01 	lds	r19, 0x0138	; 0x800138 <oldRightIRDiff+0x1>
     c4e:	ac 01       	movw	r20, r24
     c50:	42 1b       	sub	r20, r18
     c52:	53 0b       	sbc	r21, r19
     c54:	9a 01       	movw	r18, r20
     c56:	50 93 34 01 	sts	0x0134, r21	; 0x800134 <errorRightIRDiff+0x1>
     c5a:	40 93 33 01 	sts	0x0133, r20	; 0x800133 <errorRightIRDiff>
     c5e:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <PFrontwallAlign>
     c62:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <PFrontwallAlign+0x1>
     c66:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__udivmodhi4>
     c6a:	fb 01       	movw	r30, r22
     c6c:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <DFrontwallAlign>
     c70:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <DFrontwallAlign+0x1>
     c74:	c9 01       	movw	r24, r18
     c76:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__udivmodhi4>
     c7a:	6e 0f       	add	r22, r30
     c7c:	7f 1f       	adc	r23, r31
     c7e:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <rightIRDiff+0x1>
     c82:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <rightIRDiff>
     c86:	70 93 38 01 	sts	0x0138, r23	; 0x800138 <oldRightIRDiff+0x1>
     c8a:	60 93 37 01 	sts	0x0137, r22	; 0x800137 <oldRightIRDiff>
     c8e:	60 93 3b 01 	sts	0x013B, r22	; 0x80013b <rightMotorSpeed>
     c92:	77 27       	eor	r23, r23
     c94:	79 83       	std	Y+1, r23	; 0x01
     c96:	68 83       	st	Y, r22
     c98:	18 bc       	out	0x28, r1	; 40
     c9a:	4f c0       	rjmp	.+158    	; 0xd3a <_Z16alignToFrontWallv+0x2dc>
     c9c:	f6 01       	movw	r30, r12
     c9e:	e8 1b       	sub	r30, r24
     ca0:	f9 0b       	sbc	r31, r25
     ca2:	f0 93 13 01 	sts	0x0113, r31	; 0x800113 <rightIRDiff+0x1>
     ca6:	e0 93 12 01 	sts	0x0112, r30	; 0x800112 <rightIRDiff>
     caa:	e4 31       	cpi	r30, 0x14	; 20
     cac:	f1 05       	cpc	r31, r1
     cae:	90 f4       	brcc	.+36     	; 0xcd4 <_Z16alignToFrontWallv+0x276>
     cb0:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <rightIRDiff+0x1>
     cb4:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <rightIRDiff>
     cb8:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <oldRightIRDiff+0x1>
     cbc:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <oldRightIRDiff>
     cc0:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <breakWhileLoopCounter>
     cc4:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <breakWhileLoopCounter+0x1>
     cc8:	01 96       	adiw	r24, 0x01	; 1
     cca:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <breakWhileLoopCounter+0x1>
     cce:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <breakWhileLoopCounter>
     cd2:	06 c0       	rjmp	.+12     	; 0xce0 <_Z16alignToFrontWallv+0x282>
     cd4:	f3 97       	sbiw	r30, 0x33	; 51
     cd6:	20 f0       	brcs	.+8      	; 0xce0 <_Z16alignToFrontWallv+0x282>
     cd8:	10 93 13 01 	sts	0x0113, r17	; 0x800113 <rightIRDiff+0x1>
     cdc:	00 93 12 01 	sts	0x0112, r16	; 0x800112 <rightIRDiff>
     ce0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rightIRDiff>
     ce4:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <rightIRDiff+0x1>
     ce8:	20 91 37 01 	lds	r18, 0x0137	; 0x800137 <oldRightIRDiff>
     cec:	30 91 38 01 	lds	r19, 0x0138	; 0x800138 <oldRightIRDiff+0x1>
     cf0:	ac 01       	movw	r20, r24
     cf2:	42 1b       	sub	r20, r18
     cf4:	53 0b       	sbc	r21, r19
     cf6:	9a 01       	movw	r18, r20
     cf8:	50 93 34 01 	sts	0x0134, r21	; 0x800134 <errorRightIRDiff+0x1>
     cfc:	40 93 33 01 	sts	0x0133, r20	; 0x800133 <errorRightIRDiff>
     d00:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <PFrontwallAlign>
     d04:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <PFrontwallAlign+0x1>
     d08:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__udivmodhi4>
     d0c:	fb 01       	movw	r30, r22
     d0e:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <DFrontwallAlign>
     d12:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <DFrontwallAlign+0x1>
     d16:	c9 01       	movw	r24, r18
     d18:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__udivmodhi4>
     d1c:	6e 0f       	add	r22, r30
     d1e:	7f 1f       	adc	r23, r31
     d20:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <rightIRDiff+0x1>
     d24:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <rightIRDiff>
     d28:	70 93 38 01 	sts	0x0138, r23	; 0x800138 <oldRightIRDiff+0x1>
     d2c:	60 93 37 01 	sts	0x0137, r22	; 0x800137 <oldRightIRDiff>
     d30:	60 93 3b 01 	sts	0x013B, r22	; 0x80013b <rightMotorSpeed>
     d34:	19 82       	std	Y+1, r1	; 0x01
     d36:	18 82       	st	Y, r1
     d38:	68 bd       	out	0x28, r22	; 40
     d3a:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <breakWhileLoopCounter>
     d3e:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <breakWhileLoopCounter+0x1>
     d42:	c3 97       	sbiw	r24, 0x33	; 51
     d44:	08 f4       	brcc	.+2      	; 0xd48 <_Z16alignToFrontWallv+0x2ea>
     d46:	a2 ce       	rjmp	.-700    	; 0xa8c <_Z16alignToFrontWallv+0x2e>
     d48:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     d4c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     d50:	17 bc       	out	0x27, r1	; 39
     d52:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     d56:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     d5a:	18 bc       	out	0x28, r1	; 40
     d5c:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <breakWhileLoopCounter+0x1>
     d60:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <breakWhileLoopCounter>
     d64:	df 91       	pop	r29
     d66:	cf 91       	pop	r28
     d68:	1f 91       	pop	r17
     d6a:	0f 91       	pop	r16
     d6c:	ff 90       	pop	r15
     d6e:	ef 90       	pop	r14
     d70:	df 90       	pop	r13
     d72:	cf 90       	pop	r12
     d74:	08 95       	ret

00000d76 <_Z10moveWithPDv>:
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
     d7a:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <leftWallSensorValue>
     d7e:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <leftWallSensorValue+0x1>
     d82:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <hasLeftWall>
     d86:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <hasLeftWall+0x1>
     d8a:	28 17       	cp	r18, r24
     d8c:	39 07       	cpc	r19, r25
     d8e:	08 f0       	brcs	.+2      	; 0xd92 <_Z10moveWithPDv+0x1c>
     d90:	60 c1       	rjmp	.+704    	; 0x1052 <_Z10moveWithPDv+0x2dc>
     d92:	40 91 2d 01 	lds	r20, 0x012D	; 0x80012d <rightWallSensorValue>
     d96:	50 91 2e 01 	lds	r21, 0x012E	; 0x80012e <rightWallSensorValue+0x1>
     d9a:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <hasRightWall>
     d9e:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <hasRightWall+0x1>
     da2:	24 17       	cp	r18, r20
     da4:	35 07       	cpc	r19, r21
     da6:	08 f0       	brcs	.+2      	; 0xdaa <_Z10moveWithPDv+0x34>
     da8:	aa c0       	rjmp	.+340    	; 0xefe <_Z10moveWithPDv+0x188>
     daa:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <leftMiddleValue>
     dae:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <leftMiddleValue+0x1>
     db2:	28 17       	cp	r18, r24
     db4:	39 07       	cpc	r19, r25
     db6:	08 f0       	brcs	.+2      	; 0xdba <_Z10moveWithPDv+0x44>
     db8:	51 c0       	rjmp	.+162    	; 0xe5c <_Z10moveWithPDv+0xe6>
     dba:	82 1b       	sub	r24, r18
     dbc:	93 0b       	sbc	r25, r19
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <errorP+0x1>
     dc6:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <errorP>
     dca:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <__data_end>
     dce:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <__data_end+0x1>
     dd2:	28 17       	cp	r18, r24
     dd4:	39 07       	cpc	r19, r25
     dd6:	20 f4       	brcc	.+8      	; 0xde0 <_Z10moveWithPDv+0x6a>
     dd8:	30 93 2c 01 	sts	0x012C, r19	; 0x80012c <errorP+0x1>
     ddc:	20 93 2b 01 	sts	0x012B, r18	; 0x80012b <errorP>
     de0:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <errorP>
     de4:	30 91 2c 01 	lds	r19, 0x012C	; 0x80012c <errorP+0x1>
     de8:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <oldErrorP>
     dec:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <oldErrorP+0x1>
     df0:	f9 01       	movw	r30, r18
     df2:	e8 1b       	sub	r30, r24
     df4:	f9 0b       	sbc	r31, r25
     df6:	f0 93 2a 01 	sts	0x012A, r31	; 0x80012a <errorD+0x1>
     dfa:	e0 93 29 01 	sts	0x0129, r30	; 0x800129 <errorD>
     dfe:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <Paway>
     e02:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <Paway+0x1>
     e06:	c9 01       	movw	r24, r18
     e08:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__udivmodhi4>
     e0c:	eb 01       	movw	r28, r22
     e0e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <D>
     e12:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <D+0x1>
     e16:	cf 01       	movw	r24, r30
     e18:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__udivmodhi4>
     e1c:	6c 0f       	add	r22, r28
     e1e:	7d 1f       	adc	r23, r29
     e20:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <totalError16+0x1>
     e24:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <totalError16>
     e28:	30 93 28 01 	sts	0x0128, r19	; 0x800128 <oldErrorP+0x1>
     e2c:	20 93 27 01 	sts	0x0127, r18	; 0x800127 <oldErrorP>
     e30:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <totalError8>
     e34:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <leftBaseSpeed>
     e38:	68 0f       	add	r22, r24
     e3a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     e3e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     e42:	67 bd       	out	0x27, r22	; 39
     e44:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <rightBaseSpeed>
     e48:	8c 5f       	subi	r24, 0xFC	; 252
     e4a:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <totalError8>
     e4e:	89 1b       	sub	r24, r25
     e50:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     e54:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     e58:	88 bd       	out	0x28, r24	; 40
     e5a:	db c1       	rjmp	.+950    	; 0x1212 <_Z10moveWithPDv+0x49c>
     e5c:	28 1b       	sub	r18, r24
     e5e:	39 0b       	sbc	r19, r25
     e60:	22 0f       	add	r18, r18
     e62:	33 1f       	adc	r19, r19
     e64:	30 93 2c 01 	sts	0x012C, r19	; 0x80012c <errorP+0x1>
     e68:	20 93 2b 01 	sts	0x012B, r18	; 0x80012b <errorP>
     e6c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
     e70:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <__data_end+0x1>
     e74:	82 17       	cp	r24, r18
     e76:	93 07       	cpc	r25, r19
     e78:	20 f4       	brcc	.+8      	; 0xe82 <_Z10moveWithPDv+0x10c>
     e7a:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <errorP+0x1>
     e7e:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <errorP>
     e82:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <errorP>
     e86:	30 91 2c 01 	lds	r19, 0x012C	; 0x80012c <errorP+0x1>
     e8a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <oldErrorP>
     e8e:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <oldErrorP+0x1>
     e92:	f9 01       	movw	r30, r18
     e94:	e8 1b       	sub	r30, r24
     e96:	f9 0b       	sbc	r31, r25
     e98:	f0 93 2a 01 	sts	0x012A, r31	; 0x80012a <errorD+0x1>
     e9c:	e0 93 29 01 	sts	0x0129, r30	; 0x800129 <errorD>
     ea0:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <Paway>
     ea4:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <Paway+0x1>
     ea8:	c9 01       	movw	r24, r18
     eaa:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__udivmodhi4>
     eae:	eb 01       	movw	r28, r22
     eb0:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <D>
     eb4:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <D+0x1>
     eb8:	cf 01       	movw	r24, r30
     eba:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__udivmodhi4>
     ebe:	6c 0f       	add	r22, r28
     ec0:	7d 1f       	adc	r23, r29
     ec2:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <totalError16+0x1>
     ec6:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <totalError16>
     eca:	30 93 28 01 	sts	0x0128, r19	; 0x800128 <oldErrorP+0x1>
     ece:	20 93 27 01 	sts	0x0127, r18	; 0x800127 <oldErrorP>
     ed2:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <totalError8>
     ed6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <leftBaseSpeed>
     eda:	86 1b       	sub	r24, r22
     edc:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     ee0:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     ee4:	87 bd       	out	0x27, r24	; 39
     ee6:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <rightBaseSpeed>
     eea:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <totalError8>
     eee:	89 0f       	add	r24, r25
     ef0:	8c 5f       	subi	r24, 0xFC	; 252
     ef2:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     ef6:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     efa:	88 bd       	out	0x28, r24	; 40
     efc:	8a c1       	rjmp	.+788    	; 0x1212 <_Z10moveWithPDv+0x49c>
     efe:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <leftMiddleValue>
     f02:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <leftMiddleValue+0x1>
     f06:	28 17       	cp	r18, r24
     f08:	39 07       	cpc	r19, r25
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <_Z10moveWithPDv+0x198>
     f0c:	51 c0       	rjmp	.+162    	; 0xfb0 <_Z10moveWithPDv+0x23a>
     f0e:	82 1b       	sub	r24, r18
     f10:	93 0b       	sbc	r25, r19
     f12:	88 0f       	add	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <errorP+0x1>
     f1a:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <errorP>
     f1e:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <__data_end>
     f22:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <__data_end+0x1>
     f26:	28 17       	cp	r18, r24
     f28:	39 07       	cpc	r19, r25
     f2a:	20 f4       	brcc	.+8      	; 0xf34 <_Z10moveWithPDv+0x1be>
     f2c:	30 93 2c 01 	sts	0x012C, r19	; 0x80012c <errorP+0x1>
     f30:	20 93 2b 01 	sts	0x012B, r18	; 0x80012b <errorP>
     f34:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <errorP>
     f38:	30 91 2c 01 	lds	r19, 0x012C	; 0x80012c <errorP+0x1>
     f3c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <oldErrorP>
     f40:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <oldErrorP+0x1>
     f44:	f9 01       	movw	r30, r18
     f46:	e8 1b       	sub	r30, r24
     f48:	f9 0b       	sbc	r31, r25
     f4a:	f0 93 2a 01 	sts	0x012A, r31	; 0x80012a <errorD+0x1>
     f4e:	e0 93 29 01 	sts	0x0129, r30	; 0x800129 <errorD>
     f52:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <Paway>
     f56:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <Paway+0x1>
     f5a:	c9 01       	movw	r24, r18
     f5c:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__udivmodhi4>
     f60:	eb 01       	movw	r28, r22
     f62:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <D>
     f66:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <D+0x1>
     f6a:	cf 01       	movw	r24, r30
     f6c:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__udivmodhi4>
     f70:	6c 0f       	add	r22, r28
     f72:	7d 1f       	adc	r23, r29
     f74:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <totalError16+0x1>
     f78:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <totalError16>
     f7c:	30 93 28 01 	sts	0x0128, r19	; 0x800128 <oldErrorP+0x1>
     f80:	20 93 27 01 	sts	0x0127, r18	; 0x800127 <oldErrorP>
     f84:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <totalError8>
     f88:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <leftBaseSpeed>
     f8c:	68 0f       	add	r22, r24
     f8e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     f92:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     f96:	67 bd       	out	0x27, r22	; 39
     f98:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <rightBaseSpeed>
     f9c:	8c 5f       	subi	r24, 0xFC	; 252
     f9e:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <totalError8>
     fa2:	89 1b       	sub	r24, r25
     fa4:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     fa8:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     fac:	88 bd       	out	0x28, r24	; 40
     fae:	31 c1       	rjmp	.+610    	; 0x1212 <_Z10moveWithPDv+0x49c>
     fb0:	28 1b       	sub	r18, r24
     fb2:	39 0b       	sbc	r19, r25
     fb4:	22 0f       	add	r18, r18
     fb6:	33 1f       	adc	r19, r19
     fb8:	30 93 2c 01 	sts	0x012C, r19	; 0x80012c <errorP+0x1>
     fbc:	20 93 2b 01 	sts	0x012B, r18	; 0x80012b <errorP>
     fc0:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
     fc4:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <__data_end+0x1>
     fc8:	82 17       	cp	r24, r18
     fca:	93 07       	cpc	r25, r19
     fcc:	20 f4       	brcc	.+8      	; 0xfd6 <_Z10moveWithPDv+0x260>
     fce:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <errorP+0x1>
     fd2:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <errorP>
     fd6:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <errorP>
     fda:	30 91 2c 01 	lds	r19, 0x012C	; 0x80012c <errorP+0x1>
     fde:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <oldErrorP>
     fe2:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <oldErrorP+0x1>
     fe6:	f9 01       	movw	r30, r18
     fe8:	e8 1b       	sub	r30, r24
     fea:	f9 0b       	sbc	r31, r25
     fec:	f0 93 2a 01 	sts	0x012A, r31	; 0x80012a <errorD+0x1>
     ff0:	e0 93 29 01 	sts	0x0129, r30	; 0x800129 <errorD>
     ff4:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <Paway>
     ff8:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <Paway+0x1>
     ffc:	c9 01       	movw	r24, r18
     ffe:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__udivmodhi4>
    1002:	eb 01       	movw	r28, r22
    1004:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <D>
    1008:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <D+0x1>
    100c:	cf 01       	movw	r24, r30
    100e:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__udivmodhi4>
    1012:	6c 0f       	add	r22, r28
    1014:	7d 1f       	adc	r23, r29
    1016:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <totalError16+0x1>
    101a:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <totalError16>
    101e:	30 93 28 01 	sts	0x0128, r19	; 0x800128 <oldErrorP+0x1>
    1022:	20 93 27 01 	sts	0x0127, r18	; 0x800127 <oldErrorP>
    1026:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <totalError8>
    102a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <leftBaseSpeed>
    102e:	86 1b       	sub	r24, r22
    1030:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1034:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1038:	87 bd       	out	0x27, r24	; 39
    103a:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <rightBaseSpeed>
    103e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <totalError8>
    1042:	89 0f       	add	r24, r25
    1044:	8c 5f       	subi	r24, 0xFC	; 252
    1046:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    104a:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    104e:	88 bd       	out	0x28, r24	; 40
    1050:	e0 c0       	rjmp	.+448    	; 0x1212 <_Z10moveWithPDv+0x49c>
    1052:	40 91 2d 01 	lds	r20, 0x012D	; 0x80012d <rightWallSensorValue>
    1056:	50 91 2e 01 	lds	r21, 0x012E	; 0x80012e <rightWallSensorValue+0x1>
    105a:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <hasRightWall>
    105e:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <hasRightWall+0x1>
    1062:	64 17       	cp	r22, r20
    1064:	75 07       	cpc	r23, r21
    1066:	08 f0       	brcs	.+2      	; 0x106a <_Z10moveWithPDv+0x2f4>
    1068:	aa c0       	rjmp	.+340    	; 0x11be <_Z10moveWithPDv+0x448>
    106a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <rightMiddleValue>
    106e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <rightMiddleValue+0x1>
    1072:	84 17       	cp	r24, r20
    1074:	95 07       	cpc	r25, r21
    1076:	08 f0       	brcs	.+2      	; 0x107a <_Z10moveWithPDv+0x304>
    1078:	51 c0       	rjmp	.+162    	; 0x111c <_Z10moveWithPDv+0x3a6>
    107a:	48 1b       	sub	r20, r24
    107c:	59 0b       	sbc	r21, r25
    107e:	44 0f       	add	r20, r20
    1080:	55 1f       	adc	r21, r21
    1082:	50 93 2c 01 	sts	0x012C, r21	; 0x80012c <errorP+0x1>
    1086:	40 93 2b 01 	sts	0x012B, r20	; 0x80012b <errorP>
    108a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
    108e:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <__data_end+0x1>
    1092:	84 17       	cp	r24, r20
    1094:	95 07       	cpc	r25, r21
    1096:	20 f4       	brcc	.+8      	; 0x10a0 <_Z10moveWithPDv+0x32a>
    1098:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <errorP+0x1>
    109c:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <errorP>
    10a0:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <errorP>
    10a4:	30 91 2c 01 	lds	r19, 0x012C	; 0x80012c <errorP+0x1>
    10a8:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <oldErrorP>
    10ac:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <oldErrorP+0x1>
    10b0:	f9 01       	movw	r30, r18
    10b2:	e8 1b       	sub	r30, r24
    10b4:	f9 0b       	sbc	r31, r25
    10b6:	f0 93 2a 01 	sts	0x012A, r31	; 0x80012a <errorD+0x1>
    10ba:	e0 93 29 01 	sts	0x0129, r30	; 0x800129 <errorD>
    10be:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <Paway>
    10c2:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <Paway+0x1>
    10c6:	c9 01       	movw	r24, r18
    10c8:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__udivmodhi4>
    10cc:	eb 01       	movw	r28, r22
    10ce:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <D>
    10d2:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <D+0x1>
    10d6:	cf 01       	movw	r24, r30
    10d8:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__udivmodhi4>
    10dc:	6c 0f       	add	r22, r28
    10de:	7d 1f       	adc	r23, r29
    10e0:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <totalError16+0x1>
    10e4:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <totalError16>
    10e8:	30 93 28 01 	sts	0x0128, r19	; 0x800128 <oldErrorP+0x1>
    10ec:	20 93 27 01 	sts	0x0127, r18	; 0x800127 <oldErrorP>
    10f0:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <totalError8>
    10f4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <leftBaseSpeed>
    10f8:	86 1b       	sub	r24, r22
    10fa:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    10fe:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1102:	87 bd       	out	0x27, r24	; 39
    1104:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <rightBaseSpeed>
    1108:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <totalError8>
    110c:	89 0f       	add	r24, r25
    110e:	8c 5f       	subi	r24, 0xFC	; 252
    1110:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1114:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1118:	88 bd       	out	0x28, r24	; 40
    111a:	7b c0       	rjmp	.+246    	; 0x1212 <_Z10moveWithPDv+0x49c>
    111c:	84 1b       	sub	r24, r20
    111e:	95 0b       	sbc	r25, r21
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <errorP+0x1>
    1128:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <errorP>
    112c:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <__data_end>
    1130:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <__data_end+0x1>
    1134:	28 17       	cp	r18, r24
    1136:	39 07       	cpc	r19, r25
    1138:	20 f4       	brcc	.+8      	; 0x1142 <_Z10moveWithPDv+0x3cc>
    113a:	30 93 2c 01 	sts	0x012C, r19	; 0x80012c <errorP+0x1>
    113e:	20 93 2b 01 	sts	0x012B, r18	; 0x80012b <errorP>
    1142:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <errorP>
    1146:	30 91 2c 01 	lds	r19, 0x012C	; 0x80012c <errorP+0x1>
    114a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <oldErrorP>
    114e:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <oldErrorP+0x1>
    1152:	f9 01       	movw	r30, r18
    1154:	e8 1b       	sub	r30, r24
    1156:	f9 0b       	sbc	r31, r25
    1158:	f0 93 2a 01 	sts	0x012A, r31	; 0x80012a <errorD+0x1>
    115c:	e0 93 29 01 	sts	0x0129, r30	; 0x800129 <errorD>
    1160:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <Paway>
    1164:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <Paway+0x1>
    1168:	c9 01       	movw	r24, r18
    116a:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__udivmodhi4>
    116e:	eb 01       	movw	r28, r22
    1170:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <D>
    1174:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <D+0x1>
    1178:	cf 01       	movw	r24, r30
    117a:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__udivmodhi4>
    117e:	6c 0f       	add	r22, r28
    1180:	7d 1f       	adc	r23, r29
    1182:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <totalError16+0x1>
    1186:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <totalError16>
    118a:	30 93 28 01 	sts	0x0128, r19	; 0x800128 <oldErrorP+0x1>
    118e:	20 93 27 01 	sts	0x0127, r18	; 0x800127 <oldErrorP>
    1192:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <totalError8>
    1196:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <leftBaseSpeed>
    119a:	68 0f       	add	r22, r24
    119c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    11a0:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    11a4:	67 bd       	out	0x27, r22	; 39
    11a6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <rightBaseSpeed>
    11aa:	8c 5f       	subi	r24, 0xFC	; 252
    11ac:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <totalError8>
    11b0:	89 1b       	sub	r24, r25
    11b2:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    11b6:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    11ba:	88 bd       	out	0x28, r24	; 40
    11bc:	2a c0       	rjmp	.+84     	; 0x1212 <_Z10moveWithPDv+0x49c>
    11be:	82 17       	cp	r24, r18
    11c0:	93 07       	cpc	r25, r19
    11c2:	38 f5       	brcc	.+78     	; 0x1212 <_Z10moveWithPDv+0x49c>
    11c4:	46 17       	cp	r20, r22
    11c6:	57 07       	cpc	r21, r23
    11c8:	20 f5       	brcc	.+72     	; 0x1212 <_Z10moveWithPDv+0x49c>
    11ca:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <errorP+0x1>
    11ce:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <errorP>
    11d2:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <errorD+0x1>
    11d6:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <errorD>
    11da:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <totalError16+0x1>
    11de:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <totalError16>
    11e2:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <oldErrorP+0x1>
    11e6:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <oldErrorP>
    11ea:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <totalError8>
    11ee:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <leftBaseSpeed>
    11f2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    11f6:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    11fa:	87 bd       	out	0x27, r24	; 39
    11fc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <rightBaseSpeed>
    1200:	8c 5f       	subi	r24, 0xFC	; 252
    1202:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <totalError8>
    1206:	89 1b       	sub	r24, r25
    1208:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    120c:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1210:	88 bd       	out	0x28, r24	; 40
    1212:	df 91       	pop	r29
    1214:	cf 91       	pop	r28
    1216:	08 95       	ret

00001218 <_Z12moveOneBlockv>:
    1218:	ef 92       	push	r14
    121a:	ff 92       	push	r15
    121c:	0f 93       	push	r16
    121e:	1f 93       	push	r17
    1220:	cf 93       	push	r28
    1222:	ca e0       	ldi	r28, 0x0A	; 10
    1224:	0f 2e       	mov	r0, r31
    1226:	f8 e8       	ldi	r31, 0x88	; 136
    1228:	ef 2e       	mov	r14, r31
    122a:	f1 2c       	mov	r15, r1
    122c:	f0 2d       	mov	r31, r0
    122e:	0a e8       	ldi	r16, 0x8A	; 138
    1230:	10 e0       	ldi	r17, 0x00	; 0
    1232:	f7 01       	movw	r30, r14
    1234:	11 82       	std	Z+1, r1	; 0x01
    1236:	10 82       	st	Z, r1
    1238:	c7 bd       	out	0x27, r28	; 39
    123a:	f8 01       	movw	r30, r16
    123c:	11 82       	std	Z+1, r1	; 0x01
    123e:	10 82       	st	Z, r1
    1240:	c8 bd       	out	0x28, r28	; 40
    1242:	84 e1       	ldi	r24, 0x14	; 20
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
    124a:	c6 5f       	subi	r28, 0xF6	; 246
    124c:	c2 33       	cpi	r28, 0x32	; 50
    124e:	89 f7       	brne	.-30     	; 0x1232 <_Z12moveOneBlockv+0x1a>
    1250:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <rightEncoderAPos+0x1>
    1254:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <rightEncoderAPos>
    1258:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <rightEncoderAPos>
    125c:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <rightEncoderAPos+0x1>
    1260:	88 35       	cpi	r24, 0x58	; 88
    1262:	92 40       	sbci	r25, 0x02	; 2
    1264:	a8 f4       	brcc	.+42     	; 0x1290 <_Z12moveOneBlockv+0x78>
    1266:	0e 94 27 02 	call	0x44e	; 0x44e <_Z20IRSensorAngleLeftLEDv>
    126a:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <leftWallSensorValue+0x1>
    126e:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <leftWallSensorValue>
    1272:	0e 94 59 02 	call	0x4b2	; 0x4b2 <_Z21IRSensorAngleRightLEDv>
    1276:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <rightWallSensorValue+0x1>
    127a:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <rightWallSensorValue>
    127e:	0e 94 bb 06 	call	0xd76	; 0xd76 <_Z10moveWithPDv>
    1282:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <rightEncoderAPos>
    1286:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <rightEncoderAPos+0x1>
    128a:	88 35       	cpi	r24, 0x58	; 88
    128c:	92 40       	sbci	r25, 0x02	; 2
    128e:	58 f3       	brcs	.-42     	; 0x1266 <_Z12moveOneBlockv+0x4e>
    1290:	0e 94 8b 02 	call	0x516	; 0x516 <_Z10checkWallsv>
    1294:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <rightEncoderAPos>
    1298:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <rightEncoderAPos+0x1>
    129c:	8c 34       	cpi	r24, 0x4C	; 76
    129e:	94 40       	sbci	r25, 0x04	; 4
    12a0:	c0 f5       	brcc	.+112    	; 0x1312 <_Z12moveOneBlockv+0xfa>
    12a2:	0e 94 27 02 	call	0x44e	; 0x44e <_Z20IRSensorAngleLeftLEDv>
    12a6:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <leftWallSensorValue+0x1>
    12aa:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <leftWallSensorValue>
    12ae:	0e 94 59 02 	call	0x4b2	; 0x4b2 <_Z21IRSensorAngleRightLEDv>
    12b2:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <rightWallSensorValue+0x1>
    12b6:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <rightWallSensorValue>
    12ba:	0e 94 bb 06 	call	0xd76	; 0xd76 <_Z10moveWithPDv>
    12be:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <rightEncoderAPos>
    12c2:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <rightEncoderAPos+0x1>
    12c6:	8c 34       	cpi	r24, 0x4C	; 76
    12c8:	94 40       	sbci	r25, 0x04	; 4
    12ca:	58 f3       	brcs	.-42     	; 0x12a2 <_Z12moveOneBlockv+0x8a>
    12cc:	22 c0       	rjmp	.+68     	; 0x1312 <_Z12moveOneBlockv+0xfa>
    12ce:	83 e1       	ldi	r24, 0x13	; 19
    12d0:	8c 0f       	add	r24, r28
    12d2:	f7 01       	movw	r30, r14
    12d4:	11 82       	std	Z+1, r1	; 0x01
    12d6:	10 82       	st	Z, r1
    12d8:	87 bd       	out	0x27, r24	; 39
    12da:	f8 01       	movw	r30, r16
    12dc:	11 82       	std	Z+1, r1	; 0x01
    12de:	10 82       	st	Z, r1
    12e0:	c8 bd       	out	0x28, r28	; 40
    12e2:	84 e1       	ldi	r24, 0x14	; 20
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
    12ea:	ca 50       	subi	r28, 0x0A	; 10
    12ec:	81 f7       	brne	.-32     	; 0x12ce <_Z12moveOneBlockv+0xb6>
    12ee:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <_Z21IRSensorFrontRightLEDv>
    12f2:	85 36       	cpi	r24, 0x65	; 101
    12f4:	91 05       	cpc	r25, r1
    12f6:	10 f0       	brcs	.+4      	; 0x12fc <_Z12moveOneBlockv+0xe4>
    12f8:	0e 94 2f 05 	call	0xa5e	; 0xa5e <_Z16alignToFrontWallv>
    12fc:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1300:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1304:	17 bc       	out	0x27, r1	; 39
    1306:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    130a:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    130e:	18 bc       	out	0x28, r1	; 40
    1310:	09 c0       	rjmp	.+18     	; 0x1324 <_Z12moveOneBlockv+0x10c>
    1312:	c8 e2       	ldi	r28, 0x28	; 40
    1314:	0f 2e       	mov	r0, r31
    1316:	f8 e8       	ldi	r31, 0x88	; 136
    1318:	ef 2e       	mov	r14, r31
    131a:	f1 2c       	mov	r15, r1
    131c:	f0 2d       	mov	r31, r0
    131e:	0a e8       	ldi	r16, 0x8A	; 138
    1320:	10 e0       	ldi	r17, 0x00	; 0
    1322:	d5 cf       	rjmp	.-86     	; 0x12ce <_Z12moveOneBlockv+0xb6>
    1324:	cf 91       	pop	r28
    1326:	1f 91       	pop	r17
    1328:	0f 91       	pop	r16
    132a:	ff 90       	pop	r15
    132c:	ef 90       	pop	r14
    132e:	08 95       	ret

00001330 <_Z24initializeMazeParametersv>:
    1330:	e8 e4       	ldi	r30, 0x48	; 72
    1332:	f1 e0       	ldi	r31, 0x01	; 1
    1334:	88 e7       	ldi	r24, 0x78	; 120
    1336:	80 83       	st	Z, r24
    1338:	38 e5       	ldi	r19, 0x58	; 88
    133a:	30 8f       	std	Z+24, r19	; 0x18
    133c:	68 ec       	ldi	r22, 0xC8	; 200
    133e:	60 ab       	std	Z+48, r22	; 0x30
    1340:	78 e6       	ldi	r23, 0x68	; 104
    1342:	70 93 90 01 	sts	0x0190, r23	; 0x800190 <mazeArray+0x48>
    1346:	30 93 a8 01 	sts	0x01A8, r19	; 0x8001a8 <mazeArray+0x60>
    134a:	70 93 c0 01 	sts	0x01C0, r23	; 0x8001c0 <mazeArray+0x78>
    134e:	98 e3       	ldi	r25, 0x38	; 56
    1350:	94 83       	std	Z+4, r25	; 0x04
    1352:	88 e1       	ldi	r24, 0x18	; 24
    1354:	84 8f       	std	Z+28, r24	; 0x1c
    1356:	28 ee       	ldi	r18, 0xE8	; 232
    1358:	24 ab       	std	Z+52, r18	; 0x34
    135a:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <mazeArray+0x4c>
    135e:	58 ea       	ldi	r21, 0xA8	; 168
    1360:	50 93 ac 01 	sts	0x01AC, r21	; 0x8001ac <mazeArray+0x64>
    1364:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <mazeArray+0x7c>
    1368:	90 87       	std	Z+8, r25	; 0x08
    136a:	80 a3       	std	Z+32, r24	; 0x20
    136c:	20 af       	std	Z+56, r18	; 0x38
    136e:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <mazeArray+0x50>
    1372:	30 93 b0 01 	sts	0x01B0, r19	; 0x8001b0 <mazeArray+0x68>
    1376:	48 e2       	ldi	r20, 0x28	; 40
    1378:	40 93 c8 01 	sts	0x01C8, r20	; 0x8001c8 <mazeArray+0x80>
    137c:	94 87       	std	Z+12, r25	; 0x0c
    137e:	84 a3       	std	Z+36, r24	; 0x24
    1380:	24 af       	std	Z+60, r18	; 0x3c
    1382:	48 eb       	ldi	r20, 0xB8	; 184
    1384:	40 93 9c 01 	sts	0x019C, r20	; 0x80019c <mazeArray+0x54>
    1388:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <mazeArray+0x6c>
    138c:	40 93 cc 01 	sts	0x01CC, r20	; 0x8001cc <mazeArray+0x84>
    1390:	80 8b       	std	Z+16, r24	; 0x10
    1392:	50 a7       	std	Z+40, r21	; 0x28
    1394:	30 93 88 01 	sts	0x0188, r19	; 0x800188 <mazeArray+0x40>
    1398:	20 93 a0 01 	sts	0x01A0, r18	; 0x8001a0 <mazeArray+0x58>
    139c:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <mazeArray+0x70>
    13a0:	70 93 d0 01 	sts	0x01D0, r23	; 0x8001d0 <mazeArray+0x88>
    13a4:	88 e9       	ldi	r24, 0x98	; 152
    13a6:	84 8b       	std	Z+20, r24	; 0x14
    13a8:	64 a7       	std	Z+44, r22	; 0x2c
    13aa:	88 e8       	ldi	r24, 0x88	; 136
    13ac:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <mazeArray+0x44>
    13b0:	60 93 a4 01 	sts	0x01A4, r22	; 0x8001a4 <mazeArray+0x5c>
    13b4:	50 93 bc 01 	sts	0x01BC, r21	; 0x8001bc <mazeArray+0x74>
    13b8:	40 93 d4 01 	sts	0x01D4, r20	; 0x8001d4 <mazeArray+0x8c>
    13bc:	08 95       	ret

000013be <_Z25calcFastPathToATargetCellhh>:
}
}

	
void calcFastPathToATargetCell(uint8_t target_X,uint8_t target_y)//	
{
    13be:	cf 92       	push	r12
    13c0:	df 92       	push	r13
    13c2:	ef 92       	push	r14
    13c4:	ff 92       	push	r15
    13c6:	0f 93       	push	r16
    13c8:	1f 93       	push	r17
    13ca:	cf 93       	push	r28
    13cc:	df 93       	push	r29
    13ce:	0f 2e       	mov	r0, r31
    13d0:	f8 e4       	ldi	r31, 0x48	; 72
    13d2:	ef 2e       	mov	r14, r31
    13d4:	f1 e0       	ldi	r31, 0x01	; 1
    13d6:	ff 2e       	mov	r15, r31
    13d8:	f0 2d       	mov	r31, r0
    13da:	c8 ed       	ldi	r28, 0xD8	; 216
    13dc:	d1 e0       	ldi	r29, 0x01	; 1
    13de:	f7 01       	movw	r30, r14
	//resets the .cellsToTargetCell attribute in the mazeArray[][] array
	for (int i=0; i<(widthLengthSize); ++i)//i is for row
	{
		for (int k=0; k<(widthLengthSize); ++k)
		{
			mazeArray[i][k].cellsToTargetCell = (widthLengthSize * widthLengthSize);
    13e0:	24 e2       	ldi	r18, 0x24	; 36
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	32 83       	std	Z+2, r19	; 0x02
    13e6:	21 83       	std	Z+1, r18	; 0x01
    13e8:	36 83       	std	Z+6, r19	; 0x06
    13ea:	25 83       	std	Z+5, r18	; 0x05
    13ec:	32 87       	std	Z+10, r19	; 0x0a
    13ee:	21 87       	std	Z+9, r18	; 0x09
    13f0:	36 87       	std	Z+14, r19	; 0x0e
    13f2:	25 87       	std	Z+13, r18	; 0x0d
    13f4:	32 8b       	std	Z+18, r19	; 0x12
    13f6:	21 8b       	std	Z+17, r18	; 0x11
    13f8:	36 8b       	std	Z+22, r19	; 0x16
    13fa:	25 8b       	std	Z+21, r18	; 0x15
    13fc:	78 96       	adiw	r30, 0x18	; 24
		//eeprom_update_word((uint16_t*)i, 0x0000 );// has 1000 8-bit bytes, or 50
		//i++;
	//}

	//resets the .cellsToTargetCell attribute in the mazeArray[][] array
	for (int i=0; i<(widthLengthSize); ++i)//i is for row
    13fe:	ce 17       	cp	r28, r30
    1400:	df 07       	cpc	r29, r31
    1402:	81 f7       	brne	.-32     	; 0x13e4 <_Z25calcFastPathToATargetCellhh+0x26>
		}
	}
	//////////////////////////////////////////////
	uint16_t Length = 0;
	//marking target node as 0, are start point of MooresBFS(breadth first search)
	mazeArray[target_X][target_y].cellsToTargetCell = 0;
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	fc 01       	movw	r30, r24
    1408:	ee 0f       	add	r30, r30
    140a:	ff 1f       	adc	r31, r31
    140c:	e8 0f       	add	r30, r24
    140e:	f9 1f       	adc	r31, r25
    1410:	ee 0f       	add	r30, r30
    1412:	ff 1f       	adc	r31, r31
    1414:	e6 0f       	add	r30, r22
    1416:	f1 1d       	adc	r31, r1
    1418:	ee 0f       	add	r30, r30
    141a:	ff 1f       	adc	r31, r31
    141c:	ee 0f       	add	r30, r30
    141e:	ff 1f       	adc	r31, r31
    1420:	e8 5b       	subi	r30, 0xB8	; 184
    1422:	fe 4f       	sbci	r31, 0xFE	; 254
    1424:	12 82       	std	Z+2, r1	; 0x02
    1426:	11 82       	std	Z+1, r1	; 0x01
	//make loop to not stop till Position(current) node is marked
	//	printf("Current direction: ");
	while(mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown].cellsToTargetCell == (widthLengthSize * widthLengthSize))//current_j_yNorthSouthUpDown][current_j_yNorthSouthUpDown] == (16 * 16))
    1428:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <current_i_xEastWestLeftRight>
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <current_j_yNorthSouthUpDown>
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	fc 01       	movw	r30, r24
    1436:	ee 0f       	add	r30, r30
    1438:	ff 1f       	adc	r31, r31
    143a:	e8 0f       	add	r30, r24
    143c:	f9 1f       	adc	r31, r25
    143e:	ee 0f       	add	r30, r30
    1440:	ff 1f       	adc	r31, r31
    1442:	e2 0f       	add	r30, r18
    1444:	f3 1f       	adc	r31, r19
    1446:	ee 0f       	add	r30, r30
    1448:	ff 1f       	adc	r31, r31
    144a:	ee 0f       	add	r30, r30
    144c:	ff 1f       	adc	r31, r31
    144e:	e8 5b       	subi	r30, 0xB8	; 184
    1450:	fe 4f       	sbci	r31, 0xFE	; 254
    1452:	41 81       	ldd	r20, Z+1	; 0x01
    1454:	52 81       	ldd	r21, Z+2	; 0x02
    1456:	44 32       	cpi	r20, 0x24	; 36
    1458:	51 05       	cpc	r21, r1
    145a:	09 f0       	breq	.+2      	; 0x145e <_Z25calcFastPathToATargetCellhh+0xa0>
    145c:	75 c0       	rjmp	.+234    	; 0x1548 <_Z25calcFastPathToATargetCellhh+0x18a>
    145e:	61 e0       	ldi	r22, 0x01	; 1
    1460:	70 e0       	ldi	r23, 0x00	; 0
    1462:	ac 01       	movw	r20, r24
    1464:	44 0f       	add	r20, r20
    1466:	55 1f       	adc	r21, r21
    1468:	84 0f       	add	r24, r20
    146a:	95 1f       	adc	r25, r21
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	8c 01       	movw	r16, r24
    1472:	02 0f       	add	r16, r18
    1474:	13 1f       	adc	r17, r19
    1476:	00 0f       	add	r16, r16
    1478:	11 1f       	adc	r17, r17
    147a:	00 0f       	add	r16, r16
    147c:	11 1f       	adc	r17, r17
    147e:	07 5b       	subi	r16, 0xB7	; 183
    1480:	1e 4f       	sbci	r17, 0xFE	; 254
    1482:	ab 01       	movw	r20, r22
    1484:	41 50       	subi	r20, 0x01	; 1
    1486:	51 09       	sbc	r21, r1
    1488:	97 01       	movw	r18, r14
    148a:	f9 01       	movw	r30, r18
    148c:	78 97       	sbiw	r30, 0x18	; 24
    148e:	df 01       	movw	r26, r30
		//look at each node with .cellsToTargetCell = Length
		for (int x = 0; x < widthLengthSize; x++)
		{
			for (int y = 0; y < widthLengthSize; y++)
			{
				if(mazeArray[x][y].cellsToTargetCell == Length)
    1490:	81 8d       	ldd	r24, Z+25	; 0x19
    1492:	92 8d       	ldd	r25, Z+26	; 0x1a
    1494:	84 17       	cp	r24, r20
    1496:	95 07       	cpc	r25, r21
    1498:	09 f0       	breq	.+2      	; 0x149c <_Z25calcFastPathToATargetCellhh+0xde>
    149a:	43 c0       	rjmp	.+134    	; 0x1522 <_Z25calcFastPathToATargetCellhh+0x164>
				{
					//look for walls around node:Length except in direction of previous path
					//if nodes adjacent to is .cellsToTargetCell = (16 * 16)
					//if yes change .cellsToTargetCell to Length +1
					//these if statements look for a wall and makes sure it's in a direction we have not already been
					if ((!(mazeArray[x][y].cellParameters & north)//looks for no north wall
    149c:	80 8d       	ldd	r24, Z+24	; 0x18
    149e:	88 23       	and	r24, r24
    14a0:	5c f0       	brlt	.+22     	; 0x14b8 <_Z25calcFastPathToATargetCellhh+0xfa>
						&& (mazeArray[x][y+1].cellParameters & 0x08))//and looks for visited
    14a2:	94 8d       	ldd	r25, Z+28	; 0x1c
    14a4:	93 ff       	sbrs	r25, 3
    14a6:	08 c0       	rjmp	.+16     	; 0x14b8 <_Z25calcFastPathToATargetCellhh+0xfa>
						&& (mazeArray[x][y+1].cellsToTargetCell
    14a8:	c5 8c       	ldd	r12, Z+29	; 0x1d
    14aa:	d6 8c       	ldd	r13, Z+30	; 0x1e
    14ac:	94 e2       	ldi	r25, 0x24	; 36
    14ae:	c9 16       	cp	r12, r25
    14b0:	d1 04       	cpc	r13, r1
    14b2:	11 f4       	brne	.+4      	; 0x14b8 <_Z25calcFastPathToATargetCellhh+0xfa>
						== (widthLengthSize * widthLengthSize)))//and looks to see if the .cellsToTargetCell has not been set already. this might happen in a loop
					{mazeArray[x][y+1].cellsToTargetCell = (Length + 1);}
    14b4:	76 8f       	std	Z+30, r23	; 0x1e
    14b6:	65 8f       	std	Z+29, r22	; 0x1d

					if ((!(mazeArray[x][y].cellParameters & south)//looks for no south wall
    14b8:	86 fd       	sbrc	r24, 6
    14ba:	11 c0       	rjmp	.+34     	; 0x14de <_Z25calcFastPathToATargetCellhh+0x120>
						&& (mazeArray[x][y-1].cellParameters & 0x08))
    14bc:	54 96       	adiw	r26, 0x14	; 20
    14be:	9c 91       	ld	r25, X
    14c0:	54 97       	sbiw	r26, 0x14	; 20
    14c2:	93 ff       	sbrs	r25, 3
    14c4:	0c c0       	rjmp	.+24     	; 0x14de <_Z25calcFastPathToATargetCellhh+0x120>
						&& (mazeArray[x][y-1].cellsToTargetCell
    14c6:	55 96       	adiw	r26, 0x15	; 21
    14c8:	cd 90       	ld	r12, X+
    14ca:	dc 90       	ld	r13, X
    14cc:	56 97       	sbiw	r26, 0x16	; 22
    14ce:	94 e2       	ldi	r25, 0x24	; 36
    14d0:	c9 16       	cp	r12, r25
    14d2:	d1 04       	cpc	r13, r1
    14d4:	21 f4       	brne	.+8      	; 0x14de <_Z25calcFastPathToATargetCellhh+0x120>
						== (widthLengthSize * widthLengthSize)))
					{mazeArray[x][y-1].cellsToTargetCell = (Length + 1);}
    14d6:	56 96       	adiw	r26, 0x16	; 22
    14d8:	7c 93       	st	X, r23
    14da:	6e 93       	st	-X, r22
    14dc:	55 97       	sbiw	r26, 0x15	; 21

					if ((!(mazeArray[x][y].cellParameters & east)//looks for no east wall
    14de:	85 fd       	sbrc	r24, 5
    14e0:	11 c0       	rjmp	.+34     	; 0x1504 <_Z25calcFastPathToATargetCellhh+0x146>
						&& (mazeArray[x+1][y].cellParameters & 0x08))
    14e2:	d0 96       	adiw	r26, 0x30	; 48
    14e4:	9c 91       	ld	r25, X
    14e6:	d0 97       	sbiw	r26, 0x30	; 48
    14e8:	93 ff       	sbrs	r25, 3
    14ea:	0c c0       	rjmp	.+24     	; 0x1504 <_Z25calcFastPathToATargetCellhh+0x146>
						&& (mazeArray[x+1][y].cellsToTargetCell
    14ec:	d1 96       	adiw	r26, 0x31	; 49
    14ee:	cd 90       	ld	r12, X+
    14f0:	dc 90       	ld	r13, X
    14f2:	d2 97       	sbiw	r26, 0x32	; 50
    14f4:	94 e2       	ldi	r25, 0x24	; 36
    14f6:	c9 16       	cp	r12, r25
    14f8:	d1 04       	cpc	r13, r1
    14fa:	21 f4       	brne	.+8      	; 0x1504 <_Z25calcFastPathToATargetCellhh+0x146>
						== (widthLengthSize * widthLengthSize)))
					{mazeArray[x+1][y].cellsToTargetCell = (Length + 1);}
    14fc:	d2 96       	adiw	r26, 0x32	; 50
    14fe:	7c 93       	st	X, r23
    1500:	6e 93       	st	-X, r22
    1502:	d1 97       	sbiw	r26, 0x31	; 49

					if ((!(mazeArray[x][y].cellParameters & west)//looks for no west wall
    1504:	84 fd       	sbrc	r24, 4
    1506:	0d c0       	rjmp	.+26     	; 0x1522 <_Z25calcFastPathToATargetCellhh+0x164>
						&& (mazeArray[x-1][y].cellParameters & 0x08))
    1508:	8c 91       	ld	r24, X
    150a:	83 ff       	sbrs	r24, 3
    150c:	0a c0       	rjmp	.+20     	; 0x1522 <_Z25calcFastPathToATargetCellhh+0x164>
						&& (mazeArray[x-1][y].cellsToTargetCell
    150e:	11 96       	adiw	r26, 0x01	; 1
    1510:	8d 91       	ld	r24, X+
    1512:	9c 91       	ld	r25, X
    1514:	12 97       	sbiw	r26, 0x02	; 2
    1516:	84 97       	sbiw	r24, 0x24	; 36
    1518:	21 f4       	brne	.+8      	; 0x1522 <_Z25calcFastPathToATargetCellhh+0x164>
						== (widthLengthSize * widthLengthSize)))
					{mazeArray[x-1][y].cellsToTargetCell = (Length + 1);}
    151a:	12 96       	adiw	r26, 0x02	; 2
    151c:	7c 93       	st	X, r23
    151e:	6e 93       	st	-X, r22
    1520:	11 97       	sbiw	r26, 0x01	; 1
    1522:	34 96       	adiw	r30, 0x04	; 4
	while(mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown].cellsToTargetCell == (widthLengthSize * widthLengthSize))//current_j_yNorthSouthUpDown][current_j_yNorthSouthUpDown] == (16 * 16))
	{
		//look at each node with .cellsToTargetCell = Length
		for (int x = 0; x < widthLengthSize; x++)
		{
			for (int y = 0; y < widthLengthSize; y++)
    1524:	2e 17       	cp	r18, r30
    1526:	3f 07       	cpc	r19, r31
    1528:	09 f0       	breq	.+2      	; 0x152c <_Z25calcFastPathToATargetCellhh+0x16e>
    152a:	b1 cf       	rjmp	.-158    	; 0x148e <_Z25calcFastPathToATargetCellhh+0xd0>
    152c:	28 5e       	subi	r18, 0xE8	; 232
    152e:	3f 4f       	sbci	r19, 0xFF	; 255
	//make loop to not stop till Position(current) node is marked
	//	printf("Current direction: ");
	while(mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown].cellsToTargetCell == (widthLengthSize * widthLengthSize))//current_j_yNorthSouthUpDown][current_j_yNorthSouthUpDown] == (16 * 16))
	{
		//look at each node with .cellsToTargetCell = Length
		for (int x = 0; x < widthLengthSize; x++)
    1530:	c2 17       	cp	r28, r18
    1532:	d3 07       	cpc	r29, r19
    1534:	09 f0       	breq	.+2      	; 0x1538 <_Z25calcFastPathToATargetCellhh+0x17a>
    1536:	a9 cf       	rjmp	.-174    	; 0x148a <_Z25calcFastPathToATargetCellhh+0xcc>
    1538:	6f 5f       	subi	r22, 0xFF	; 255
    153a:	7f 4f       	sbci	r23, 0xFF	; 255
	uint16_t Length = 0;
	//marking target node as 0, are start point of MooresBFS(breadth first search)
	mazeArray[target_X][target_y].cellsToTargetCell = 0;
	//make loop to not stop till Position(current) node is marked
	//	printf("Current direction: ");
	while(mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown].cellsToTargetCell == (widthLengthSize * widthLengthSize))//current_j_yNorthSouthUpDown][current_j_yNorthSouthUpDown] == (16 * 16))
    153c:	f8 01       	movw	r30, r16
    153e:	80 81       	ld	r24, Z
    1540:	91 81       	ldd	r25, Z+1	; 0x01
    1542:	84 97       	sbiw	r24, 0x24	; 36
    1544:	09 f4       	brne	.+2      	; 0x1548 <_Z25calcFastPathToATargetCellhh+0x18a>
    1546:	9d cf       	rjmp	.-198    	; 0x1482 <_Z25calcFastPathToATargetCellhh+0xc4>
			WordsOfData++;
			eeprom_update_word((uint16_t*)WordsOfData,mazeArray[5][0].cellsToTargetCell);
			WordsOfData++;
			WordsOfData++; 
			*/
}
    1548:	df 91       	pop	r29
    154a:	cf 91       	pop	r28
    154c:	1f 91       	pop	r17
    154e:	0f 91       	pop	r16
    1550:	ff 90       	pop	r15
    1552:	ef 90       	pop	r14
    1554:	df 90       	pop	r13
    1556:	cf 90       	pop	r12
    1558:	08 95       	ret

0000155a <_Z17travelFastestPathv>:

void travelFastestPath()
{
    155a:	ef 92       	push	r14
    155c:	ff 92       	push	r15
    155e:	0f 93       	push	r16
    1560:	1f 93       	push	r17
    1562:	cf 93       	push	r28
    1564:	df 93       	push	r29
	while(!(mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown].cellsToTargetCell == 0))
    1566:	a0 91 47 01 	lds	r26, 0x0147	; 0x800147 <current_i_xEastWestLeftRight>
    156a:	8a 2f       	mov	r24, r26
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	b0 91 46 01 	lds	r27, 0x0146	; 0x800146 <current_j_yNorthSouthUpDown>
    1572:	2b 2f       	mov	r18, r27
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	fc 01       	movw	r30, r24
    1578:	ee 0f       	add	r30, r30
    157a:	ff 1f       	adc	r31, r31
    157c:	e8 0f       	add	r30, r24
    157e:	f9 1f       	adc	r31, r25
    1580:	ee 0f       	add	r30, r30
    1582:	ff 1f       	adc	r31, r31
    1584:	e2 0f       	add	r30, r18
    1586:	f3 1f       	adc	r31, r19
    1588:	ee 0f       	add	r30, r30
    158a:	ff 1f       	adc	r31, r31
    158c:	ee 0f       	add	r30, r30
    158e:	ff 1f       	adc	r31, r31
    1590:	e8 5b       	subi	r30, 0xB8	; 184
    1592:	fe 4f       	sbci	r31, 0xFE	; 254
    1594:	61 81       	ldd	r22, Z+1	; 0x01
    1596:	72 81       	ldd	r23, Z+2	; 0x02
    1598:	61 15       	cp	r22, r1
    159a:	71 05       	cpc	r23, r1
    159c:	09 f4       	brne	.+2      	; 0x15a0 <_Z17travelFastestPathv+0x46>
    159e:	3c c2       	rjmp	.+1144   	; 0x1a18 <_Z17travelFastestPathv+0x4be>
			}
			if(mazeArray[current_i_xEastWestLeftRight-1][current_j_yNorthSouthUpDown].cellsToTargetCell == (mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown].cellsToTargetCell - 1))
			{
				current_i_xEastWestLeftRight = current_i_xEastWestLeftRight - 1;
				rightGyroTurn();
				turnDirection = west;
    15a0:	00 e1       	ldi	r16, 0x10	; 16
			}
			if(mazeArray[current_i_xEastWestLeftRight+1][current_j_yNorthSouthUpDown].cellsToTargetCell == (mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown].cellsToTargetCell - 1))
			{
				current_i_xEastWestLeftRight = current_i_xEastWestLeftRight + 1;
				leftGyroTurn();
				turnDirection = east;
    15a2:	10 e2       	ldi	r17, 0x20	; 32
				break;
			}
			if(mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown-1].cellsToTargetCell == (mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown].cellsToTargetCell - 1))
			{
				current_j_yNorthSouthUpDown = current_j_yNorthSouthUpDown - 1;
				turnDirection = south;
    15a4:	d0 e4       	ldi	r29, 0x40	; 64
			case south:////////////// south
			if(mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown+1].cellsToTargetCell == (mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown].cellsToTargetCell - 1))
			{
				current_j_yNorthSouthUpDown = current_j_yNorthSouthUpDown + 1;
				rightEncoder180();
				turnDirection = north;
    15a6:	c0 e8       	ldi	r28, 0x80	; 128

void travelFastestPath()
{
	while(!(mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown].cellsToTargetCell == 0))
	{
		switch(currentDirection)
    15a8:	50 91 21 01 	lds	r21, 0x0121	; 0x800121 <currentDirection>
    15ac:	50 32       	cpi	r21, 0x20	; 32
    15ae:	09 f4       	brne	.+2      	; 0x15b2 <_Z17travelFastestPathv+0x58>
    15b0:	09 c1       	rjmp	.+530    	; 0x17c4 <_Z17travelFastestPathv+0x26a>
    15b2:	20 f4       	brcc	.+8      	; 0x15bc <_Z17travelFastestPathv+0x62>
    15b4:	50 31       	cpi	r21, 0x10	; 16
    15b6:	09 f4       	brne	.+2      	; 0x15ba <_Z17travelFastestPathv+0x60>
    15b8:	84 c1       	rjmp	.+776    	; 0x18c2 <_Z17travelFastestPathv+0x368>
    15ba:	fd c1       	rjmp	.+1018   	; 0x19b6 <_Z17travelFastestPathv+0x45c>
    15bc:	50 34       	cpi	r21, 0x40	; 64
    15be:	09 f4       	brne	.+2      	; 0x15c2 <_Z17travelFastestPathv+0x68>
    15c0:	82 c0       	rjmp	.+260    	; 0x16c6 <_Z17travelFastestPathv+0x16c>
    15c2:	50 38       	cpi	r21, 0x80	; 128
    15c4:	09 f0       	breq	.+2      	; 0x15c8 <_Z17travelFastestPathv+0x6e>
    15c6:	f7 c1       	rjmp	.+1006   	; 0x19b6 <_Z17travelFastestPathv+0x45c>
		{
			case north://////////// north
			if(mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown+1].cellsToTargetCell == (mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown].cellsToTargetCell - 1))
    15c8:	7b 01       	movw	r14, r22
    15ca:	41 e0       	ldi	r20, 0x01	; 1
    15cc:	e4 1a       	sub	r14, r20
    15ce:	f1 08       	sbc	r15, r1
    15d0:	fc 01       	movw	r30, r24
    15d2:	ee 0f       	add	r30, r30
    15d4:	ff 1f       	adc	r31, r31
    15d6:	e8 0f       	add	r30, r24
    15d8:	f9 1f       	adc	r31, r25
    15da:	ee 0f       	add	r30, r30
    15dc:	ff 1f       	adc	r31, r31
    15de:	a9 01       	movw	r20, r18
    15e0:	4f 5f       	subi	r20, 0xFF	; 255
    15e2:	5f 4f       	sbci	r21, 0xFF	; 255
    15e4:	e4 0f       	add	r30, r20
    15e6:	f5 1f       	adc	r31, r21
    15e8:	ee 0f       	add	r30, r30
    15ea:	ff 1f       	adc	r31, r31
    15ec:	ee 0f       	add	r30, r30
    15ee:	ff 1f       	adc	r31, r31
    15f0:	e8 5b       	subi	r30, 0xB8	; 184
    15f2:	fe 4f       	sbci	r31, 0xFE	; 254
    15f4:	41 81       	ldd	r20, Z+1	; 0x01
    15f6:	52 81       	ldd	r21, Z+2	; 0x02
    15f8:	4e 15       	cp	r20, r14
    15fa:	5f 05       	cpc	r21, r15
    15fc:	31 f4       	brne	.+12     	; 0x160a <_Z17travelFastestPathv+0xb0>
			{
				current_j_yNorthSouthUpDown = current_j_yNorthSouthUpDown + 1;
    15fe:	bf 5f       	subi	r27, 0xFF	; 255
    1600:	b0 93 46 01 	sts	0x0146, r27	; 0x800146 <current_j_yNorthSouthUpDown>
				turnDirection = north;
    1604:	c0 93 20 01 	sts	0x0120, r28	; 0x800120 <turnDirection>
				break;
    1608:	d6 c1       	rjmp	.+940    	; 0x19b6 <_Z17travelFastestPathv+0x45c>
			}
			if(mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown-1].cellsToTargetCell == (mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown].cellsToTargetCell - 1))
    160a:	fc 01       	movw	r30, r24
    160c:	ee 0f       	add	r30, r30
    160e:	ff 1f       	adc	r31, r31
    1610:	e8 0f       	add	r30, r24
    1612:	f9 1f       	adc	r31, r25
    1614:	ee 0f       	add	r30, r30
    1616:	ff 1f       	adc	r31, r31
    1618:	a9 01       	movw	r20, r18
    161a:	41 50       	subi	r20, 0x01	; 1
    161c:	51 09       	sbc	r21, r1
    161e:	e4 0f       	add	r30, r20
    1620:	f5 1f       	adc	r31, r21
    1622:	ee 0f       	add	r30, r30
    1624:	ff 1f       	adc	r31, r31
    1626:	ee 0f       	add	r30, r30
    1628:	ff 1f       	adc	r31, r31
    162a:	e8 5b       	subi	r30, 0xB8	; 184
    162c:	fe 4f       	sbci	r31, 0xFE	; 254
    162e:	41 81       	ldd	r20, Z+1	; 0x01
    1630:	52 81       	ldd	r21, Z+2	; 0x02
    1632:	e4 16       	cp	r14, r20
    1634:	f5 06       	cpc	r15, r21
    1636:	41 f4       	brne	.+16     	; 0x1648 <_Z17travelFastestPathv+0xee>
			{
				current_j_yNorthSouthUpDown = current_j_yNorthSouthUpDown - 1;
    1638:	b1 50       	subi	r27, 0x01	; 1
    163a:	b0 93 46 01 	sts	0x0146, r27	; 0x800146 <current_j_yNorthSouthUpDown>
				rightEncoder180();
    163e:	0e 94 ad 02 	call	0x55a	; 0x55a <_Z15rightEncoder180v>
				turnDirection = south;
    1642:	d0 93 20 01 	sts	0x0120, r29	; 0x800120 <turnDirection>
				break;
    1646:	b7 c1       	rjmp	.+878    	; 0x19b6 <_Z17travelFastestPathv+0x45c>
			}
			if(mazeArray[current_i_xEastWestLeftRight+1][current_j_yNorthSouthUpDown].cellsToTargetCell == (mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown].cellsToTargetCell - 1))
    1648:	ac 01       	movw	r20, r24
    164a:	4f 5f       	subi	r20, 0xFF	; 255
    164c:	5f 4f       	sbci	r21, 0xFF	; 255
    164e:	fa 01       	movw	r30, r20
    1650:	ee 0f       	add	r30, r30
    1652:	ff 1f       	adc	r31, r31
    1654:	e4 0f       	add	r30, r20
    1656:	f5 1f       	adc	r31, r21
    1658:	ee 0f       	add	r30, r30
    165a:	ff 1f       	adc	r31, r31
    165c:	e2 0f       	add	r30, r18
    165e:	f3 1f       	adc	r31, r19
    1660:	ee 0f       	add	r30, r30
    1662:	ff 1f       	adc	r31, r31
    1664:	ee 0f       	add	r30, r30
    1666:	ff 1f       	adc	r31, r31
    1668:	e8 5b       	subi	r30, 0xB8	; 184
    166a:	fe 4f       	sbci	r31, 0xFE	; 254
    166c:	41 81       	ldd	r20, Z+1	; 0x01
    166e:	52 81       	ldd	r21, Z+2	; 0x02
    1670:	e4 16       	cp	r14, r20
    1672:	f5 06       	cpc	r15, r21
    1674:	41 f4       	brne	.+16     	; 0x1686 <_Z17travelFastestPathv+0x12c>
			{
				current_i_xEastWestLeftRight = current_i_xEastWestLeftRight + 1;
    1676:	af 5f       	subi	r26, 0xFF	; 255
    1678:	a0 93 47 01 	sts	0x0147, r26	; 0x800147 <current_i_xEastWestLeftRight>
				rightGyroTurn();
    167c:	0e 94 1f 04 	call	0x83e	; 0x83e <_Z13rightGyroTurnv>
				turnDirection = east;
    1680:	10 93 20 01 	sts	0x0120, r17	; 0x800120 <turnDirection>
				break;
    1684:	98 c1       	rjmp	.+816    	; 0x19b6 <_Z17travelFastestPathv+0x45c>
			}
			if(mazeArray[current_i_xEastWestLeftRight-1][current_j_yNorthSouthUpDown].cellsToTargetCell == (mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown].cellsToTargetCell - 1))
    1686:	ac 01       	movw	r20, r24
    1688:	41 50       	subi	r20, 0x01	; 1
    168a:	51 09       	sbc	r21, r1
    168c:	fa 01       	movw	r30, r20
    168e:	ee 0f       	add	r30, r30
    1690:	ff 1f       	adc	r31, r31
    1692:	e4 0f       	add	r30, r20
    1694:	f5 1f       	adc	r31, r21
    1696:	ee 0f       	add	r30, r30
    1698:	ff 1f       	adc	r31, r31
    169a:	e2 0f       	add	r30, r18
    169c:	f3 1f       	adc	r31, r19
    169e:	ee 0f       	add	r30, r30
    16a0:	ff 1f       	adc	r31, r31
    16a2:	ee 0f       	add	r30, r30
    16a4:	ff 1f       	adc	r31, r31
    16a6:	e8 5b       	subi	r30, 0xB8	; 184
    16a8:	fe 4f       	sbci	r31, 0xFE	; 254
    16aa:	41 81       	ldd	r20, Z+1	; 0x01
    16ac:	52 81       	ldd	r21, Z+2	; 0x02
    16ae:	e4 16       	cp	r14, r20
    16b0:	f5 06       	cpc	r15, r21
    16b2:	09 f0       	breq	.+2      	; 0x16b6 <_Z17travelFastestPathv+0x15c>
    16b4:	48 c0       	rjmp	.+144    	; 0x1746 <_Z17travelFastestPathv+0x1ec>
			{
				current_i_xEastWestLeftRight = current_i_xEastWestLeftRight - 1;
    16b6:	a1 50       	subi	r26, 0x01	; 1
    16b8:	a0 93 47 01 	sts	0x0147, r26	; 0x800147 <current_i_xEastWestLeftRight>
				leftGyroTurn();
    16bc:	0e 94 2b 03 	call	0x656	; 0x656 <_Z12leftGyroTurnv>
				turnDirection = west;
    16c0:	00 93 20 01 	sts	0x0120, r16	; 0x800120 <turnDirection>
				break;
    16c4:	78 c1       	rjmp	.+752    	; 0x19b6 <_Z17travelFastestPathv+0x45c>
			}

			case south:////////////// south
			if(mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown+1].cellsToTargetCell == (mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown].cellsToTargetCell - 1))
    16c6:	7b 01       	movw	r14, r22
    16c8:	41 e0       	ldi	r20, 0x01	; 1
    16ca:	e4 1a       	sub	r14, r20
    16cc:	f1 08       	sbc	r15, r1
    16ce:	fc 01       	movw	r30, r24
    16d0:	ee 0f       	add	r30, r30
    16d2:	ff 1f       	adc	r31, r31
    16d4:	e8 0f       	add	r30, r24
    16d6:	f9 1f       	adc	r31, r25
    16d8:	ee 0f       	add	r30, r30
    16da:	ff 1f       	adc	r31, r31
    16dc:	a9 01       	movw	r20, r18
    16de:	4f 5f       	subi	r20, 0xFF	; 255
    16e0:	5f 4f       	sbci	r21, 0xFF	; 255
    16e2:	e4 0f       	add	r30, r20
    16e4:	f5 1f       	adc	r31, r21
    16e6:	ee 0f       	add	r30, r30
    16e8:	ff 1f       	adc	r31, r31
    16ea:	ee 0f       	add	r30, r30
    16ec:	ff 1f       	adc	r31, r31
    16ee:	e8 5b       	subi	r30, 0xB8	; 184
    16f0:	fe 4f       	sbci	r31, 0xFE	; 254
    16f2:	41 81       	ldd	r20, Z+1	; 0x01
    16f4:	52 81       	ldd	r21, Z+2	; 0x02
    16f6:	4e 15       	cp	r20, r14
    16f8:	5f 05       	cpc	r21, r15
    16fa:	41 f4       	brne	.+16     	; 0x170c <_Z17travelFastestPathv+0x1b2>
			{
				current_j_yNorthSouthUpDown = current_j_yNorthSouthUpDown + 1;
    16fc:	bf 5f       	subi	r27, 0xFF	; 255
    16fe:	b0 93 46 01 	sts	0x0146, r27	; 0x800146 <current_j_yNorthSouthUpDown>
				rightEncoder180();
    1702:	0e 94 ad 02 	call	0x55a	; 0x55a <_Z15rightEncoder180v>
				turnDirection = north;
    1706:	c0 93 20 01 	sts	0x0120, r28	; 0x800120 <turnDirection>
				break;
    170a:	55 c1       	rjmp	.+682    	; 0x19b6 <_Z17travelFastestPathv+0x45c>
			}
			if(mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown-1].cellsToTargetCell == (mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown].cellsToTargetCell - 1))
    170c:	fc 01       	movw	r30, r24
    170e:	ee 0f       	add	r30, r30
    1710:	ff 1f       	adc	r31, r31
    1712:	e8 0f       	add	r30, r24
    1714:	f9 1f       	adc	r31, r25
    1716:	ee 0f       	add	r30, r30
    1718:	ff 1f       	adc	r31, r31
    171a:	a9 01       	movw	r20, r18
    171c:	41 50       	subi	r20, 0x01	; 1
    171e:	51 09       	sbc	r21, r1
    1720:	e4 0f       	add	r30, r20
    1722:	f5 1f       	adc	r31, r21
    1724:	ee 0f       	add	r30, r30
    1726:	ff 1f       	adc	r31, r31
    1728:	ee 0f       	add	r30, r30
    172a:	ff 1f       	adc	r31, r31
    172c:	e8 5b       	subi	r30, 0xB8	; 184
    172e:	fe 4f       	sbci	r31, 0xFE	; 254
    1730:	41 81       	ldd	r20, Z+1	; 0x01
    1732:	52 81       	ldd	r21, Z+2	; 0x02
    1734:	e4 16       	cp	r14, r20
    1736:	f5 06       	cpc	r15, r21
    1738:	31 f4       	brne	.+12     	; 0x1746 <_Z17travelFastestPathv+0x1ec>
			{
				current_j_yNorthSouthUpDown = current_j_yNorthSouthUpDown - 1;
    173a:	b1 50       	subi	r27, 0x01	; 1
    173c:	b0 93 46 01 	sts	0x0146, r27	; 0x800146 <current_j_yNorthSouthUpDown>
				turnDirection = south;
    1740:	d0 93 20 01 	sts	0x0120, r29	; 0x800120 <turnDirection>
				break;
    1744:	38 c1       	rjmp	.+624    	; 0x19b6 <_Z17travelFastestPathv+0x45c>
			}
			if(mazeArray[current_i_xEastWestLeftRight+1][current_j_yNorthSouthUpDown].cellsToTargetCell == (mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown].cellsToTargetCell - 1))
    1746:	ac 01       	movw	r20, r24
    1748:	4f 5f       	subi	r20, 0xFF	; 255
    174a:	5f 4f       	sbci	r21, 0xFF	; 255
    174c:	fa 01       	movw	r30, r20
    174e:	ee 0f       	add	r30, r30
    1750:	ff 1f       	adc	r31, r31
    1752:	e4 0f       	add	r30, r20
    1754:	f5 1f       	adc	r31, r21
    1756:	ee 0f       	add	r30, r30
    1758:	ff 1f       	adc	r31, r31
    175a:	e2 0f       	add	r30, r18
    175c:	f3 1f       	adc	r31, r19
    175e:	ee 0f       	add	r30, r30
    1760:	ff 1f       	adc	r31, r31
    1762:	ee 0f       	add	r30, r30
    1764:	ff 1f       	adc	r31, r31
    1766:	e8 5b       	subi	r30, 0xB8	; 184
    1768:	fe 4f       	sbci	r31, 0xFE	; 254
    176a:	41 81       	ldd	r20, Z+1	; 0x01
    176c:	52 81       	ldd	r21, Z+2	; 0x02
    176e:	4e 15       	cp	r20, r14
    1770:	5f 05       	cpc	r21, r15
    1772:	41 f4       	brne	.+16     	; 0x1784 <_Z17travelFastestPathv+0x22a>
			{
				current_i_xEastWestLeftRight = current_i_xEastWestLeftRight + 1;
    1774:	af 5f       	subi	r26, 0xFF	; 255
    1776:	a0 93 47 01 	sts	0x0147, r26	; 0x800147 <current_i_xEastWestLeftRight>
				leftGyroTurn();
    177a:	0e 94 2b 03 	call	0x656	; 0x656 <_Z12leftGyroTurnv>
				turnDirection = east;
    177e:	10 93 20 01 	sts	0x0120, r17	; 0x800120 <turnDirection>
				break;
    1782:	19 c1       	rjmp	.+562    	; 0x19b6 <_Z17travelFastestPathv+0x45c>
			}
			if(mazeArray[current_i_xEastWestLeftRight-1][current_j_yNorthSouthUpDown].cellsToTargetCell == (mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown].cellsToTargetCell - 1))
    1784:	ac 01       	movw	r20, r24
    1786:	41 50       	subi	r20, 0x01	; 1
    1788:	51 09       	sbc	r21, r1
    178a:	fa 01       	movw	r30, r20
    178c:	ee 0f       	add	r30, r30
    178e:	ff 1f       	adc	r31, r31
    1790:	e4 0f       	add	r30, r20
    1792:	f5 1f       	adc	r31, r21
    1794:	ee 0f       	add	r30, r30
    1796:	ff 1f       	adc	r31, r31
    1798:	e2 0f       	add	r30, r18
    179a:	f3 1f       	adc	r31, r19
    179c:	ee 0f       	add	r30, r30
    179e:	ff 1f       	adc	r31, r31
    17a0:	ee 0f       	add	r30, r30
    17a2:	ff 1f       	adc	r31, r31
    17a4:	e8 5b       	subi	r30, 0xB8	; 184
    17a6:	fe 4f       	sbci	r31, 0xFE	; 254
    17a8:	41 81       	ldd	r20, Z+1	; 0x01
    17aa:	52 81       	ldd	r21, Z+2	; 0x02
    17ac:	4e 15       	cp	r20, r14
    17ae:	5f 05       	cpc	r21, r15
    17b0:	09 f0       	breq	.+2      	; 0x17b4 <_Z17travelFastestPathv+0x25a>
    17b2:	29 c1       	rjmp	.+594    	; 0x1a06 <_Z17travelFastestPathv+0x4ac>
			{
				current_i_xEastWestLeftRight = current_i_xEastWestLeftRight - 1;
    17b4:	a1 50       	subi	r26, 0x01	; 1
    17b6:	a0 93 47 01 	sts	0x0147, r26	; 0x800147 <current_i_xEastWestLeftRight>
				rightGyroTurn();
    17ba:	0e 94 1f 04 	call	0x83e	; 0x83e <_Z13rightGyroTurnv>
				turnDirection = west;
    17be:	00 93 20 01 	sts	0x0120, r16	; 0x800120 <turnDirection>
				break;
    17c2:	f9 c0       	rjmp	.+498    	; 0x19b6 <_Z17travelFastestPathv+0x45c>
			}

			case east:///////////////// east
			if(mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown+1].cellsToTargetCell == (mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown].cellsToTargetCell - 1))
    17c4:	7b 01       	movw	r14, r22
    17c6:	41 e0       	ldi	r20, 0x01	; 1
    17c8:	e4 1a       	sub	r14, r20
    17ca:	f1 08       	sbc	r15, r1
    17cc:	fc 01       	movw	r30, r24
    17ce:	ee 0f       	add	r30, r30
    17d0:	ff 1f       	adc	r31, r31
    17d2:	e8 0f       	add	r30, r24
    17d4:	f9 1f       	adc	r31, r25
    17d6:	ee 0f       	add	r30, r30
    17d8:	ff 1f       	adc	r31, r31
    17da:	a9 01       	movw	r20, r18
    17dc:	4f 5f       	subi	r20, 0xFF	; 255
    17de:	5f 4f       	sbci	r21, 0xFF	; 255
    17e0:	e4 0f       	add	r30, r20
    17e2:	f5 1f       	adc	r31, r21
    17e4:	ee 0f       	add	r30, r30
    17e6:	ff 1f       	adc	r31, r31
    17e8:	ee 0f       	add	r30, r30
    17ea:	ff 1f       	adc	r31, r31
    17ec:	e8 5b       	subi	r30, 0xB8	; 184
    17ee:	fe 4f       	sbci	r31, 0xFE	; 254
    17f0:	41 81       	ldd	r20, Z+1	; 0x01
    17f2:	52 81       	ldd	r21, Z+2	; 0x02
    17f4:	4e 15       	cp	r20, r14
    17f6:	5f 05       	cpc	r21, r15
    17f8:	41 f4       	brne	.+16     	; 0x180a <_Z17travelFastestPathv+0x2b0>
			{
				current_j_yNorthSouthUpDown = current_j_yNorthSouthUpDown + 1;
    17fa:	bf 5f       	subi	r27, 0xFF	; 255
    17fc:	b0 93 46 01 	sts	0x0146, r27	; 0x800146 <current_j_yNorthSouthUpDown>
				leftGyroTurn();
    1800:	0e 94 2b 03 	call	0x656	; 0x656 <_Z12leftGyroTurnv>
				turnDirection = north;
    1804:	c0 93 20 01 	sts	0x0120, r28	; 0x800120 <turnDirection>
				break;
    1808:	d6 c0       	rjmp	.+428    	; 0x19b6 <_Z17travelFastestPathv+0x45c>
			}
			if(mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown-1].cellsToTargetCell == (mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown].cellsToTargetCell - 1))
    180a:	fc 01       	movw	r30, r24
    180c:	ee 0f       	add	r30, r30
    180e:	ff 1f       	adc	r31, r31
    1810:	e8 0f       	add	r30, r24
    1812:	f9 1f       	adc	r31, r25
    1814:	ee 0f       	add	r30, r30
    1816:	ff 1f       	adc	r31, r31
    1818:	a9 01       	movw	r20, r18
    181a:	41 50       	subi	r20, 0x01	; 1
    181c:	51 09       	sbc	r21, r1
    181e:	e4 0f       	add	r30, r20
    1820:	f5 1f       	adc	r31, r21
    1822:	ee 0f       	add	r30, r30
    1824:	ff 1f       	adc	r31, r31
    1826:	ee 0f       	add	r30, r30
    1828:	ff 1f       	adc	r31, r31
    182a:	e8 5b       	subi	r30, 0xB8	; 184
    182c:	fe 4f       	sbci	r31, 0xFE	; 254
    182e:	41 81       	ldd	r20, Z+1	; 0x01
    1830:	52 81       	ldd	r21, Z+2	; 0x02
    1832:	4e 15       	cp	r20, r14
    1834:	5f 05       	cpc	r21, r15
    1836:	41 f4       	brne	.+16     	; 0x1848 <_Z17travelFastestPathv+0x2ee>
			{
				current_j_yNorthSouthUpDown = current_j_yNorthSouthUpDown - 1;
    1838:	b1 50       	subi	r27, 0x01	; 1
    183a:	b0 93 46 01 	sts	0x0146, r27	; 0x800146 <current_j_yNorthSouthUpDown>
				rightGyroTurn();
    183e:	0e 94 1f 04 	call	0x83e	; 0x83e <_Z13rightGyroTurnv>
				turnDirection = south;
    1842:	d0 93 20 01 	sts	0x0120, r29	; 0x800120 <turnDirection>
				break;
    1846:	b7 c0       	rjmp	.+366    	; 0x19b6 <_Z17travelFastestPathv+0x45c>
			}
			if(mazeArray[current_i_xEastWestLeftRight+1][current_j_yNorthSouthUpDown].cellsToTargetCell == (mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown].cellsToTargetCell - 1))
    1848:	ac 01       	movw	r20, r24
    184a:	4f 5f       	subi	r20, 0xFF	; 255
    184c:	5f 4f       	sbci	r21, 0xFF	; 255
    184e:	fa 01       	movw	r30, r20
    1850:	ee 0f       	add	r30, r30
    1852:	ff 1f       	adc	r31, r31
    1854:	e4 0f       	add	r30, r20
    1856:	f5 1f       	adc	r31, r21
    1858:	ee 0f       	add	r30, r30
    185a:	ff 1f       	adc	r31, r31
    185c:	e2 0f       	add	r30, r18
    185e:	f3 1f       	adc	r31, r19
    1860:	ee 0f       	add	r30, r30
    1862:	ff 1f       	adc	r31, r31
    1864:	ee 0f       	add	r30, r30
    1866:	ff 1f       	adc	r31, r31
    1868:	e8 5b       	subi	r30, 0xB8	; 184
    186a:	fe 4f       	sbci	r31, 0xFE	; 254
    186c:	41 81       	ldd	r20, Z+1	; 0x01
    186e:	52 81       	ldd	r21, Z+2	; 0x02
    1870:	4e 15       	cp	r20, r14
    1872:	5f 05       	cpc	r21, r15
    1874:	31 f4       	brne	.+12     	; 0x1882 <_Z17travelFastestPathv+0x328>
			{
				current_i_xEastWestLeftRight = current_i_xEastWestLeftRight + 1;
    1876:	af 5f       	subi	r26, 0xFF	; 255
    1878:	a0 93 47 01 	sts	0x0147, r26	; 0x800147 <current_i_xEastWestLeftRight>
				turnDirection = east;
    187c:	10 93 20 01 	sts	0x0120, r17	; 0x800120 <turnDirection>
				break;
    1880:	9a c0       	rjmp	.+308    	; 0x19b6 <_Z17travelFastestPathv+0x45c>
			}
			if(mazeArray[current_i_xEastWestLeftRight-1][current_j_yNorthSouthUpDown].cellsToTargetCell == (mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown].cellsToTargetCell - 1))
    1882:	ac 01       	movw	r20, r24
    1884:	41 50       	subi	r20, 0x01	; 1
    1886:	51 09       	sbc	r21, r1
    1888:	fa 01       	movw	r30, r20
    188a:	ee 0f       	add	r30, r30
    188c:	ff 1f       	adc	r31, r31
    188e:	e4 0f       	add	r30, r20
    1890:	f5 1f       	adc	r31, r21
    1892:	ee 0f       	add	r30, r30
    1894:	ff 1f       	adc	r31, r31
    1896:	e2 0f       	add	r30, r18
    1898:	f3 1f       	adc	r31, r19
    189a:	ee 0f       	add	r30, r30
    189c:	ff 1f       	adc	r31, r31
    189e:	ee 0f       	add	r30, r30
    18a0:	ff 1f       	adc	r31, r31
    18a2:	e8 5b       	subi	r30, 0xB8	; 184
    18a4:	fe 4f       	sbci	r31, 0xFE	; 254
    18a6:	41 81       	ldd	r20, Z+1	; 0x01
    18a8:	52 81       	ldd	r21, Z+2	; 0x02
    18aa:	4e 15       	cp	r20, r14
    18ac:	5f 05       	cpc	r21, r15
    18ae:	09 f0       	breq	.+2      	; 0x18b2 <_Z17travelFastestPathv+0x358>
    18b0:	af c0       	rjmp	.+350    	; 0x1a10 <_Z17travelFastestPathv+0x4b6>
			{
				current_i_xEastWestLeftRight = current_i_xEastWestLeftRight - 1;
    18b2:	a1 50       	subi	r26, 0x01	; 1
    18b4:	a0 93 47 01 	sts	0x0147, r26	; 0x800147 <current_i_xEastWestLeftRight>
				rightEncoder180();
    18b8:	0e 94 ad 02 	call	0x55a	; 0x55a <_Z15rightEncoder180v>
				turnDirection = west;
    18bc:	00 93 20 01 	sts	0x0120, r16	; 0x800120 <turnDirection>
				break;
    18c0:	7a c0       	rjmp	.+244    	; 0x19b6 <_Z17travelFastestPathv+0x45c>
			}

			case west://////////////// west
			if(mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown+1].cellsToTargetCell == (mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown].cellsToTargetCell - 1))
    18c2:	ab 01       	movw	r20, r22
    18c4:	41 50       	subi	r20, 0x01	; 1
    18c6:	51 09       	sbc	r21, r1
    18c8:	fc 01       	movw	r30, r24
    18ca:	ee 0f       	add	r30, r30
    18cc:	ff 1f       	adc	r31, r31
    18ce:	e8 0f       	add	r30, r24
    18d0:	f9 1f       	adc	r31, r25
    18d2:	ee 0f       	add	r30, r30
    18d4:	ff 1f       	adc	r31, r31
    18d6:	b9 01       	movw	r22, r18
    18d8:	6f 5f       	subi	r22, 0xFF	; 255
    18da:	7f 4f       	sbci	r23, 0xFF	; 255
    18dc:	e6 0f       	add	r30, r22
    18de:	f7 1f       	adc	r31, r23
    18e0:	ee 0f       	add	r30, r30
    18e2:	ff 1f       	adc	r31, r31
    18e4:	ee 0f       	add	r30, r30
    18e6:	ff 1f       	adc	r31, r31
    18e8:	e8 5b       	subi	r30, 0xB8	; 184
    18ea:	fe 4f       	sbci	r31, 0xFE	; 254
    18ec:	61 81       	ldd	r22, Z+1	; 0x01
    18ee:	72 81       	ldd	r23, Z+2	; 0x02
    18f0:	64 17       	cp	r22, r20
    18f2:	75 07       	cpc	r23, r21
    18f4:	41 f4       	brne	.+16     	; 0x1906 <_Z17travelFastestPathv+0x3ac>
			{
				current_j_yNorthSouthUpDown = current_j_yNorthSouthUpDown + 1;
    18f6:	bf 5f       	subi	r27, 0xFF	; 255
    18f8:	b0 93 46 01 	sts	0x0146, r27	; 0x800146 <current_j_yNorthSouthUpDown>
				rightGyroTurn();
    18fc:	0e 94 1f 04 	call	0x83e	; 0x83e <_Z13rightGyroTurnv>
				turnDirection = north;
    1900:	c0 93 20 01 	sts	0x0120, r28	; 0x800120 <turnDirection>
				break;
    1904:	58 c0       	rjmp	.+176    	; 0x19b6 <_Z17travelFastestPathv+0x45c>
			}
			if(mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown-1].cellsToTargetCell == (mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown].cellsToTargetCell - 1))
    1906:	fc 01       	movw	r30, r24
    1908:	ee 0f       	add	r30, r30
    190a:	ff 1f       	adc	r31, r31
    190c:	e8 0f       	add	r30, r24
    190e:	f9 1f       	adc	r31, r25
    1910:	ee 0f       	add	r30, r30
    1912:	ff 1f       	adc	r31, r31
    1914:	b9 01       	movw	r22, r18
    1916:	61 50       	subi	r22, 0x01	; 1
    1918:	71 09       	sbc	r23, r1
    191a:	e6 0f       	add	r30, r22
    191c:	f7 1f       	adc	r31, r23
    191e:	ee 0f       	add	r30, r30
    1920:	ff 1f       	adc	r31, r31
    1922:	ee 0f       	add	r30, r30
    1924:	ff 1f       	adc	r31, r31
    1926:	e8 5b       	subi	r30, 0xB8	; 184
    1928:	fe 4f       	sbci	r31, 0xFE	; 254
    192a:	61 81       	ldd	r22, Z+1	; 0x01
    192c:	72 81       	ldd	r23, Z+2	; 0x02
    192e:	64 17       	cp	r22, r20
    1930:	75 07       	cpc	r23, r21
    1932:	41 f4       	brne	.+16     	; 0x1944 <_Z17travelFastestPathv+0x3ea>
			{
				current_j_yNorthSouthUpDown = current_j_yNorthSouthUpDown - 1;
    1934:	b1 50       	subi	r27, 0x01	; 1
    1936:	b0 93 46 01 	sts	0x0146, r27	; 0x800146 <current_j_yNorthSouthUpDown>
				leftGyroTurn();
    193a:	0e 94 2b 03 	call	0x656	; 0x656 <_Z12leftGyroTurnv>
				turnDirection = south;
    193e:	d0 93 20 01 	sts	0x0120, r29	; 0x800120 <turnDirection>
				break;
    1942:	39 c0       	rjmp	.+114    	; 0x19b6 <_Z17travelFastestPathv+0x45c>
			}
			if(mazeArray[current_i_xEastWestLeftRight+1][current_j_yNorthSouthUpDown].cellsToTargetCell == (mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown].cellsToTargetCell - 1))
    1944:	bc 01       	movw	r22, r24
    1946:	6f 5f       	subi	r22, 0xFF	; 255
    1948:	7f 4f       	sbci	r23, 0xFF	; 255
    194a:	fb 01       	movw	r30, r22
    194c:	ee 0f       	add	r30, r30
    194e:	ff 1f       	adc	r31, r31
    1950:	e6 0f       	add	r30, r22
    1952:	f7 1f       	adc	r31, r23
    1954:	ee 0f       	add	r30, r30
    1956:	ff 1f       	adc	r31, r31
    1958:	e2 0f       	add	r30, r18
    195a:	f3 1f       	adc	r31, r19
    195c:	ee 0f       	add	r30, r30
    195e:	ff 1f       	adc	r31, r31
    1960:	ee 0f       	add	r30, r30
    1962:	ff 1f       	adc	r31, r31
    1964:	e8 5b       	subi	r30, 0xB8	; 184
    1966:	fe 4f       	sbci	r31, 0xFE	; 254
    1968:	61 81       	ldd	r22, Z+1	; 0x01
    196a:	72 81       	ldd	r23, Z+2	; 0x02
    196c:	64 17       	cp	r22, r20
    196e:	75 07       	cpc	r23, r21
    1970:	41 f4       	brne	.+16     	; 0x1982 <_Z17travelFastestPathv+0x428>
			{
				current_i_xEastWestLeftRight = current_i_xEastWestLeftRight + 1;
    1972:	af 5f       	subi	r26, 0xFF	; 255
    1974:	a0 93 47 01 	sts	0x0147, r26	; 0x800147 <current_i_xEastWestLeftRight>
				rightEncoder180();
    1978:	0e 94 ad 02 	call	0x55a	; 0x55a <_Z15rightEncoder180v>
				turnDirection = east;
    197c:	10 93 20 01 	sts	0x0120, r17	; 0x800120 <turnDirection>
				break;
    1980:	1a c0       	rjmp	.+52     	; 0x19b6 <_Z17travelFastestPathv+0x45c>
			}
			if(mazeArray[current_i_xEastWestLeftRight-1][current_j_yNorthSouthUpDown].cellsToTargetCell == (mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown].cellsToTargetCell - 1))
    1982:	01 97       	sbiw	r24, 0x01	; 1
    1984:	fc 01       	movw	r30, r24
    1986:	ee 0f       	add	r30, r30
    1988:	ff 1f       	adc	r31, r31
    198a:	e8 0f       	add	r30, r24
    198c:	f9 1f       	adc	r31, r25
    198e:	ee 0f       	add	r30, r30
    1990:	ff 1f       	adc	r31, r31
    1992:	e2 0f       	add	r30, r18
    1994:	f3 1f       	adc	r31, r19
    1996:	ee 0f       	add	r30, r30
    1998:	ff 1f       	adc	r31, r31
    199a:	ee 0f       	add	r30, r30
    199c:	ff 1f       	adc	r31, r31
    199e:	e8 5b       	subi	r30, 0xB8	; 184
    19a0:	fe 4f       	sbci	r31, 0xFE	; 254
    19a2:	81 81       	ldd	r24, Z+1	; 0x01
    19a4:	92 81       	ldd	r25, Z+2	; 0x02
    19a6:	84 17       	cp	r24, r20
    19a8:	95 07       	cpc	r25, r21
    19aa:	29 f4       	brne	.+10     	; 0x19b6 <_Z17travelFastestPathv+0x45c>
			{
				current_i_xEastWestLeftRight = current_i_xEastWestLeftRight - 1;
    19ac:	a1 50       	subi	r26, 0x01	; 1
    19ae:	a0 93 47 01 	sts	0x0147, r26	; 0x800147 <current_i_xEastWestLeftRight>
				turnDirection = west;
    19b2:	00 93 20 01 	sts	0x0120, r16	; 0x800120 <turnDirection>
		//{
			//timerInMilliseconds(10);
		//}


		timerInMilliseconds(500);
    19b6:	84 ef       	ldi	r24, 0xF4	; 244
    19b8:	91 e0       	ldi	r25, 0x01	; 1
    19ba:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
		moveOneBlock();
    19be:	0e 94 0c 09 	call	0x1218	; 0x1218 <_Z12moveOneBlockv>
		currentDirection = turnDirection;
    19c2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <turnDirection>
    19c6:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <currentDirection>
			*/
}

void travelFastestPath()
{
	while(!(mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown].cellsToTargetCell == 0))
    19ca:	a0 91 47 01 	lds	r26, 0x0147	; 0x800147 <current_i_xEastWestLeftRight>
    19ce:	8a 2f       	mov	r24, r26
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	b0 91 46 01 	lds	r27, 0x0146	; 0x800146 <current_j_yNorthSouthUpDown>
    19d6:	2b 2f       	mov	r18, r27
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	fc 01       	movw	r30, r24
    19dc:	ee 0f       	add	r30, r30
    19de:	ff 1f       	adc	r31, r31
    19e0:	e8 0f       	add	r30, r24
    19e2:	f9 1f       	adc	r31, r25
    19e4:	ee 0f       	add	r30, r30
    19e6:	ff 1f       	adc	r31, r31
    19e8:	e2 0f       	add	r30, r18
    19ea:	f3 1f       	adc	r31, r19
    19ec:	ee 0f       	add	r30, r30
    19ee:	ff 1f       	adc	r31, r31
    19f0:	ee 0f       	add	r30, r30
    19f2:	ff 1f       	adc	r31, r31
    19f4:	e8 5b       	subi	r30, 0xB8	; 184
    19f6:	fe 4f       	sbci	r31, 0xFE	; 254
    19f8:	61 81       	ldd	r22, Z+1	; 0x01
    19fa:	72 81       	ldd	r23, Z+2	; 0x02
    19fc:	61 15       	cp	r22, r1
    19fe:	71 05       	cpc	r23, r1
    1a00:	09 f0       	breq	.+2      	; 0x1a04 <_Z17travelFastestPathv+0x4aa>
    1a02:	d2 cd       	rjmp	.-1116   	; 0x15a8 <_Z17travelFastestPathv+0x4e>
    1a04:	09 c0       	rjmp	.+18     	; 0x1a18 <_Z17travelFastestPathv+0x4be>
				turnDirection = west;
				break;
			}

			case east:///////////////// east
			if(mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown+1].cellsToTargetCell == (mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown].cellsToTargetCell - 1))
    1a06:	7b 01       	movw	r14, r22
    1a08:	41 e0       	ldi	r20, 0x01	; 1
    1a0a:	e4 1a       	sub	r14, r20
    1a0c:	f1 08       	sbc	r15, r1
    1a0e:	fd ce       	rjmp	.-518    	; 0x180a <_Z17travelFastestPathv+0x2b0>
				turnDirection = west;
				break;
			}

			case west://////////////// west
			if(mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown+1].cellsToTargetCell == (mazeArray[current_i_xEastWestLeftRight][current_j_yNorthSouthUpDown].cellsToTargetCell - 1))
    1a10:	ab 01       	movw	r20, r22
    1a12:	41 50       	subi	r20, 0x01	; 1
    1a14:	51 09       	sbc	r21, r1
    1a16:	77 cf       	rjmp	.-274    	; 0x1906 <_Z17travelFastestPathv+0x3ac>

		timerInMilliseconds(500);
		moveOneBlock();
		currentDirection = turnDirection;
	}
}
    1a18:	df 91       	pop	r29
    1a1a:	cf 91       	pop	r28
    1a1c:	1f 91       	pop	r17
    1a1e:	0f 91       	pop	r16
    1a20:	ff 90       	pop	r15
    1a22:	ef 90       	pop	r14
    1a24:	08 95       	ret

00001a26 <main>:

int main(void)
{
	RegisterInitialization();
    1a26:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z22RegisterInitializationv>
    /* Replace with your application code */
    //while (1) 
	initializeMazeParameters();
    1a2a:	0e 94 98 09 	call	0x1330	; 0x1330 <_Z24initializeMazeParametersv>
	//{


		while (950 > IRSensorAngleLeft()) //waits for left front sensor to be tripped by user to continue
    1a2e:	0e 94 77 01 	call	0x2ee	; 0x2ee <_Z17IRSensorAngleLeftv>
    1a32:	86 3b       	cpi	r24, 0xB6	; 182
    1a34:	93 40       	sbci	r25, 0x03	; 3
    1a36:	28 f4       	brcc	.+10     	; 0x1a42 <main+0x1c>
		{
			timerInMilliseconds(10);
    1a38:	8a e0       	ldi	r24, 0x0A	; 10
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
    //while (1) 
	initializeMazeParameters();
	//{


		while (950 > IRSensorAngleLeft()) //waits for left front sensor to be tripped by user to continue
    1a40:	f6 cf       	rjmp	.-20     	; 0x1a2e <main+0x8>
		{
			timerInMilliseconds(10);
		}

			timerInMilliseconds(5000);
    1a42:	88 e8       	ldi	r24, 0x88	; 136
    1a44:	93 e1       	ldi	r25, 0x13	; 19
    1a46:	0e 94 c3 00 	call	0x186	; 0x186 <_Z19timerInMillisecondsj>
			calcFastPathToATargetCell(4,0);
    1a4a:	60 e0       	ldi	r22, 0x00	; 0
    1a4c:	84 e0       	ldi	r24, 0x04	; 4
    1a4e:	0e 94 df 09 	call	0x13be	; 0x13be <_Z25calcFastPathToATargetCellhh>
			travelFastestPath();
    1a52:	0e 94 ad 0a 	call	0x155a	; 0x155a <_Z17travelFastestPathv>
    //}
}
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	08 95       	ret

00001a5c <_GLOBAL__sub_I_recievedChar>:
uint8_t leftBaseSpeed = 50;
uint8_t rightBaseSpeed = 50;
uint16_t Paway = 20;// P coefficient// change with different light
uint16_t Ptoward = 10;// change with different light
uint16_t D = 10;// change with different light
uint16_t errorMax = ((rightBaseSpeed - 5) * Paway);//this is the max difference between 255 or 0 and Base speed, * the Propotional divider
    1a5c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <rightBaseSpeed>
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	05 97       	sbiw	r24, 0x05	; 5
    1a64:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <Paway>
    1a68:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <Paway+0x1>
    1a6c:	84 9f       	mul	r24, r20
    1a6e:	90 01       	movw	r18, r0
    1a70:	85 9f       	mul	r24, r21
    1a72:	30 0d       	add	r19, r0
    1a74:	94 9f       	mul	r25, r20
    1a76:	30 0d       	add	r19, r0
    1a78:	11 24       	eor	r1, r1
    1a7a:	30 93 23 01 	sts	0x0123, r19	; 0x800123 <__data_end+0x1>
    1a7e:	20 93 22 01 	sts	0x0122, r18	; 0x800122 <__data_end>
    1a82:	08 95       	ret

00001a84 <__udivmodhi4>:
    1a84:	aa 1b       	sub	r26, r26
    1a86:	bb 1b       	sub	r27, r27
    1a88:	51 e1       	ldi	r21, 0x11	; 17
    1a8a:	07 c0       	rjmp	.+14     	; 0x1a9a <__udivmodhi4_ep>

00001a8c <__udivmodhi4_loop>:
    1a8c:	aa 1f       	adc	r26, r26
    1a8e:	bb 1f       	adc	r27, r27
    1a90:	a6 17       	cp	r26, r22
    1a92:	b7 07       	cpc	r27, r23
    1a94:	10 f0       	brcs	.+4      	; 0x1a9a <__udivmodhi4_ep>
    1a96:	a6 1b       	sub	r26, r22
    1a98:	b7 0b       	sbc	r27, r23

00001a9a <__udivmodhi4_ep>:
    1a9a:	88 1f       	adc	r24, r24
    1a9c:	99 1f       	adc	r25, r25
    1a9e:	5a 95       	dec	r21
    1aa0:	a9 f7       	brne	.-22     	; 0x1a8c <__udivmodhi4_loop>
    1aa2:	80 95       	com	r24
    1aa4:	90 95       	com	r25
    1aa6:	bc 01       	movw	r22, r24
    1aa8:	cd 01       	movw	r24, r26
    1aaa:	08 95       	ret

00001aac <__divmodhi4>:
    1aac:	97 fb       	bst	r25, 7
    1aae:	07 2e       	mov	r0, r23
    1ab0:	16 f4       	brtc	.+4      	; 0x1ab6 <__divmodhi4+0xa>
    1ab2:	00 94       	com	r0
    1ab4:	07 d0       	rcall	.+14     	; 0x1ac4 <__divmodhi4_neg1>
    1ab6:	77 fd       	sbrc	r23, 7
    1ab8:	09 d0       	rcall	.+18     	; 0x1acc <__divmodhi4_neg2>
    1aba:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__udivmodhi4>
    1abe:	07 fc       	sbrc	r0, 7
    1ac0:	05 d0       	rcall	.+10     	; 0x1acc <__divmodhi4_neg2>
    1ac2:	3e f4       	brtc	.+14     	; 0x1ad2 <__divmodhi4_exit>

00001ac4 <__divmodhi4_neg1>:
    1ac4:	90 95       	com	r25
    1ac6:	81 95       	neg	r24
    1ac8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aca:	08 95       	ret

00001acc <__divmodhi4_neg2>:
    1acc:	70 95       	com	r23
    1ace:	61 95       	neg	r22
    1ad0:	7f 4f       	sbci	r23, 0xFF	; 255

00001ad2 <__divmodhi4_exit>:
    1ad2:	08 95       	ret

00001ad4 <__tablejump2__>:
    1ad4:	ee 0f       	add	r30, r30
    1ad6:	ff 1f       	adc	r31, r31
    1ad8:	05 90       	lpm	r0, Z+
    1ada:	f4 91       	lpm	r31, Z
    1adc:	e0 2d       	mov	r30, r0
    1ade:	09 94       	ijmp

00001ae0 <_exit>:
    1ae0:	f8 94       	cli

00001ae2 <__stop_program>:
    1ae2:	ff cf       	rjmp	.-2      	; 0x1ae2 <__stop_program>
