
RXDemo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000416  000004aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000416  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800104  00800104  000004ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003152  00000000  00000000  00000720  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000098a  00000000  00000000  00003872  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f03  00000000  00000000  000041fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006a4  00000000  00000000  00006100  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000103c  00000000  00000000  000067a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a04  00000000  00000000  000077e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006b8  00000000  00000000  000091e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__vector_3>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_5>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 c2 01 	jmp	0x384	; 0x384 <__vector_18>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	ef 01       	movw	r28, r30

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	e6 e1       	ldi	r30, 0x16	; 22
  7e:	f4 e0       	ldi	r31, 0x04	; 4
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	a4 30       	cpi	r26, 0x04	; 4
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	a4 e0       	ldi	r26, 0x04	; 4
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	a9 30       	cpi	r26, 0x09	; 9
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 03 02 	call	0x406	; 0x406 <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 98 01 	call	0x330	; 0x330 <main>
  b6:	0c 94 09 02 	jmp	0x412	; 0x412 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <_Z22RegisterInitializationv>:
	OCR0A = 0;
 }// the number we compare to the counter}

void rightMotorForward(uint8_t rightMotorForwardSpeed)//void)
{	OCR1B = 0;
	OCR0B = rightMotorForwardSpeed; 
  be:	87 b1       	in	r24, 0x07	; 7
  c0:	88 61       	ori	r24, 0x18	; 24
  c2:	87 b9       	out	0x07, r24	; 7
  c4:	83 e6       	ldi	r24, 0x63	; 99
  c6:	8a b9       	out	0x0a, r24	; 10
  c8:	87 b1       	in	r24, 0x07	; 7
  ca:	87 7d       	andi	r24, 0xD7	; 215
  cc:	87 b9       	out	0x07, r24	; 7
  ce:	84 b1       	in	r24, 0x04	; 4
  d0:	86 60       	ori	r24, 0x06	; 6
  d2:	84 b9       	out	0x04, r24	; 4
  d4:	21 e0       	ldi	r18, 0x01	; 1
  d6:	25 b9       	out	0x05, r18	; 5
  d8:	30 e8       	ldi	r19, 0x80	; 128
  da:	3b b9       	out	0x0b, r19	; 11
  dc:	83 ea       	ldi	r24, 0xA3	; 163
  de:	84 bd       	out	0x24, r24	; 36
  e0:	95 e0       	ldi	r25, 0x05	; 5
  e2:	95 bd       	out	0x25, r25	; 37
  e4:	81 ea       	ldi	r24, 0xA1	; 161
  e6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  ea:	8d e0       	ldi	r24, 0x0D	; 13
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f0:	e1 eb       	ldi	r30, 0xB1	; 177
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	87 60       	ori	r24, 0x07	; 7
  f8:	80 83       	st	Z, r24
  fa:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
  fe:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 102:	87 e6       	ldi	r24, 0x67	; 103
 104:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 108:	86 e0       	ldi	r24, 0x06	; 6
 10a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 10e:	84 e8       	ldi	r24, 0x84	; 132
 110:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 114:	87 e0       	ldi	r24, 0x07	; 7
 116:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
 11a:	30 93 6d 00 	sts	0x006D, r19	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
 11e:	20 93 6b 00 	sts	0x006B, r18	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
 122:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
 126:	78 94       	sei
 128:	08 95       	ret

0000012a <__vector_3>:
 12a:	1f 92       	push	r1
 12c:	0f 92       	push	r0
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	0f 92       	push	r0
 132:	11 24       	eor	r1, r1
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
 138:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <rightEncoderAPos>
 13c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <rightEncoderAPos+0x1>
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <rightEncoderAPos+0x1>
 146:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <rightEncoderAPos>
 14a:	9f 91       	pop	r25
 14c:	8f 91       	pop	r24
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <__vector_5>:
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
 166:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <rightEncoderAPos>
 16a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <rightEncoderAPos+0x1>
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <rightEncoderAPos+0x1>
 174:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <rightEncoderAPos>
 178:	9f 91       	pop	r25
 17a:	8f 91       	pop	r24
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <_Z12greenRXLEDOnv>:
 186:	59 9a       	sbi	0x0b, 1	; 11
 188:	08 95       	ret

0000018a <_Z13greenRXLEDOffv>:
 18a:	59 98       	cbi	0x0b, 1	; 11
 18c:	08 95       	ret

0000018e <_Z19timerInMillisecondsj>:
 18e:	0f 93       	push	r16
 190:	1f 93       	push	r17
 192:	8c 01       	movw	r16, r24
 194:	00 0f       	add	r16, r16
 196:	11 1f       	adc	r17, r17
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	08 0f       	add	r16, r24
 1a6:	19 1f       	adc	r17, r25
 1a8:	20 e0       	ldi	r18, 0x00	; 0
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	40 e0       	ldi	r20, 0x00	; 0
 1ae:	50 e0       	ldi	r21, 0x00	; 0
 1b0:	ba 01       	movw	r22, r20
 1b2:	e2 eb       	ldi	r30, 0xB2	; 178
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	81 3a       	cpi	r24, 0xA1	; 161
 1ba:	30 f4       	brcc	.+12     	; 0x1c8 <_Z19timerInMillisecondsj+0x3a>
 1bc:	80 81       	ld	r24, Z
 1be:	8f 5f       	subi	r24, 0xFF	; 255
 1c0:	80 83       	st	Z, r24
 1c2:	80 81       	ld	r24, Z
 1c4:	81 3a       	cpi	r24, 0xA1	; 161
 1c6:	d0 f3       	brcs	.-12     	; 0x1bc <_Z19timerInMillisecondsj+0x2e>
 1c8:	10 82       	st	Z, r1
 1ca:	4f 5f       	subi	r20, 0xFF	; 255
 1cc:	5f 4f       	sbci	r21, 0xFF	; 255
 1ce:	6f 4f       	sbci	r22, 0xFF	; 255
 1d0:	7f 4f       	sbci	r23, 0xFF	; 255
 1d2:	04 17       	cp	r16, r20
 1d4:	15 07       	cpc	r17, r21
 1d6:	26 07       	cpc	r18, r22
 1d8:	37 07       	cpc	r19, r23
 1da:	68 f7       	brcc	.-38     	; 0x1b6 <_Z19timerInMillisecondsj+0x28>
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	1f 91       	pop	r17
 1e2:	0f 91       	pop	r16
 1e4:	08 95       	ret

000001e6 <_Z14faceRightTimedv>:
 1e6:	0f 93       	push	r16
 1e8:	1f 93       	push	r17
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	08 e8       	ldi	r16, 0x88	; 136
 1f0:	10 e0       	ldi	r17, 0x00	; 0
 1f2:	f8 01       	movw	r30, r16
 1f4:	11 82       	std	Z+1, r1	; 0x01
 1f6:	10 82       	st	Z, r1
 1f8:	88 e7       	ldi	r24, 0x78	; 120
 1fa:	87 bd       	out	0x27, r24	; 39
 1fc:	ca e8       	ldi	r28, 0x8A	; 138
 1fe:	d0 e0       	ldi	r29, 0x00	; 0
 200:	88 e7       	ldi	r24, 0x78	; 120
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	99 83       	std	Y+1, r25	; 0x01
 206:	88 83       	st	Y, r24
 208:	18 bc       	out	0x28, r1	; 40
 20a:	85 e5       	ldi	r24, 0x55	; 85
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z19timerInMillisecondsj>
 212:	f8 01       	movw	r30, r16
 214:	11 82       	std	Z+1, r1	; 0x01
 216:	10 82       	st	Z, r1
 218:	17 bc       	out	0x27, r1	; 39
 21a:	19 82       	std	Y+1, r1	; 0x01
 21c:	18 82       	st	Y, r1
 21e:	18 bc       	out	0x28, r1	; 40
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	1f 91       	pop	r17
 226:	0f 91       	pop	r16
 228:	08 95       	ret

0000022a <_Z13faceLeftTimedv>:
 22a:	0f 93       	push	r16
 22c:	1f 93       	push	r17
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	08 e8       	ldi	r16, 0x88	; 136
 234:	10 e0       	ldi	r17, 0x00	; 0
 236:	88 e7       	ldi	r24, 0x78	; 120
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	f8 01       	movw	r30, r16
 23c:	91 83       	std	Z+1, r25	; 0x01
 23e:	80 83       	st	Z, r24
 240:	17 bc       	out	0x27, r1	; 39
 242:	ca e8       	ldi	r28, 0x8A	; 138
 244:	d0 e0       	ldi	r29, 0x00	; 0
 246:	19 82       	std	Y+1, r1	; 0x01
 248:	18 82       	st	Y, r1
 24a:	88 bd       	out	0x28, r24	; 40
 24c:	85 e5       	ldi	r24, 0x55	; 85
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z19timerInMillisecondsj>
 254:	f8 01       	movw	r30, r16
 256:	11 82       	std	Z+1, r1	; 0x01
 258:	10 82       	st	Z, r1
 25a:	17 bc       	out	0x27, r1	; 39
 25c:	19 82       	std	Y+1, r1	; 0x01
 25e:	18 82       	st	Y, r1
 260:	18 bc       	out	0x28, r1	; 40
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	1f 91       	pop	r17
 268:	0f 91       	pop	r16
 26a:	08 95       	ret

0000026c <_Z12forwardTimedv>:
 26c:	0f 93       	push	r16
 26e:	1f 93       	push	r17
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	08 e8       	ldi	r16, 0x88	; 136
 276:	10 e0       	ldi	r17, 0x00	; 0
 278:	f8 01       	movw	r30, r16
 27a:	11 82       	std	Z+1, r1	; 0x01
 27c:	10 82       	st	Z, r1
 27e:	88 e7       	ldi	r24, 0x78	; 120
 280:	87 bd       	out	0x27, r24	; 39
 282:	ca e8       	ldi	r28, 0x8A	; 138
 284:	d0 e0       	ldi	r29, 0x00	; 0
 286:	19 82       	std	Y+1, r1	; 0x01
 288:	18 82       	st	Y, r1
 28a:	88 bd       	out	0x28, r24	; 40
 28c:	8a ea       	ldi	r24, 0xAA	; 170
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z19timerInMillisecondsj>
 294:	f8 01       	movw	r30, r16
 296:	11 82       	std	Z+1, r1	; 0x01
 298:	10 82       	st	Z, r1
 29a:	17 bc       	out	0x27, r1	; 39
 29c:	19 82       	std	Y+1, r1	; 0x01
 29e:	18 82       	st	Y, r1
 2a0:	18 bc       	out	0x28, r1	; 40
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	1f 91       	pop	r17
 2a8:	0f 91       	pop	r16
 2aa:	08 95       	ret

000002ac <_Z13rearwardTimedv>:
 2ac:	0f 93       	push	r16
 2ae:	1f 93       	push	r17
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	08 e8       	ldi	r16, 0x88	; 136
 2b6:	10 e0       	ldi	r17, 0x00	; 0
 2b8:	88 e7       	ldi	r24, 0x78	; 120
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	f8 01       	movw	r30, r16
 2be:	91 83       	std	Z+1, r25	; 0x01
 2c0:	80 83       	st	Z, r24
 2c2:	17 bc       	out	0x27, r1	; 39
 2c4:	ca e8       	ldi	r28, 0x8A	; 138
 2c6:	d0 e0       	ldi	r29, 0x00	; 0
 2c8:	99 83       	std	Y+1, r25	; 0x01
 2ca:	88 83       	st	Y, r24
 2cc:	18 bc       	out	0x28, r1	; 40
 2ce:	8a ea       	ldi	r24, 0xAA	; 170
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z19timerInMillisecondsj>
 2d6:	f8 01       	movw	r30, r16
 2d8:	11 82       	std	Z+1, r1	; 0x01
 2da:	10 82       	st	Z, r1
 2dc:	17 bc       	out	0x27, r1	; 39
 2de:	19 82       	std	Y+1, r1	; 0x01
 2e0:	18 82       	st	Y, r1
 2e2:	18 bc       	out	0x28, r1	; 40
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	1f 91       	pop	r17
 2ea:	0f 91       	pop	r16
 2ec:	08 95       	ret

000002ee <_Z13faceRearTimedv>:
 2ee:	0f 93       	push	r16
 2f0:	1f 93       	push	r17
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	08 e8       	ldi	r16, 0x88	; 136
 2f8:	10 e0       	ldi	r17, 0x00	; 0
 2fa:	88 e7       	ldi	r24, 0x78	; 120
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	f8 01       	movw	r30, r16
 300:	91 83       	std	Z+1, r25	; 0x01
 302:	80 83       	st	Z, r24
 304:	17 bc       	out	0x27, r1	; 39
 306:	ca e8       	ldi	r28, 0x8A	; 138
 308:	d0 e0       	ldi	r29, 0x00	; 0
 30a:	19 82       	std	Y+1, r1	; 0x01
 30c:	18 82       	st	Y, r1
 30e:	88 bd       	out	0x28, r24	; 40
 310:	86 ee       	ldi	r24, 0xE6	; 230
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z19timerInMillisecondsj>
 318:	f8 01       	movw	r30, r16
 31a:	11 82       	std	Z+1, r1	; 0x01
 31c:	10 82       	st	Z, r1
 31e:	17 bc       	out	0x27, r1	; 39
 320:	19 82       	std	Y+1, r1	; 0x01
 322:	18 82       	st	Y, r1
 324:	18 bc       	out	0x28, r1	; 40
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	1f 91       	pop	r17
 32c:	0f 91       	pop	r16
 32e:	08 95       	ret

00000330 <main>:
#include "movement.cpp" //include by adding path by right clicking project main(TestMain)->Properties->Toolchain->AVR/GNU C++ Compiler->Directories->Add Item

  
int main(void)
{
	RegisterInitialization();
 330:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z22RegisterInitializationv>
					//greenRXLEDOn();
					//timerInMilliseconds(200);
					//greenRXLEDOff();
					//timerInMilliseconds(200);

		switch (recievedChar)
 334:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <recievedChar>
 338:	8c 36       	cpi	r24, 0x6C	; 108
 33a:	d1 f0       	breq	.+52     	; 0x370 <main+0x40>
 33c:	28 f4       	brcc	.+10     	; 0x348 <main+0x18>
 33e:	82 36       	cpi	r24, 0x62	; 98
 340:	69 f0       	breq	.+26     	; 0x35c <main+0x2c>
 342:	86 36       	cpi	r24, 0x66	; 102
 344:	31 f0       	breq	.+12     	; 0x352 <main+0x22>
 346:	f6 cf       	rjmp	.-20     	; 0x334 <main+0x4>
 348:	82 37       	cpi	r24, 0x72	; 114
 34a:	b9 f0       	breq	.+46     	; 0x37a <main+0x4a>
 34c:	85 37       	cpi	r24, 0x75	; 117
 34e:	59 f0       	breq	.+22     	; 0x366 <main+0x36>
 350:	f1 cf       	rjmp	.-30     	; 0x334 <main+0x4>
		{
		case 102:								//102 is ASCII 'f', for "forward"
			forwardTimed();
 352:	0e 94 36 01 	call	0x26c	; 0x26c <_Z12forwardTimedv>
			recievedChar = 0;
 356:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <recievedChar>
			break;
 35a:	ec cf       	rjmp	.-40     	; 0x334 <main+0x4>
		case 98:								//98 is ASCII 'b', for "backward"
			rearwardTimed();
 35c:	0e 94 56 01 	call	0x2ac	; 0x2ac <_Z13rearwardTimedv>
			recievedChar = 0;
 360:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <recievedChar>
			break;
 364:	e7 cf       	rjmp	.-50     	; 0x334 <main+0x4>
		case 117:								//117 is ASCII 'u', for "u-turn"
			faceRearTimed();
 366:	0e 94 77 01 	call	0x2ee	; 0x2ee <_Z13faceRearTimedv>
			recievedChar = 0;
 36a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <recievedChar>
			break;		
 36e:	e2 cf       	rjmp	.-60     	; 0x334 <main+0x4>
		case 108:								//108 is ASCII 'l', for "left face"
			faceLeftTimed();
 370:	0e 94 15 01 	call	0x22a	; 0x22a <_Z13faceLeftTimedv>
			recievedChar = 0;
 374:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <recievedChar>
			break;		
 378:	dd cf       	rjmp	.-70     	; 0x334 <main+0x4>
		case 114:								//114 is ASCII 'r', for "right face"
			faceRightTimed();
 37a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_Z14faceRightTimedv>
			recievedChar = 0;
 37e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <recievedChar>
			break;		
 382:	d8 cf       	rjmp	.-80     	; 0x334 <main+0x4>

00000384 <__vector_18>:
		}
    }
}
 
ISR(USART_RX_vect)								//Interrupt Service Routine, if data comes in on RX pin, this triggers
{
 384:	1f 92       	push	r1
 386:	0f 92       	push	r0
 388:	0f b6       	in	r0, 0x3f	; 63
 38a:	0f 92       	push	r0
 38c:	11 24       	eor	r1, r1
 38e:	2f 93       	push	r18
 390:	3f 93       	push	r19
 392:	4f 93       	push	r20
 394:	5f 93       	push	r21
 396:	6f 93       	push	r22
 398:	7f 93       	push	r23
 39a:	8f 93       	push	r24
 39c:	9f 93       	push	r25
 39e:	af 93       	push	r26
 3a0:	bf 93       	push	r27
 3a2:	ef 93       	push	r30
 3a4:	ff 93       	push	r31
    recievedChar  = 114;//UDR0;
 3a6:	82 e7       	ldi	r24, 0x72	; 114
 3a8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <recievedChar>
				greenRXLEDOn();
 3ac:	0e 94 c3 00 	call	0x186	; 0x186 <_Z12greenRXLEDOnv>
 				timerInMilliseconds(200);
 3b0:	88 ec       	ldi	r24, 0xC8	; 200
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z19timerInMillisecondsj>
 				greenRXLEDOff();
 3b8:	0e 94 c5 00 	call	0x18a	; 0x18a <_Z13greenRXLEDOffv>
 3bc:	ff 91       	pop	r31
 3be:	ef 91       	pop	r30
 3c0:	bf 91       	pop	r27
 3c2:	af 91       	pop	r26
 3c4:	9f 91       	pop	r25
 3c6:	8f 91       	pop	r24
 3c8:	7f 91       	pop	r23
 3ca:	6f 91       	pop	r22
 3cc:	5f 91       	pop	r21
 3ce:	4f 91       	pop	r20
 3d0:	3f 91       	pop	r19
 3d2:	2f 91       	pop	r18
 3d4:	0f 90       	pop	r0
 3d6:	0f be       	out	0x3f, r0	; 63
 3d8:	0f 90       	pop	r0
 3da:	1f 90       	pop	r1
 3dc:	18 95       	reti

000003de <_GLOBAL__sub_I_recievedChar>:
uint8_t rightBaseSpeed = 50;
uint16_t Paway = 2;// P coefficient// change with different light
uint16_t Ptoward = 2;// change with different light
uint16_t Daway = 2;// change with different light
uint16_t Dtoward = 2;// change with different light
uint16_t errorMax = ((rightBaseSpeed - 5) * Paway);//this is the max difference between 255 or 0 and Base speed, * the Propotional divider
 3de:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <rightBaseSpeed>
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	05 97       	sbiw	r24, 0x05	; 5
 3e6:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <Paway>
 3ea:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <Paway+0x1>
 3ee:	84 9f       	mul	r24, r20
 3f0:	90 01       	movw	r18, r0
 3f2:	85 9f       	mul	r24, r21
 3f4:	30 0d       	add	r19, r0
 3f6:	94 9f       	mul	r25, r20
 3f8:	30 0d       	add	r19, r0
 3fa:	11 24       	eor	r1, r1
 3fc:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <__data_end+0x1>
 400:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <__data_end>
 404:	08 95       	ret

00000406 <__tablejump2__>:
 406:	ee 0f       	add	r30, r30
 408:	ff 1f       	adc	r31, r31
 40a:	05 90       	lpm	r0, Z+
 40c:	f4 91       	lpm	r31, Z
 40e:	e0 2d       	mov	r30, r0
 410:	09 94       	ijmp

00000412 <_exit>:
 412:	f8 94       	cli

00000414 <__stop_program>:
 414:	ff cf       	rjmp	.-2      	; 0x414 <__stop_program>
