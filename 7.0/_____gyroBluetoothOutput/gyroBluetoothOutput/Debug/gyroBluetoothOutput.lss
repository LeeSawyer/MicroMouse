
gyroBluetoothOutput.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000026e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000026e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009aa  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000734  00000000  00000000  00000cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032b  00000000  00000000  000013e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00001714  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043f  00000000  00000000  000017a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000345  00000000  00000000  00001bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001f24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_21>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 0b 01 	jmp	0x216	; 0x216 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

int main(void)
{
	/////////////////////////////////USART config
	//UBRR0H = (BRC >> 8); //sets the UART BAUD rate shifted over 8 bits , upper 8 bits
	UBRR0L = BRC;// lower 8bits
  80:	87 e6       	ldi	r24, 0x67	; 103
  82:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1 << TXEN0);//  | (1 << TXCIE0);// TXEN0 enables transmit of UART 0; TXCIE0 trips the USART_TX_vect interupt when the UDR0 register empties
  86:	88 e0       	ldi	r24, 0x08	; 8
  88:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);// sets up 8 bit data frame
  8c:	86 e0       	ldi	r24, 0x06	; 6
  8e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	
	/////////////////////////////////ADC configure
	ADCSRA = _BV(ADEN) | _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADIE); //Enable ADC and with prescaler=128; page 256 of datasheet
  92:	ea e7       	ldi	r30, 0x7A	; 122
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	8f e8       	ldi	r24, 0x8F	; 143
  98:	80 83       	st	Z, r24
		//aden: adc enable; 
		//input clockmux range: 16,000,000/50,000= 320  to   16,000,000/200,000= 80
				// 128 is the closest to what we need, so: ADPS2,ADPS1,ADPS0 all need to be 1 
		//adie: adc interupt enable
	DIDR0 = (1 << ADC0D) | (1 << ADC1D) | (1 << ADC2D);//disables digital input from this pin is not needed to reduce power consumption
  9a:	87 e0       	ldi	r24, 0x07	; 7
  9c:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	ADMUX |= 1<<REFS0;// AVcc with External Capacitor at Aref pin, leaving MUX0,MUX1,MUX2,and MUX3 zero says we are using ADC0
  a0:	ac e7       	ldi	r26, 0x7C	; 124
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	8c 91       	ld	r24, X
  a6:	80 64       	ori	r24, 0x40	; 64
  a8:	8c 93       	st	X, r24
	//ADMUX |= 1<<ADLAR;//flips the bit needs to use High bit, gives 8bit resolution
	
	sei();//Set External Interupt
  aa:	78 94       	sei
	
	ADCSRA |= _BV(ADSC);          //adsc: adc start first conversion
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <main+0x32>

000000b4 <__vector_21>:
 	//return totalAngle;
 	////        return gyroRead;
 //}

ISR(ADC_vect)
{
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	2f 93       	push	r18
  c0:	3f 93       	push	r19
  c2:	4f 93       	push	r20
  c4:	5f 93       	push	r21
  c6:	6f 93       	push	r22
  c8:	7f 93       	push	r23
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	af 93       	push	r26
  d0:	bf 93       	push	r27
  d2:	ef 93       	push	r30
  d4:	ff 93       	push	r31
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	cd b7       	in	r28, 0x3d	; 61
  dc:	de b7       	in	r29, 0x3e	; 62
  de:	25 97       	sbiw	r28, 0x05	; 5
  e0:	de bf       	out	0x3e, r29	; 62
  e2:	cd bf       	out	0x3d, r28	; 61
	//unsigned int num = 1024;// our input number
	char buf[5];//buffer ?
	
	uint8_t theLow = ADCL; // ADC lower value
  e4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	uint16_t theTenBitResult = ADCH <<8 | theLow;// ADC higher value
  e8:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	4a e0       	ldi	r20, 0x0A	; 10
  f0:	be 01       	movw	r22, r28
  f2:	6f 5f       	subi	r22, 0xFF	; 255
  f4:	7f 4f       	sbci	r23, 0xFF	; 255
  f6:	92 2b       	or	r25, r18
  f8:	0e 94 d6 00 	call	0x1ac	; 0x1ac <__itoa_ncheck>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	8f e9       	ldi	r24, 0x9F	; 159
  fe:	9f e0       	ldi	r25, 0x0F	; 15
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <__vector_21+0x4c>
 104:	00 c0       	rjmp	.+0      	; 0x106 <__vector_21+0x52>
 106:	00 00       	nop
	itoa(theTenBitResult, buf, 10);//(input number, pointer to buffer array, base), requires <stdlib.h>

		
	_delay_ms(1);
	//sending just one char
	UDR0 = buf[0];//'9';//register that we put the data in that we want transmitted
 108:	89 81       	ldd	r24, Y+1	; 0x01
 10a:	e6 ec       	ldi	r30, 0xC6	; 198
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 83       	st	Z, r24
 110:	8f e9       	ldi	r24, 0x9F	; 159
 112:	9f e0       	ldi	r25, 0x0F	; 15
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <__vector_21+0x60>
 118:	00 c0       	rjmp	.+0      	; 0x11a <__vector_21+0x66>
 11a:	00 00       	nop
 	_delay_ms(1);
 	UDR0 = buf[1];
 11c:	8a 81       	ldd	r24, Y+2	; 0x02
 11e:	80 83       	st	Z, r24
 120:	8f e9       	ldi	r24, 0x9F	; 159
 122:	9f e0       	ldi	r25, 0x0F	; 15
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <__vector_21+0x70>
 128:	00 c0       	rjmp	.+0      	; 0x12a <__vector_21+0x76>
 12a:	00 00       	nop
 	_delay_ms(1);
 	UDR0 = buf[2];
 12c:	8b 81       	ldd	r24, Y+3	; 0x03
 12e:	80 83       	st	Z, r24
 130:	8f e9       	ldi	r24, 0x9F	; 159
 132:	9f e0       	ldi	r25, 0x0F	; 15
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <__vector_21+0x80>
 138:	00 c0       	rjmp	.+0      	; 0x13a <__vector_21+0x86>
 13a:	00 00       	nop
 	_delay_ms(1);
 	UDR0 = buf[3];
 13c:	8c 81       	ldd	r24, Y+4	; 0x04
 13e:	80 83       	st	Z, r24
 140:	8f e9       	ldi	r24, 0x9F	; 159
 142:	9f e0       	ldi	r25, 0x0F	; 15
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <__vector_21+0x90>
 148:	00 c0       	rjmp	.+0      	; 0x14a <__vector_21+0x96>
 14a:	00 00       	nop
 	_delay_ms(1);
 	UDR0 = 0x0A;
 14c:	8a e0       	ldi	r24, 0x0A	; 10
 14e:	80 83       	st	Z, r24
 150:	8f e9       	ldi	r24, 0x9F	; 159
 152:	9f e0       	ldi	r25, 0x0F	; 15
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <__vector_21+0xa0>
 158:	00 c0       	rjmp	.+0      	; 0x15a <__vector_21+0xa6>
 15a:	00 00       	nop
 	_delay_ms(1);
 	UDR0 = 0x0D;
 15c:	8d e0       	ldi	r24, 0x0D	; 13
 15e:	80 83       	st	Z, r24
 160:	9f ef       	ldi	r25, 0xFF	; 255
 162:	23 ed       	ldi	r18, 0xD3	; 211
 164:	80 e3       	ldi	r24, 0x30	; 48
 166:	91 50       	subi	r25, 0x01	; 1
 168:	20 40       	sbci	r18, 0x00	; 0
 16a:	80 40       	sbci	r24, 0x00	; 0
 16c:	e1 f7       	brne	.-8      	; 0x166 <__vector_21+0xb2>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <__vector_21+0xbc>
 170:	00 00       	nop
	_delay_ms(1000);
		
		
	ADCSRA |= 1<<ADSC;
 172:	ea e7       	ldi	r30, 0x7A	; 122
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	80 64       	ori	r24, 0x40	; 64
 17a:	80 83       	st	Z, r24
	
}
 17c:	0f 90       	pop	r0
 17e:	0f 90       	pop	r0
 180:	0f 90       	pop	r0
 182:	0f 90       	pop	r0
 184:	0f 90       	pop	r0
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	ff 91       	pop	r31
 18c:	ef 91       	pop	r30
 18e:	bf 91       	pop	r27
 190:	af 91       	pop	r26
 192:	9f 91       	pop	r25
 194:	8f 91       	pop	r24
 196:	7f 91       	pop	r23
 198:	6f 91       	pop	r22
 19a:	5f 91       	pop	r21
 19c:	4f 91       	pop	r20
 19e:	3f 91       	pop	r19
 1a0:	2f 91       	pop	r18
 1a2:	0f 90       	pop	r0
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	0f 90       	pop	r0
 1a8:	1f 90       	pop	r1
 1aa:	18 95       	reti

000001ac <__itoa_ncheck>:
 1ac:	bb 27       	eor	r27, r27
 1ae:	4a 30       	cpi	r20, 0x0A	; 10
 1b0:	31 f4       	brne	.+12     	; 0x1be <__itoa_ncheck+0x12>
 1b2:	99 23       	and	r25, r25
 1b4:	22 f4       	brpl	.+8      	; 0x1be <__itoa_ncheck+0x12>
 1b6:	bd e2       	ldi	r27, 0x2D	; 45
 1b8:	90 95       	com	r25
 1ba:	81 95       	neg	r24
 1bc:	9f 4f       	sbci	r25, 0xFF	; 255
 1be:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__utoa_common>

000001c2 <__utoa_ncheck>:
 1c2:	bb 27       	eor	r27, r27

000001c4 <__utoa_common>:
 1c4:	fb 01       	movw	r30, r22
 1c6:	55 27       	eor	r21, r21
 1c8:	aa 27       	eor	r26, r26
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	aa 1f       	adc	r26, r26
 1d0:	a4 17       	cp	r26, r20
 1d2:	10 f0       	brcs	.+4      	; 0x1d8 <__utoa_common+0x14>
 1d4:	a4 1b       	sub	r26, r20
 1d6:	83 95       	inc	r24
 1d8:	50 51       	subi	r21, 0x10	; 16
 1da:	b9 f7       	brne	.-18     	; 0x1ca <__utoa_common+0x6>
 1dc:	a0 5d       	subi	r26, 0xD0	; 208
 1de:	aa 33       	cpi	r26, 0x3A	; 58
 1e0:	08 f0       	brcs	.+2      	; 0x1e4 <__utoa_common+0x20>
 1e2:	a9 5d       	subi	r26, 0xD9	; 217
 1e4:	a1 93       	st	Z+, r26
 1e6:	00 97       	sbiw	r24, 0x00	; 0
 1e8:	79 f7       	brne	.-34     	; 0x1c8 <__utoa_common+0x4>
 1ea:	b1 11       	cpse	r27, r1
 1ec:	b1 93       	st	Z+, r27
 1ee:	11 92       	st	Z+, r1
 1f0:	cb 01       	movw	r24, r22
 1f2:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <strrev>

000001f6 <strrev>:
 1f6:	dc 01       	movw	r26, r24
 1f8:	fc 01       	movw	r30, r24
 1fa:	67 2f       	mov	r22, r23
 1fc:	71 91       	ld	r23, Z+
 1fe:	77 23       	and	r23, r23
 200:	e1 f7       	brne	.-8      	; 0x1fa <strrev+0x4>
 202:	32 97       	sbiw	r30, 0x02	; 2
 204:	04 c0       	rjmp	.+8      	; 0x20e <strrev+0x18>
 206:	7c 91       	ld	r23, X
 208:	6d 93       	st	X+, r22
 20a:	70 83       	st	Z, r23
 20c:	62 91       	ld	r22, -Z
 20e:	ae 17       	cp	r26, r30
 210:	bf 07       	cpc	r27, r31
 212:	c8 f3       	brcs	.-14     	; 0x206 <strrev+0x10>
 214:	08 95       	ret

00000216 <_exit>:
 216:	f8 94       	cli

00000218 <__stop_program>:
 218:	ff cf       	rjmp	.-2      	; 0x218 <__stop_program>
